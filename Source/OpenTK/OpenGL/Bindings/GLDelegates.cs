namespace OpenTK.OpenGL
{
    using GLsizei = System.Int32;
    using GLsizeiptr = System.IntPtr;
    using GLintptr = System.IntPtr;
    using GLboolean = System.Boolean;
    using GLbitfield = System.Int32;
    using GLvoid = System.				Object;
    using GLchar = System.Char;
    using GLbyte = System.Byte;
    using GLubyte = System.Byte;
    using GLshort = System.Int16;
    using GLushort = System.Int16;
    using GLint = System.Int32;
    using GLuint = System.Int32;
    using GLfloat = System.Single;
    using GLclampf = System.Single;
    using GLdouble = System.Double;
    using GLclampd = System.Double;
    using GLstring = System.String;
    using GLsizeiptrARB = System.IntPtr;
    using GLintptrARB = System.IntPtr;
    using GLhandleARB = System.Int32;
    using GLhalfARB = System.Int16;
    using GLhalfNV = System.Int16;
    using GLcharARB = System.Char;
    using GLint64EXT = System.Int64;
    using GLuint64EXT = System.Int64;
    using GLint64 = System.Int64;
    using GLuint64 = System.Int64;

    internal static class Delegates
    {
        delegate void NewList(List list, ListMode mode);
        delegate void EndList();
        delegate void CallList(List list);
        delegate void CallLists(SizeI n, ListNameType type, Void* lists);
        delegate void DeleteLists(List list, SizeI range);
        delegate List GenLists(SizeI range);
        delegate void ListBase(List @base);
        delegate void Begin(BeginMode mode);
        delegate void Bitmap(SizeI width, SizeI height, CoordF xorig, CoordF yorig, CoordF xmove, CoordF ymove, UInt8* bitmap);
        delegate void Color3b(ColorB red, ColorB green, ColorB blue);
        delegate void Color3bv(ColorB* v);
        delegate void Color3d(ColorD red, ColorD green, ColorD blue);
        delegate void Color3dv(ColorD* v);
        delegate void Color3f(ColorF red, ColorF green, ColorF blue);
        delegate void Color3fv(ColorF* v);
        delegate void Color3i(ColorI red, ColorI green, ColorI blue);
        delegate void Color3iv(ColorI* v);
        delegate void Color3s(ColorS red, ColorS green, ColorS blue);
        delegate void Color3sv(ColorS* v);
        delegate void Color3ub(ColorUB red, ColorUB green, ColorUB blue);
        delegate void Color3ubv(ColorUB* v);
        delegate void Color3ui(ColorUI red, ColorUI green, ColorUI blue);
        delegate void Color3uiv(ColorUI* v);
        delegate void Color3us(ColorUS red, ColorUS green, ColorUS blue);
        delegate void Color3usv(ColorUS* v);
        delegate void Color4b(ColorB red, ColorB green, ColorB blue, ColorB alpha);
        delegate void Color4bv(ColorB* v);
        delegate void Color4d(ColorD red, ColorD green, ColorD blue, ColorD alpha);
        delegate void Color4dv(ColorD* v);
        delegate void Color4f(ColorF red, ColorF green, ColorF blue, ColorF alpha);
        delegate void Color4fv(ColorF* v);
        delegate void Color4i(ColorI red, ColorI green, ColorI blue, ColorI alpha);
        delegate void Color4iv(ColorI* v);
        delegate void Color4s(ColorS red, ColorS green, ColorS blue, ColorS alpha);
        delegate void Color4sv(ColorS* v);
        delegate void Color4ub(ColorUB red, ColorUB green, ColorUB blue, ColorUB alpha);
        delegate void Color4ubv(ColorUB* v);
        delegate void Color4ui(ColorUI red, ColorUI green, ColorUI blue, ColorUI alpha);
        delegate void Color4uiv(ColorUI* v);
        delegate void Color4us(ColorUS red, ColorUS green, ColorUS blue, ColorUS alpha);
        delegate void Color4usv(ColorUS* v);
        delegate void EdgeFlag(Boolean flag);
        delegate void EdgeFlagv(Boolean* flag);
        delegate void End();
        delegate void Indexd(ColorIndexValueD c);
        delegate void Indexdv(ColorIndexValueD* c);
        delegate void Indexf(ColorIndexValueF c);
        delegate void Indexfv(ColorIndexValueF* c);
        delegate void Indexi(ColorIndexValueI c);
        delegate void Indexiv(ColorIndexValueI* c);
        delegate void Indexs(ColorIndexValueS c);
        delegate void Indexsv(ColorIndexValueS* c);
        delegate void Normal3b(Int8 nx, Int8 ny, Int8 nz);
        delegate void Normal3bv(Int8* v);
        delegate void Normal3d(CoordD nx, CoordD ny, CoordD nz);
        delegate void Normal3dv(CoordD* v);
        delegate void Normal3f(CoordF nx, CoordF ny, CoordF nz);
        delegate void Normal3fv(CoordF* v);
        delegate void Normal3i(Int32 nx, Int32 ny, Int32 nz);
        delegate void Normal3iv(Int32* v);
        delegate void Normal3s(Int16 nx, Int16 ny, Int16 nz);
        delegate void Normal3sv(Int16* v);
        delegate void RasterPos2d(CoordD x, CoordD y);
        delegate void RasterPos2dv(CoordD* v);
        delegate void RasterPos2f(CoordF x, CoordF y);
        delegate void RasterPos2fv(CoordF* v);
        delegate void RasterPos2i(CoordI x, CoordI y);
        delegate void RasterPos2iv(CoordI* v);
        delegate void RasterPos2s(CoordS x, CoordS y);
        delegate void RasterPos2sv(CoordS* v);
        delegate void RasterPos3d(CoordD x, CoordD y, CoordD z);
        delegate void RasterPos3dv(CoordD* v);
        delegate void RasterPos3f(CoordF x, CoordF y, CoordF z);
        delegate void RasterPos3fv(CoordF* v);
        delegate void RasterPos3i(CoordI x, CoordI y, CoordI z);
        delegate void RasterPos3iv(CoordI* v);
        delegate void RasterPos3s(CoordS x, CoordS y, CoordS z);
        delegate void RasterPos3sv(CoordS* v);
        delegate void RasterPos4d(CoordD x, CoordD y, CoordD z, CoordD w);
        delegate void RasterPos4dv(CoordD* v);
        delegate void RasterPos4f(CoordF x, CoordF y, CoordF z, CoordF w);
        delegate void RasterPos4fv(CoordF* v);
        delegate void RasterPos4i(CoordI x, CoordI y, CoordI z, CoordI w);
        delegate void RasterPos4iv(CoordI* v);
        delegate void RasterPos4s(CoordS x, CoordS y, CoordS z, CoordS w);
        delegate void RasterPos4sv(CoordS* v);
        delegate void Rectd(CoordD x1, CoordD y1, CoordD x2, CoordD y2);
        delegate void Rectdv(CoordD* v1, CoordD* v2);
        delegate void Rectf(CoordF x1, CoordF y1, CoordF x2, CoordF y2);
        delegate void Rectfv(CoordF* v1, CoordF* v2);
        delegate void Recti(CoordI x1, CoordI y1, CoordI x2, CoordI y2);
        delegate void Rectiv(CoordI* v1, CoordI* v2);
        delegate void Rects(CoordS x1, CoordS y1, CoordS x2, CoordS y2);
        delegate void Rectsv(CoordS* v1, CoordS* v2);
        delegate void TexCoord1d(CoordD s);
        delegate void TexCoord1dv(CoordD* v);
        delegate void TexCoord1f(CoordF s);
        delegate void TexCoord1fv(CoordF* v);
        delegate void TexCoord1i(CoordI s);
        delegate void TexCoord1iv(CoordI* v);
        delegate void TexCoord1s(CoordS s);
        delegate void TexCoord1sv(CoordS* v);
        delegate void TexCoord2d(CoordD s, CoordD t);
        delegate void TexCoord2dv(CoordD* v);
        delegate void TexCoord2f(CoordF s, CoordF t);
        delegate void TexCoord2fv(CoordF* v);
        delegate void TexCoord2i(CoordI s, CoordI t);
        delegate void TexCoord2iv(CoordI* v);
        delegate void TexCoord2s(CoordS s, CoordS t);
        delegate void TexCoord2sv(CoordS* v);
        delegate void TexCoord3d(CoordD s, CoordD t, CoordD r);
        delegate void TexCoord3dv(CoordD* v);
        delegate void TexCoord3f(CoordF s, CoordF t, CoordF r);
        delegate void TexCoord3fv(CoordF* v);
        delegate void TexCoord3i(CoordI s, CoordI t, CoordI r);
        delegate void TexCoord3iv(CoordI* v);
        delegate void TexCoord3s(CoordS s, CoordS t, CoordS r);
        delegate void TexCoord3sv(CoordS* v);
        delegate void TexCoord4d(CoordD s, CoordD t, CoordD r, CoordD q);
        delegate void TexCoord4dv(CoordD* v);
        delegate void TexCoord4f(CoordF s, CoordF t, CoordF r, CoordF q);
        delegate void TexCoord4fv(CoordF* v);
        delegate void TexCoord4i(CoordI s, CoordI t, CoordI r, CoordI q);
        delegate void TexCoord4iv(CoordI* v);
        delegate void TexCoord4s(CoordS s, CoordS t, CoordS r, CoordS q);
        delegate void TexCoord4sv(CoordS* v);
        delegate void Vertex2d(CoordD x, CoordD y);
        delegate void Vertex2dv(CoordD* v);
        delegate void Vertex2f(CoordF x, CoordF y);
        delegate void Vertex2fv(CoordF* v);
        delegate void Vertex2i(CoordI x, CoordI y);
        delegate void Vertex2iv(CoordI* v);
        delegate void Vertex2s(CoordS x, CoordS y);
        delegate void Vertex2sv(CoordS* v);
        delegate void Vertex3d(CoordD x, CoordD y, CoordD z);
        delegate void Vertex3dv(CoordD* v);
        delegate void Vertex3f(CoordF x, CoordF y, CoordF z);
        delegate void Vertex3fv(CoordF* v);
        delegate void Vertex3i(CoordI x, CoordI y, CoordI z);
        delegate void Vertex3iv(CoordI* v);
        delegate void Vertex3s(CoordS x, CoordS y, CoordS z);
        delegate void Vertex3sv(CoordS* v);
        delegate void Vertex4d(CoordD x, CoordD y, CoordD z, CoordD w);
        delegate void Vertex4dv(CoordD* v);
        delegate void Vertex4f(CoordF x, CoordF y, CoordF z, CoordF w);
        delegate void Vertex4fv(CoordF* v);
        delegate void Vertex4i(CoordI x, CoordI y, CoordI z, CoordI w);
        delegate void Vertex4iv(CoordI* v);
        delegate void Vertex4s(CoordS x, CoordS y, CoordS z, CoordS w);
        delegate void Vertex4sv(CoordS* v);
        delegate void ClipPlane(ClipPlaneName plane, Float64* equation);
        delegate void ColorMaterial(MaterialFace face, ColorMaterialParameter mode);
        delegate void CullFace(CullFaceMode mode);
        delegate void Fogf(FogParameter pname, CheckedFloat32 param);
        delegate void Fogfv(FogParameter pname, CheckedFloat32* @params);
        delegate void Fogi(FogParameter pname, CheckedInt32 param);
        delegate void Fogiv(FogParameter pname, CheckedInt32* @params);
        delegate void FrontFace(FrontFaceDirection mode);
        delegate void Hint(HintTarget target, HintMode mode);
        delegate void Lightf(LightName light, LightParameter pname, CheckedFloat32 param);
        delegate void Lightfv(LightName light, LightParameter pname, CheckedFloat32* @params);
        delegate void Lighti(LightName light, LightParameter pname, CheckedInt32 param);
        delegate void Lightiv(LightName light, LightParameter pname, CheckedInt32* @params);
        delegate void LightModelf(LightModelParameter pname, Float32 param);
        delegate void LightModelfv(LightModelParameter pname, Float32* @params);
        delegate void LightModeli(LightModelParameter pname, Int32 param);
        delegate void LightModeliv(LightModelParameter pname, Int32* @params);
        delegate void LineStipple(CheckedInt32 factor, LineStipple pattern);
        delegate void LineWidth(CheckedFloat32 width);
        delegate void Materialf(MaterialFace face, MaterialParameter pname, CheckedFloat32 param);
        delegate void Materialfv(MaterialFace face, MaterialParameter pname, CheckedFloat32* @params);
        delegate void Materiali(MaterialFace face, MaterialParameter pname, CheckedInt32 param);
        delegate void Materialiv(MaterialFace face, MaterialParameter pname, CheckedInt32* @params);
        delegate void PointSize(CheckedFloat32 size);
        delegate void PolygonMode(MaterialFace face, PolygonMode mode);
        delegate void PolygonStipple(UInt8* mask);
        delegate void Scissor(WinCoord x, WinCoord y, SizeI width, SizeI height);
        delegate void ShadeModel(ShadingModel mode);
        delegate void TexParameterf(TextureTarget target, TextureParameterName pname, CheckedFloat32 param);
        delegate void TexParameterfv(TextureTarget target, TextureParameterName pname, CheckedFloat32* @params);
        delegate void TexParameteri(TextureTarget target, TextureParameterName pname, CheckedInt32 param);
        delegate void TexParameteriv(TextureTarget target, TextureParameterName pname, CheckedInt32* @params);
        delegate void TexImage1D(TextureTarget target, CheckedInt32 level, TextureComponentCount internalformat, SizeI width, CheckedInt32 border, PixelFormat format, PixelType type, Void* pixels);
        delegate void TexImage2D(TextureTarget target, CheckedInt32 level, TextureComponentCount internalformat, SizeI width, SizeI height, CheckedInt32 border, PixelFormat format, PixelType type, Void* pixels);
        delegate void TexEnvf(TextureEnvTarget target, TextureEnvParameter pname, CheckedFloat32 param);
        delegate void TexEnvfv(TextureEnvTarget target, TextureEnvParameter pname, CheckedFloat32* @params);
        delegate void TexEnvi(TextureEnvTarget target, TextureEnvParameter pname, CheckedInt32 param);
        delegate void TexEnviv(TextureEnvTarget target, TextureEnvParameter pname, CheckedInt32* @params);
        delegate void TexGend(TextureCoordName coord, TextureGenParameter pname, Float64 param);
        delegate void TexGendv(TextureCoordName coord, TextureGenParameter pname, Float64* @params);
        delegate void TexGenf(TextureCoordName coord, TextureGenParameter pname, CheckedFloat32 param);
        delegate void TexGenfv(TextureCoordName coord, TextureGenParameter pname, CheckedFloat32* @params);
        delegate void TexGeni(TextureCoordName coord, TextureGenParameter pname, CheckedInt32 param);
        delegate void TexGeniv(TextureCoordName coord, TextureGenParameter pname, CheckedInt32* @params);
        delegate void FeedbackBuffer(SizeI size, FeedbackType type, FeedbackElement* buffer);
        delegate void SelectBuffer(SizeI size, SelectName* buffer);
        delegate Int32 RenderMode(RenderingMode mode);
        delegate void InitNames();
        delegate void LoadName(SelectName name);
        delegate void PassThrough(FeedbackElement token);
        delegate void PopName();
        delegate void PushName(SelectName name);
        delegate void DrawBuffer(DrawBufferMode mode);
        delegate void Clear(ClearBufferMask mask);
        delegate void ClearAccum(Float32 red, Float32 green, Float32 blue, Float32 alpha);
        delegate void ClearIndex(MaskedColorIndexValueF c);
        delegate void ClearColor(ClampedColorF red, ClampedColorF green, ClampedColorF blue, ClampedColorF alpha);
        delegate void ClearStencil(StencilValue s);
        delegate void ClearDepth(ClampedFloat64 depth);
        delegate void StencilMask(MaskedStencilValue mask);
        delegate void ColorMask(Boolean red, Boolean green, Boolean blue, Boolean alpha);
        delegate void DepthMask(Boolean flag);
        delegate void IndexMask(MaskedColorIndexValueI mask);
        delegate void Accum(AccumOp op, CoordF value);
        delegate void Disable(EnableCap cap);
        delegate void Enable(EnableCap cap);
        delegate void Finish();
        delegate void Flush();
        delegate void PopAttrib();
        delegate void PushAttrib(AttribMask mask);
        delegate void Map1d(MapTarget target, CoordD u1, CoordD u2, Int32 stride, CheckedInt32 order, CoordD* points);
        delegate void Map1f(MapTarget target, CoordF u1, CoordF u2, Int32 stride, CheckedInt32 order, CoordF* points);
        delegate void Map2d(MapTarget target, CoordD u1, CoordD u2, Int32 ustride, CheckedInt32 uorder, CoordD v1, CoordD v2, Int32 vstride, CheckedInt32 vorder, CoordD* points);
        delegate void Map2f(MapTarget target, CoordF u1, CoordF u2, Int32 ustride, CheckedInt32 uorder, CoordF v1, CoordF v2, Int32 vstride, CheckedInt32 vorder, CoordF* points);
        delegate void MapGrid1d(Int32 un, CoordD u1, CoordD u2);
        delegate void MapGrid1f(Int32 un, CoordF u1, CoordF u2);
        delegate void MapGrid2d(Int32 un, CoordD u1, CoordD u2, Int32 vn, CoordD v1, CoordD v2);
        delegate void MapGrid2f(Int32 un, CoordF u1, CoordF u2, Int32 vn, CoordF v1, CoordF v2);
        delegate void EvalCoord1d(CoordD u);
        delegate void EvalCoord1dv(CoordD* u);
        delegate void EvalCoord1f(CoordF u);
        delegate void EvalCoord1fv(CoordF* u);
        delegate void EvalCoord2d(CoordD u, CoordD v);
        delegate void EvalCoord2dv(CoordD* u);
        delegate void EvalCoord2f(CoordF u, CoordF v);
        delegate void EvalCoord2fv(CoordF* u);
        delegate void EvalMesh1(MeshMode1 mode, CheckedInt32 i1, CheckedInt32 i2);
        delegate void EvalPoint1(Int32 i);
        delegate void EvalMesh2(MeshMode2 mode, CheckedInt32 i1, CheckedInt32 i2, CheckedInt32 j1, CheckedInt32 j2);
        delegate void EvalPoint2(CheckedInt32 i, CheckedInt32 j);
        delegate void AlphaFunc(AlphaFunction func, ClampedFloat32 @ref);
        delegate void BlendFunc(BlendingFactorSrc sfactor, BlendingFactorDest dfactor);
        delegate void LogicOp(LogicOp opcode);
        delegate void StencilFunc(StencilFunction func, ClampedStencilValue @ref, MaskedStencilValue mask);
        delegate void StencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass);
        delegate void DepthFunc(DepthFunction func);
        delegate void PixelZoom(Float32 xfactor, Float32 yfactor);
        delegate void PixelTransferf(PixelTransferParameter pname, CheckedFloat32 param);
        delegate void PixelTransferi(PixelTransferParameter pname, CheckedInt32 param);
        delegate void PixelStoref(PixelStoreParameter pname, CheckedFloat32 param);
        delegate void PixelStorei(PixelStoreParameter pname, CheckedInt32 param);
        delegate void PixelMapfv(PixelMap map, CheckedInt32 mapsize, Float32* values);
        delegate void PixelMapuiv(PixelMap map, CheckedInt32 mapsize, UInt32* values);
        delegate void PixelMapusv(PixelMap map, CheckedInt32 mapsize, UInt16* values);
        delegate void ReadBuffer(ReadBufferMode mode);
        delegate void CopyPixels(WinCoord x, WinCoord y, SizeI width, SizeI height, PixelCopyType type);
        delegate void ReadPixels(WinCoord x, WinCoord y, SizeI width, SizeI height, PixelFormat format, PixelType type, Void* pixels);
        delegate void DrawPixels(SizeI width, SizeI height, PixelFormat format, PixelType type, Void* pixels);
        delegate void GetBooleanv(GetPName pname, Boolean* @params);
        delegate void GetClipPlane(ClipPlaneName plane, Float64* equation);
        delegate void GetDoublev(GetPName pname, Float64* @params);
        delegate ErrorCode GetError();
        delegate void GetFloatv(GetPName pname, Float32* @params);
        delegate void GetIntegerv(GetPName pname, Int32* @params);
        delegate void GetLightfv(LightName light, LightParameter pname, Float32* @params);
        delegate void GetLightiv(LightName light, LightParameter pname, Int32* @params);
        delegate void GetMapdv(MapTarget target, GetMapQuery query, Float64* v);
        delegate void GetMapfv(MapTarget target, GetMapQuery query, Float32* v);
        delegate void GetMapiv(MapTarget target, GetMapQuery query, Int32* v);
        delegate void GetMaterialfv(MaterialFace face, MaterialParameter pname, Float32* @params);
        delegate void GetMaterialiv(MaterialFace face, MaterialParameter pname, Int32* @params);
        delegate void GetPixelMapfv(PixelMap map, Float32* values);
        delegate void GetPixelMapuiv(PixelMap map, UInt32* values);
        delegate void GetPixelMapusv(PixelMap map, UInt16* values);
        delegate void GetPolygonStipple(UInt8* mask);
        delegate String GetString(StringName name);
        delegate void GetTexEnvfv(TextureEnvTarget target, TextureEnvParameter pname, Float32* @params);
        delegate void GetTexEnviv(TextureEnvTarget target, TextureEnvParameter pname, Int32* @params);
        delegate void GetTexGendv(TextureCoordName coord, TextureGenParameter pname, Float64* @params);
        delegate void GetTexGenfv(TextureCoordName coord, TextureGenParameter pname, Float32* @params);
        delegate void GetTexGeniv(TextureCoordName coord, TextureGenParameter pname, Int32* @params);
        delegate void GetTexImage(TextureTarget target, CheckedInt32 level, PixelFormat format, PixelType type, Void* pixels);
        delegate void GetTexParameterfv(TextureTarget target, GetTextureParameter pname, Float32* @params);
        delegate void GetTexParameteriv(TextureTarget target, GetTextureParameter pname, Int32* @params);
        delegate void GetTexLevelParameterfv(TextureTarget target, CheckedInt32 level, GetTextureParameter pname, Float32* @params);
        delegate void GetTexLevelParameteriv(TextureTarget target, CheckedInt32 level, GetTextureParameter pname, Int32* @params);
        delegate Boolean IsEnabled(EnableCap cap);
        delegate Boolean IsList(List list);
        delegate void DepthRange(ClampedFloat64 near, ClampedFloat64 far);
        delegate void Frustum(Float64 left, Float64 right, Float64 bottom, Float64 top, Float64 zNear, Float64 zFar);
        delegate void LoadIdentity();
        delegate void LoadMatrixf(Float32* m);
        delegate void LoadMatrixd(Float64* m);
        delegate void MatrixMode(MatrixMode mode);
        delegate void MultMatrixf(Float32* m);
        delegate void MultMatrixd(Float64* m);
        delegate void Ortho(Float64 left, Float64 right, Float64 bottom, Float64 top, Float64 zNear, Float64 zFar);
        delegate void PopMatrix();
        delegate void PushMatrix();
        delegate void Rotated(Float64 angle, Float64 x, Float64 y, Float64 z);
        delegate void Rotatef(Float32 angle, Float32 x, Float32 y, Float32 z);
        delegate void Scaled(Float64 x, Float64 y, Float64 z);
        delegate void Scalef(Float32 x, Float32 y, Float32 z);
        delegate void Translated(Float64 x, Float64 y, Float64 z);
        delegate void Translatef(Float32 x, Float32 y, Float32 z);
        delegate void Viewport(WinCoord x, WinCoord y, SizeI width, SizeI height);
        delegate void ArrayElement(Int32 i);
        delegate void ColorPointer(Int32 size, ColorPointerType type, SizeI stride, Void* pointer);
        delegate void DisableClientState(EnableCap array);
        delegate void DrawArrays(BeginMode mode, Int32 first, SizeI count);
        delegate void DrawElements(BeginMode mode, SizeI count, DrawElementsType type, Void* indices);
        delegate void EdgeFlagPointer(SizeI stride, Void* pointer);
        delegate void EnableClientState(EnableCap array);
        delegate void GetPointerv(GetPointervPName pname, VoidPointer* @params);
        delegate void IndexPointer(IndexPointerType type, SizeI stride, Void* pointer);
        delegate void InterleavedArrays(InterleavedArrayFormat format, SizeI stride, Void* pointer);
        delegate void NormalPointer(NormalPointerType type, SizeI stride, Void* pointer);
        delegate void TexCoordPointer(Int32 size, TexCoordPointerType type, SizeI stride, Void* pointer);
        delegate void VertexPointer(Int32 size, VertexPointerType type, SizeI stride, Void* pointer);
        delegate void PolygonOffset(Float32 factor, Float32 units);
        delegate void CopyTexImage1D(TextureTarget target, CheckedInt32 level, PixelInternalFormat internalformat, WinCoord x, WinCoord y, SizeI width, CheckedInt32 border);
        delegate void CopyTexImage2D(TextureTarget target, CheckedInt32 level, PixelInternalFormat internalformat, WinCoord x, WinCoord y, SizeI width, SizeI height, CheckedInt32 border);
        delegate void CopyTexSubImage1D(TextureTarget target, CheckedInt32 level, CheckedInt32 xoffset, WinCoord x, WinCoord y, SizeI width);
        delegate void CopyTexSubImage2D(TextureTarget target, CheckedInt32 level, CheckedInt32 xoffset, CheckedInt32 yoffset, WinCoord x, WinCoord y, SizeI width, SizeI height);
        delegate void TexSubImage1D(TextureTarget target, CheckedInt32 level, CheckedInt32 xoffset, SizeI width, PixelFormat format, PixelType type, Void* pixels);
        delegate void TexSubImage2D(TextureTarget target, CheckedInt32 level, CheckedInt32 xoffset, CheckedInt32 yoffset, SizeI width, SizeI height, PixelFormat format, PixelType type, Void* pixels);
        delegate Boolean AreTexturesResident(SizeI n, Texture* textures, Boolean* residences);
        delegate void BindTexture(TextureTarget target, Texture texture);
        delegate void DeleteTextures(SizeI n, Texture* textures);
        delegate void GenTextures(SizeI n, Texture* textures);
        delegate Boolean IsTexture(Texture texture);
        delegate void PrioritizeTextures(SizeI n, Texture* textures, ClampedFloat32* priorities);
        delegate void Indexub(ColorIndexValueUB c);
        delegate void Indexubv(ColorIndexValueUB* c);
        delegate void PopClientAttrib();
        delegate void PushClientAttrib(ClientAttribMask mask);
        delegate void BlendColor(ClampedColorF red, ClampedColorF green, ClampedColorF blue, ClampedColorF alpha);
        delegate void BlendEquation(BlendEquationMode mode);
        delegate void DrawRangeElements(BeginMode mode, UInt32 start, UInt32 end, SizeI count, DrawElementsType type, Void* indices);
        delegate void ColorTable(ColorTableTarget target, PixelInternalFormat internalformat, SizeI width, PixelFormat format, PixelType type, Void* table);
        delegate void ColorTableParameterfv(ColorTableTarget target, ColorTableParameterPName pname, CheckedFloat32* @params);
        delegate void ColorTableParameteriv(ColorTableTarget target, ColorTableParameterPName pname, CheckedInt32* @params);
        delegate void CopyColorTable(ColorTableTarget target, PixelInternalFormat internalformat, WinCoord x, WinCoord y, SizeI width);
        delegate void GetColorTable(ColorTableTarget target, PixelFormat format, PixelType type, Void* table);
        delegate void GetColorTableParameterfv(ColorTableTarget target, GetColorTableParameterPName pname, Float32* @params);
        delegate void GetColorTableParameteriv(ColorTableTarget target, GetColorTableParameterPName pname, Int32* @params);
        delegate void ColorSubTable(ColorTableTarget target, SizeI start, SizeI count, PixelFormat format, PixelType type, Void* data);
        delegate void CopyColorSubTable(ColorTableTarget target, SizeI start, WinCoord x, WinCoord y, SizeI width);
        delegate void ConvolutionFilter1D(ConvolutionTarget target, PixelInternalFormat internalformat, SizeI width, PixelFormat format, PixelType type, Void* image);
        delegate void ConvolutionFilter2D(ConvolutionTarget target, PixelInternalFormat internalformat, SizeI width, SizeI height, PixelFormat format, PixelType type, Void* image);
        delegate void ConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname, CheckedFloat32 @params);
        delegate void ConvolutionParameterfv(ConvolutionTarget target, ConvolutionParameter pname, CheckedFloat32* @params);
        delegate void ConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname, CheckedInt32 @params);
        delegate void ConvolutionParameteriv(ConvolutionTarget target, ConvolutionParameter pname, CheckedInt32* @params);
        delegate void CopyConvolutionFilter1D(ConvolutionTarget target, PixelInternalFormat internalformat, WinCoord x, WinCoord y, SizeI width);
        delegate void CopyConvolutionFilter2D(ConvolutionTarget target, PixelInternalFormat internalformat, WinCoord x, WinCoord y, SizeI width, SizeI height);
        delegate void GetConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, Void* image);
        delegate void GetConvolutionParameterfv(ConvolutionTarget target, GetConvolutionParameterPName pname, Float32* @params);
        delegate void GetConvolutionParameteriv(ConvolutionTarget target, GetConvolutionParameterPName pname, Int32* @params);
        delegate void GetSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, Void* row, Void* column, Void* span);
        delegate void SeparableFilter2D(SeparableTarget target, PixelInternalFormat internalformat, SizeI width, SizeI height, PixelFormat format, PixelType type, Void* row, Void* column);
        delegate void GetHistogram(HistogramTarget target, Boolean reset, PixelFormat format, PixelType type, Void* values);
        delegate void GetHistogramParameterfv(HistogramTarget target, GetHistogramParameterPName pname, Float32* @params);
        delegate void GetHistogramParameteriv(HistogramTarget target, GetHistogramParameterPName pname, Int32* @params);
        delegate void GetMinmax(MinmaxTarget target, Boolean reset, PixelFormat format, PixelType type, Void* values);
        delegate void GetMinmaxParameterfv(MinmaxTarget target, GetMinmaxParameterPName pname, Float32* @params);
        delegate void GetMinmaxParameteriv(MinmaxTarget target, GetMinmaxParameterPName pname, Int32* @params);
        delegate void Histogram(HistogramTarget target, SizeI width, PixelInternalFormat internalformat, Boolean sink);
        delegate void Minmax(MinmaxTarget target, PixelInternalFormat internalformat, Boolean sink);
        delegate void ResetHistogram(HistogramTarget target);
        delegate void ResetMinmax(MinmaxTarget target);
        delegate void TexImage3D(TextureTarget target, CheckedInt32 level, TextureComponentCount internalformat, SizeI width, SizeI height, SizeI depth, CheckedInt32 border, PixelFormat format, PixelType type, Void* pixels);
        delegate void TexSubImage3D(TextureTarget target, CheckedInt32 level, CheckedInt32 xoffset, CheckedInt32 yoffset, CheckedInt32 zoffset, SizeI width, SizeI height, SizeI depth, PixelFormat format, PixelType type, Void* pixels);
        delegate void CopyTexSubImage3D(TextureTarget target, CheckedInt32 level, CheckedInt32 xoffset, CheckedInt32 yoffset, CheckedInt32 zoffset, WinCoord x, WinCoord y, SizeI width, SizeI height);
        delegate void ActiveTexture(TextureUnit texture);
        delegate void ClientActiveTexture(TextureUnit texture);
        delegate void MultiTexCoord1d(TextureUnit target, CoordD s);
        delegate void MultiTexCoord1dv(TextureUnit target, CoordD* v);
        delegate void MultiTexCoord1f(TextureUnit target, CoordF s);
        delegate void MultiTexCoord1fv(TextureUnit target, CoordF* v);
        delegate void MultiTexCoord1i(TextureUnit target, CoordI s);
        delegate void MultiTexCoord1iv(TextureUnit target, CoordI* v);
        delegate void MultiTexCoord1s(TextureUnit target, CoordS s);
        delegate void MultiTexCoord1sv(TextureUnit target, CoordS* v);
        delegate void MultiTexCoord2d(TextureUnit target, CoordD s, CoordD t);
        delegate void MultiTexCoord2dv(TextureUnit target, CoordD* v);
        delegate void MultiTexCoord2f(TextureUnit target, CoordF s, CoordF t);
        delegate void MultiTexCoord2fv(TextureUnit target, CoordF* v);
        delegate void MultiTexCoord2i(TextureUnit target, CoordI s, CoordI t);
        delegate void MultiTexCoord2iv(TextureUnit target, CoordI* v);
        delegate void MultiTexCoord2s(TextureUnit target, CoordS s, CoordS t);
        delegate void MultiTexCoord2sv(TextureUnit target, CoordS* v);
        delegate void MultiTexCoord3d(TextureUnit target, CoordD s, CoordD t, CoordD r);
        delegate void MultiTexCoord3dv(TextureUnit target, CoordD* v);
        delegate void MultiTexCoord3f(TextureUnit target, CoordF s, CoordF t, CoordF r);
        delegate void MultiTexCoord3fv(TextureUnit target, CoordF* v);
        delegate void MultiTexCoord3i(TextureUnit target, CoordI s, CoordI t, CoordI r);
        delegate void MultiTexCoord3iv(TextureUnit target, CoordI* v);
        delegate void MultiTexCoord3s(TextureUnit target, CoordS s, CoordS t, CoordS r);
        delegate void MultiTexCoord3sv(TextureUnit target, CoordS* v);
        delegate void MultiTexCoord4d(TextureUnit target, CoordD s, CoordD t, CoordD r, CoordD q);
        delegate void MultiTexCoord4dv(TextureUnit target, CoordD* v);
        delegate void MultiTexCoord4f(TextureUnit target, CoordF s, CoordF t, CoordF r, CoordF q);
        delegate void MultiTexCoord4fv(TextureUnit target, CoordF* v);
        delegate void MultiTexCoord4i(TextureUnit target, CoordI s, CoordI t, CoordI r, CoordI q);
        delegate void MultiTexCoord4iv(TextureUnit target, CoordI* v);
        delegate void MultiTexCoord4s(TextureUnit target, CoordS s, CoordS t, CoordS r, CoordS q);
        delegate void MultiTexCoord4sv(TextureUnit target, CoordS* v);
        delegate void LoadTransposeMatrixf(Float32* m);
        delegate void LoadTransposeMatrixd(Float64* m);
        delegate void MultTransposeMatrixf(Float32* m);
        delegate void MultTransposeMatrixd(Float64* m);
        delegate void SampleCoverage(ClampedFloat32 value, Boolean invert);
        delegate void CompressedTexImage3D(TextureTarget target, CheckedInt32 level, PixelInternalFormat internalformat, SizeI width, SizeI height, SizeI depth, CheckedInt32 border, SizeI imageSize, CompressedTextureARB* data);
        delegate void CompressedTexImage2D(TextureTarget target, CheckedInt32 level, PixelInternalFormat internalformat, SizeI width, SizeI height, CheckedInt32 border, SizeI imageSize, CompressedTextureARB* data);
        delegate void CompressedTexImage1D(TextureTarget target, CheckedInt32 level, PixelInternalFormat internalformat, SizeI width, CheckedInt32 border, SizeI imageSize, CompressedTextureARB* data);
        delegate void CompressedTexSubImage3D(TextureTarget target, CheckedInt32 level, CheckedInt32 xoffset, CheckedInt32 yoffset, CheckedInt32 zoffset, SizeI width, SizeI height, SizeI depth, PixelFormat format, SizeI imageSize, CompressedTextureARB* data);
        delegate void CompressedTexSubImage2D(TextureTarget target, CheckedInt32 level, CheckedInt32 xoffset, CheckedInt32 yoffset, SizeI width, SizeI height, PixelFormat format, SizeI imageSize, CompressedTextureARB* data);
        delegate void CompressedTexSubImage1D(TextureTarget target, CheckedInt32 level, CheckedInt32 xoffset, SizeI width, PixelFormat format, SizeI imageSize, CompressedTextureARB* data);
        delegate void GetCompressedTexImage(TextureTarget target, CheckedInt32 level, CompressedTextureARB* img);
        delegate void BlendFuncSeparate(BlendFuncSeparateParameterEXT sfactorRGB, BlendFuncSeparateParameterEXT dfactorRGB, BlendFuncSeparateParameterEXT sfactorAlpha, BlendFuncSeparateParameterEXT dfactorAlpha);
        delegate void FogCoordf(CoordF coord);
        delegate void FogCoordfv(CoordF* coord);
        delegate void FogCoordd(CoordD coord);
        delegate void FogCoorddv(CoordD* coord);
        delegate void FogCoordPointer(FogPointerTypeEXT type, SizeI stride, Void* pointer);
        delegate void MultiDrawArrays(BeginMode mode, Int32* first, SizeI* count, SizeI primcount);
        delegate void MultiDrawElements(BeginMode mode, SizeI* count, DrawElementsType type, VoidPointer* indices, SizeI primcount);
        delegate void PointParameterf(PointParameterNameARB pname, CheckedFloat32 param);
        delegate void PointParameterfv(PointParameterNameARB pname, CheckedFloat32* @params);
        delegate void PointParameteri(PointParameterNameARB pname, Int32 param);
        delegate void PointParameteriv(PointParameterNameARB pname, Int32* @params);
        delegate void SecondaryColor3b(ColorB red, ColorB green, ColorB blue);
        delegate void SecondaryColor3bv(ColorB* v);
        delegate void SecondaryColor3d(ColorD red, ColorD green, ColorD blue);
        delegate void SecondaryColor3dv(ColorD* v);
        delegate void SecondaryColor3f(ColorF red, ColorF green, ColorF blue);
        delegate void SecondaryColor3fv(ColorF* v);
        delegate void SecondaryColor3i(ColorI red, ColorI green, ColorI blue);
        delegate void SecondaryColor3iv(ColorI* v);
        delegate void SecondaryColor3s(ColorS red, ColorS green, ColorS blue);
        delegate void SecondaryColor3sv(ColorS* v);
        delegate void SecondaryColor3ub(ColorUB red, ColorUB green, ColorUB blue);
        delegate void SecondaryColor3ubv(ColorUB* v);
        delegate void SecondaryColor3ui(ColorUI red, ColorUI green, ColorUI blue);
        delegate void SecondaryColor3uiv(ColorUI* v);
        delegate void SecondaryColor3us(ColorUS red, ColorUS green, ColorUS blue);
        delegate void SecondaryColor3usv(ColorUS* v);
        delegate void SecondaryColorPointer(Int32 size, ColorPointerType type, SizeI stride, Void* pointer);
        delegate void WindowPos2d(CoordD x, CoordD y);
        delegate void WindowPos2dv(CoordD* v);
        delegate void WindowPos2f(CoordF x, CoordF y);
        delegate void WindowPos2fv(CoordF* v);
        delegate void WindowPos2i(CoordI x, CoordI y);
        delegate void WindowPos2iv(CoordI* v);
        delegate void WindowPos2s(CoordS x, CoordS y);
        delegate void WindowPos2sv(CoordS* v);
        delegate void WindowPos3d(CoordD x, CoordD y, CoordD z);
        delegate void WindowPos3dv(CoordD* v);
        delegate void WindowPos3f(CoordF x, CoordF y, CoordF z);
        delegate void WindowPos3fv(CoordF* v);
        delegate void WindowPos3i(CoordI x, CoordI y, CoordI z);
        delegate void WindowPos3iv(CoordI* v);
        delegate void WindowPos3s(CoordS x, CoordS y, CoordS z);
        delegate void WindowPos3sv(CoordS* v);
        delegate void GenQueries(SizeI n, UInt32* ids);
        delegate void DeleteQueries(SizeI n, UInt32* ids);
        delegate Boolean IsQuery(UInt32 id);
        delegate void BeginQuery(GLenum target, UInt32 id);
        delegate void EndQuery(GLenum target);
        delegate void GetQueryiv(GLenum target, GLenum pname, Int32* @params);
        delegate void GetQueryObjectiv(UInt32 id, GLenum pname, Int32* @params);
        delegate void GetQueryObjectuiv(UInt32 id, GLenum pname, UInt32* @params);
        delegate void BindBuffer(BufferTargetARB target, UInt32 buffer);
        delegate void DeleteBuffers(SizeI n, ConstUInt32* buffers);
        delegate void GenBuffers(SizeI n, UInt32* buffers);
        delegate Boolean IsBuffer(UInt32 buffer);
        delegate void BufferData(BufferTargetARB target, BufferSize size, ConstVoid* data, BufferUsageARB usage);
        delegate void BufferSubData(BufferTargetARB target, BufferOffset offset, BufferSize size, ConstVoid* data);
        delegate void GetBufferSubData(BufferTargetARB target, BufferOffset offset, BufferSize size, Void* data);
        delegate VoidPointer MapBuffer(BufferTargetARB target, BufferAccessARB access);
        delegate Boolean UnmapBuffer(BufferTargetARB target);
        delegate void GetBufferParameteriv(BufferTargetARB target, BufferPNameARB pname, Int32* @params);
        delegate void GetBufferPointerv(BufferTargetARB target, BufferPointerNameARB pname, VoidPointer* @params);
        delegate void BlendEquationSeparate(BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha);
        delegate void DrawBuffers(SizeI n, DrawBufferModeATI* bufs);
        delegate void StencilOpSeparate(StencilFaceDirection face, StencilOp sfail, StencilOp dpfail, StencilOp dppass);
        delegate void StencilFuncSeparate(StencilFunction frontfunc, StencilFunction backfunc, ClampedStencilValue @ref, MaskedStencilValue mask);
        delegate void StencilMaskSeparate(StencilFaceDirection face, MaskedStencilValue mask);
        delegate void AttachShader(UInt32 program, UInt32 shader);
        delegate void BindAttribLocation(UInt32 program, UInt32 index, Char* name);
        delegate void CompileShader(UInt32 shader);
        delegate UInt32 CreateProgram();
        delegate UInt32 CreateShader(GLenum type);
        delegate void DeleteProgram(UInt32 program);
        delegate void DeleteShader(UInt32 shader);
        delegate void DetachShader(UInt32 program, UInt32 shader);
        delegate void DisableVertexAttribArray(UInt32 index);
        delegate void EnableVertexAttribArray(UInt32 index);
        delegate void GetActiveAttrib(UInt32 program, UInt32 index, SizeI bufSize, SizeI* length, Int32* size, GLenum* type, Char* name);
        delegate void GetActiveUniform(UInt32 program, UInt32 index, SizeI bufSize, SizeI* length, Int32* size, GLenum* type, Char* name);
        delegate void GetAttachedShaders(UInt32 program, SizeI maxCount, SizeI* count, UInt32* obj);
        delegate Int32 GetAttribLocation(UInt32 program, Char* name);
        delegate void GetProgramiv(UInt32 program, GLenum pname, Int32* @params);
        delegate void GetProgramInfoLog(UInt32 program, SizeI bufSize, SizeI* length, Char* infoLog);
        delegate void GetShaderiv(UInt32 shader, GLenum pname, Int32* @params);
        delegate void GetShaderInfoLog(UInt32 shader, SizeI bufSize, SizeI* length, Char* infoLog);
        delegate void GetShaderSource(UInt32 shader, SizeI bufSize, SizeI* length, Char* source);
        delegate Int32 GetUniformLocation(UInt32 program, Char* name);
        delegate void GetUniformfv(UInt32 program, Int32 location, Float32* @params);
        delegate void GetUniformiv(UInt32 program, Int32 location, Int32* @params);
        delegate void GetVertexAttribdv(UInt32 index, VertexAttribPropertyARB pname, Float64* @params);
        delegate void GetVertexAttribfv(UInt32 index, VertexAttribPropertyARB pname, Float32* @params);
        delegate void GetVertexAttribiv(UInt32 index, VertexAttribPropertyARB pname, Int32* @params);
        delegate void GetVertexAttribPointerv(UInt32 index, VertexAttribPointerPropertyARB pname, VoidPointer* pointer);
        delegate Boolean IsProgram(UInt32 program);
        delegate Boolean IsShader(UInt32 shader);
        delegate void LinkProgram(UInt32 program);
        delegate void ShaderSource(UInt32 shader, SizeI count, CharPointer* @string, Int32* length);
        delegate void UseProgram(UInt32 program);
        delegate void Uniform1f(Int32 location, Float32 v0);
        delegate void Uniform2f(Int32 location, Float32 v0, Float32 v1);
        delegate void Uniform3f(Int32 location, Float32 v0, Float32 v1, Float32 v2);
        delegate void Uniform4f(Int32 location, Float32 v0, Float32 v1, Float32 v2, Float32 v3);
        delegate void Uniform1i(Int32 location, Int32 v0);
        delegate void Uniform2i(Int32 location, Int32 v0, Int32 v1);
        delegate void Uniform3i(Int32 location, Int32 v0, Int32 v1, Int32 v2);
        delegate void Uniform4i(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3);
        delegate void Uniform1fv(Int32 location, SizeI count, Float32* value);
        delegate void Uniform2fv(Int32 location, SizeI count, Float32* value);
        delegate void Uniform3fv(Int32 location, SizeI count, Float32* value);
        delegate void Uniform4fv(Int32 location, SizeI count, Float32* value);
        delegate void Uniform1iv(Int32 location, SizeI count, Int32* value);
        delegate void Uniform2iv(Int32 location, SizeI count, Int32* value);
        delegate void Uniform3iv(Int32 location, SizeI count, Int32* value);
        delegate void Uniform4iv(Int32 location, SizeI count, Int32* value);
        delegate void UniformMatrix2fv(Int32 location, SizeI count, Boolean transpose, Float32* value);
        delegate void UniformMatrix3fv(Int32 location, SizeI count, Boolean transpose, Float32* value);
        delegate void UniformMatrix4fv(Int32 location, SizeI count, Boolean transpose, Float32* value);
        delegate void ValidateProgram(UInt32 program);
        delegate void VertexAttrib1d(UInt32 index, Float64 x);
        delegate void VertexAttrib1dv(UInt32 index, Float64* v);
        delegate void VertexAttrib1f(UInt32 index, Float32 x);
        delegate void VertexAttrib1fv(UInt32 index, Float32* v);
        delegate void VertexAttrib1s(UInt32 index, Int16 x);
        delegate void VertexAttrib1sv(UInt32 index, Int16* v);
        delegate void VertexAttrib2d(UInt32 index, Float64 x, Float64 y);
        delegate void VertexAttrib2dv(UInt32 index, Float64* v);
        delegate void VertexAttrib2f(UInt32 index, Float32 x, Float32 y);
        delegate void VertexAttrib2fv(UInt32 index, Float32* v);
        delegate void VertexAttrib2s(UInt32 index, Int16 x, Int16 y);
        delegate void VertexAttrib2sv(UInt32 index, Int16* v);
        delegate void VertexAttrib3d(UInt32 index, Float64 x, Float64 y, Float64 z);
        delegate void VertexAttrib3dv(UInt32 index, Float64* v);
        delegate void VertexAttrib3f(UInt32 index, Float32 x, Float32 y, Float32 z);
        delegate void VertexAttrib3fv(UInt32 index, Float32* v);
        delegate void VertexAttrib3s(UInt32 index, Int16 x, Int16 y, Int16 z);
        delegate void VertexAttrib3sv(UInt32 index, Int16* v);
        delegate void VertexAttrib4Nbv(UInt32 index, Int8* v);
        delegate void VertexAttrib4Niv(UInt32 index, Int32* v);
        delegate void VertexAttrib4Nsv(UInt32 index, Int16* v);
        delegate void VertexAttrib4Nub(UInt32 index, UInt8 x, UInt8 y, UInt8 z, UInt8 w);
        delegate void VertexAttrib4Nubv(UInt32 index, UInt8* v);
        delegate void VertexAttrib4Nuiv(UInt32 index, UInt32* v);
        delegate void VertexAttrib4Nusv(UInt32 index, UInt16* v);
        delegate void VertexAttrib4bv(UInt32 index, Int8* v);
        delegate void VertexAttrib4d(UInt32 index, Float64 x, Float64 y, Float64 z, Float64 w);
        delegate void VertexAttrib4dv(UInt32 index, Float64* v);
        delegate void VertexAttrib4f(UInt32 index, Float32 x, Float32 y, Float32 z, Float32 w);
        delegate void VertexAttrib4fv(UInt32 index, Float32* v);
        delegate void VertexAttrib4iv(UInt32 index, Int32* v);
        delegate void VertexAttrib4s(UInt32 index, Int16 x, Int16 y, Int16 z, Int16 w);
        delegate void VertexAttrib4sv(UInt32 index, Int16* v);
        delegate void VertexAttrib4ubv(UInt32 index, UInt8* v);
        delegate void VertexAttrib4uiv(UInt32 index, UInt32* v);
        delegate void VertexAttrib4usv(UInt32 index, UInt16* v);
        delegate void VertexAttribPointer(UInt32 index, Int32 size, VertexAttribPointerTypeARB type, Boolean normalized, SizeI stride, Void* pointer);
        delegate void UniformMatrix2x3fv(Int32 location, SizeI count, Boolean transpose, Float32* value);
        delegate void UniformMatrix3x2fv(Int32 location, SizeI count, Boolean transpose, Float32* value);
        delegate void UniformMatrix2x4fv(Int32 location, SizeI count, Boolean transpose, Float32* value);
        delegate void UniformMatrix4x2fv(Int32 location, SizeI count, Boolean transpose, Float32* value);
        delegate void UniformMatrix3x4fv(Int32 location, SizeI count, Boolean transpose, Float32* value);
        delegate void UniformMatrix4x3fv(Int32 location, SizeI count, Boolean transpose, Float32* value);
        delegate void ActiveTextureARB(TextureUnit texture);
        delegate void ClientActiveTextureARB(TextureUnit texture);
        delegate void MultiTexCoord1dARB(TextureUnit target, CoordD s);
        delegate void MultiTexCoord1dvARB(TextureUnit target, CoordD* v);
        delegate void MultiTexCoord1fARB(TextureUnit target, CoordF s);
        delegate void MultiTexCoord1fvARB(TextureUnit target, CoordF* v);
        delegate void MultiTexCoord1iARB(TextureUnit target, CoordI s);
        delegate void MultiTexCoord1ivARB(TextureUnit target, CoordI* v);
        delegate void MultiTexCoord1sARB(TextureUnit target, CoordS s);
        delegate void MultiTexCoord1svARB(TextureUnit target, CoordS* v);
        delegate void MultiTexCoord2dARB(TextureUnit target, CoordD s, CoordD t);
        delegate void MultiTexCoord2dvARB(TextureUnit target, CoordD* v);
        delegate void MultiTexCoord2fARB(TextureUnit target, CoordF s, CoordF t);
        delegate void MultiTexCoord2fvARB(TextureUnit target, CoordF* v);
        delegate void MultiTexCoord2iARB(TextureUnit target, CoordI s, CoordI t);
        delegate void MultiTexCoord2ivARB(TextureUnit target, CoordI* v);
        delegate void MultiTexCoord2sARB(TextureUnit target, CoordS s, CoordS t);
        delegate void MultiTexCoord2svARB(TextureUnit target, CoordS* v);
        delegate void MultiTexCoord3dARB(TextureUnit target, CoordD s, CoordD t, CoordD r);
        delegate void MultiTexCoord3dvARB(TextureUnit target, CoordD* v);
        delegate void MultiTexCoord3fARB(TextureUnit target, CoordF s, CoordF t, CoordF r);
        delegate void MultiTexCoord3fvARB(TextureUnit target, CoordF* v);
        delegate void MultiTexCoord3iARB(TextureUnit target, CoordI s, CoordI t, CoordI r);
        delegate void MultiTexCoord3ivARB(TextureUnit target, CoordI* v);
        delegate void MultiTexCoord3sARB(TextureUnit target, CoordS s, CoordS t, CoordS r);
        delegate void MultiTexCoord3svARB(TextureUnit target, CoordS* v);
        delegate void MultiTexCoord4dARB(TextureUnit target, CoordD s, CoordD t, CoordD r, CoordD q);
        delegate void MultiTexCoord4dvARB(TextureUnit target, CoordD* v);
        delegate void MultiTexCoord4fARB(TextureUnit target, CoordF s, CoordF t, CoordF r, CoordF q);
        delegate void MultiTexCoord4fvARB(TextureUnit target, CoordF* v);
        delegate void MultiTexCoord4iARB(TextureUnit target, CoordI s, CoordI t, CoordI r, CoordI q);
        delegate void MultiTexCoord4ivARB(TextureUnit target, CoordI* v);
        delegate void MultiTexCoord4sARB(TextureUnit target, CoordS s, CoordS t, CoordS r, CoordS q);
        delegate void MultiTexCoord4svARB(TextureUnit target, CoordS* v);
        delegate void LoadTransposeMatrixfARB(Float32* m);
        delegate void LoadTransposeMatrixdARB(Float64* m);
        delegate void MultTransposeMatrixfARB(Float32* m);
        delegate void MultTransposeMatrixdARB(Float64* m);
        delegate void SampleCoverageARB(ClampedFloat32 value, Boolean invert);
        delegate void CompressedTexImage3DARB(TextureTarget target, CheckedInt32 level, PixelInternalFormat internalformat, SizeI width, SizeI height, SizeI depth, CheckedInt32 border, SizeI imageSize, CompressedTextureARB* data);
        delegate void CompressedTexImage2DARB(TextureTarget target, CheckedInt32 level, PixelInternalFormat internalformat, SizeI width, SizeI height, CheckedInt32 border, SizeI imageSize, CompressedTextureARB* data);
        delegate void CompressedTexImage1DARB(TextureTarget target, CheckedInt32 level, PixelInternalFormat internalformat, SizeI width, CheckedInt32 border, SizeI imageSize, CompressedTextureARB* data);
        delegate void CompressedTexSubImage3DARB(TextureTarget target, CheckedInt32 level, CheckedInt32 xoffset, CheckedInt32 yoffset, CheckedInt32 zoffset, SizeI width, SizeI height, SizeI depth, PixelFormat format, SizeI imageSize, CompressedTextureARB* data);
        delegate void CompressedTexSubImage2DARB(TextureTarget target, CheckedInt32 level, CheckedInt32 xoffset, CheckedInt32 yoffset, SizeI width, SizeI height, PixelFormat format, SizeI imageSize, CompressedTextureARB* data);
        delegate void CompressedTexSubImage1DARB(TextureTarget target, CheckedInt32 level, CheckedInt32 xoffset, SizeI width, PixelFormat format, SizeI imageSize, CompressedTextureARB* data);
        delegate void GetCompressedTexImageARB(TextureTarget target, CheckedInt32 level, CompressedTextureARB* img);
        delegate void PointParameterfARB(PointParameterNameARB pname, CheckedFloat32 param);
        delegate void PointParameterfvARB(PointParameterNameARB pname, CheckedFloat32* @params);
        delegate void WeightbvARB(Int32 size, Int8* weights);
        delegate void WeightsvARB(Int32 size, Int16* weights);
        delegate void WeightivARB(Int32 size, Int32* weights);
        delegate void WeightfvARB(Int32 size, Float32* weights);
        delegate void WeightdvARB(Int32 size, Float64* weights);
        delegate void WeightubvARB(Int32 size, UInt8* weights);
        delegate void WeightusvARB(Int32 size, UInt16* weights);
        delegate void WeightuivARB(Int32 size, UInt32* weights);
        delegate void WeightPointerARB(Int32 size, WeightPointerTypeARB type, SizeI stride, Void* pointer);
        delegate void VertexBlendARB(Int32 count);
        delegate void CurrentPaletteMatrixARB(Int32 index);
        delegate void MatrixIndexubvARB(Int32 size, UInt8* indices);
        delegate void MatrixIndexusvARB(Int32 size, UInt16* indices);
        delegate void MatrixIndexuivARB(Int32 size, UInt32* indices);
        delegate void MatrixIndexPointerARB(Int32 size, MatrixIndexPointerTypeARB type, SizeI stride, Void* pointer);
        delegate void WindowPos2dARB(CoordD x, CoordD y);
        delegate void WindowPos2dvARB(CoordD* v);
        delegate void WindowPos2fARB(CoordF x, CoordF y);
        delegate void WindowPos2fvARB(CoordF* v);
        delegate void WindowPos2iARB(CoordI x, CoordI y);
        delegate void WindowPos2ivARB(CoordI* v);
        delegate void WindowPos2sARB(CoordS x, CoordS y);
        delegate void WindowPos2svARB(CoordS* v);
        delegate void WindowPos3dARB(CoordD x, CoordD y, CoordD z);
        delegate void WindowPos3dvARB(CoordD* v);
        delegate void WindowPos3fARB(CoordF x, CoordF y, CoordF z);
        delegate void WindowPos3fvARB(CoordF* v);
        delegate void WindowPos3iARB(CoordI x, CoordI y, CoordI z);
        delegate void WindowPos3ivARB(CoordI* v);
        delegate void WindowPos3sARB(CoordS x, CoordS y, CoordS z);
        delegate void WindowPos3svARB(CoordS* v);
        delegate void VertexAttrib1dARB(UInt32 index, Float64 x);
        delegate void VertexAttrib1dvARB(UInt32 index, Float64* v);
        delegate void VertexAttrib1fARB(UInt32 index, Float32 x);
        delegate void VertexAttrib1fvARB(UInt32 index, Float32* v);
        delegate void VertexAttrib1sARB(UInt32 index, Int16 x);
        delegate void VertexAttrib1svARB(UInt32 index, Int16* v);
        delegate void VertexAttrib2dARB(UInt32 index, Float64 x, Float64 y);
        delegate void VertexAttrib2dvARB(UInt32 index, Float64* v);
        delegate void VertexAttrib2fARB(UInt32 index, Float32 x, Float32 y);
        delegate void VertexAttrib2fvARB(UInt32 index, Float32* v);
        delegate void VertexAttrib2sARB(UInt32 index, Int16 x, Int16 y);
        delegate void VertexAttrib2svARB(UInt32 index, Int16* v);
        delegate void VertexAttrib3dARB(UInt32 index, Float64 x, Float64 y, Float64 z);
        delegate void VertexAttrib3dvARB(UInt32 index, Float64* v);
        delegate void VertexAttrib3fARB(UInt32 index, Float32 x, Float32 y, Float32 z);
        delegate void VertexAttrib3fvARB(UInt32 index, Float32* v);
        delegate void VertexAttrib3sARB(UInt32 index, Int16 x, Int16 y, Int16 z);
        delegate void VertexAttrib3svARB(UInt32 index, Int16* v);
        delegate void VertexAttrib4NbvARB(UInt32 index, Int8* v);
        delegate void VertexAttrib4NivARB(UInt32 index, Int32* v);
        delegate void VertexAttrib4NsvARB(UInt32 index, Int16* v);
        delegate void VertexAttrib4NubARB(UInt32 index, UInt8 x, UInt8 y, UInt8 z, UInt8 w);
        delegate void VertexAttrib4NubvARB(UInt32 index, UInt8* v);
        delegate void VertexAttrib4NuivARB(UInt32 index, UInt32* v);
        delegate void VertexAttrib4NusvARB(UInt32 index, UInt16* v);
        delegate void VertexAttrib4bvARB(UInt32 index, Int8* v);
        delegate void VertexAttrib4dARB(UInt32 index, Float64 x, Float64 y, Float64 z, Float64 w);
        delegate void VertexAttrib4dvARB(UInt32 index, Float64* v);
        delegate void VertexAttrib4fARB(UInt32 index, Float32 x, Float32 y, Float32 z, Float32 w);
        delegate void VertexAttrib4fvARB(UInt32 index, Float32* v);
        delegate void VertexAttrib4ivARB(UInt32 index, Int32* v);
        delegate void VertexAttrib4sARB(UInt32 index, Int16 x, Int16 y, Int16 z, Int16 w);
        delegate void VertexAttrib4svARB(UInt32 index, Int16* v);
        delegate void VertexAttrib4ubvARB(UInt32 index, UInt8* v);
        delegate void VertexAttrib4uivARB(UInt32 index, UInt32* v);
        delegate void VertexAttrib4usvARB(UInt32 index, UInt16* v);
        delegate void VertexAttribPointerARB(UInt32 index, Int32 size, VertexAttribPointerTypeARB type, Boolean normalized, SizeI stride, Void* pointer);
        delegate void EnableVertexAttribArrayARB(UInt32 index);
        delegate void DisableVertexAttribArrayARB(UInt32 index);
        delegate void ProgramStringARB(ProgramTargetARB target, ProgramFormatARB format, SizeI len, Void* @string);
        delegate void BindProgramARB(ProgramTargetARB target, UInt32 program);
        delegate void DeleteProgramsARB(SizeI n, UInt32* programs);
        delegate void GenProgramsARB(SizeI n, UInt32* programs);
        delegate void ProgramEnvParameter4dARB(ProgramTargetARB target, UInt32 index, Float64 x, Float64 y, Float64 z, Float64 w);
        delegate void ProgramEnvParameter4dvARB(ProgramTargetARB target, UInt32 index, Float64* @params);
        delegate void ProgramEnvParameter4fARB(ProgramTargetARB target, UInt32 index, Float32 x, Float32 y, Float32 z, Float32 w);
        delegate void ProgramEnvParameter4fvARB(ProgramTargetARB target, UInt32 index, Float32* @params);
        delegate void ProgramLocalParameter4dARB(ProgramTargetARB target, UInt32 index, Float64 x, Float64 y, Float64 z, Float64 w);
        delegate void ProgramLocalParameter4dvARB(ProgramTargetARB target, UInt32 index, Float64* @params);
        delegate void ProgramLocalParameter4fARB(ProgramTargetARB target, UInt32 index, Float32 x, Float32 y, Float32 z, Float32 w);
        delegate void ProgramLocalParameter4fvARB(ProgramTargetARB target, UInt32 index, Float32* @params);
        delegate void GetProgramEnvParameterdvARB(ProgramTargetARB target, UInt32 index, Float64* @params);
        delegate void GetProgramEnvParameterfvARB(ProgramTargetARB target, UInt32 index, Float32* @params);
        delegate void GetProgramLocalParameterdvARB(ProgramTargetARB target, UInt32 index, Float64* @params);
        delegate void GetProgramLocalParameterfvARB(ProgramTargetARB target, UInt32 index, Float32* @params);
        delegate void GetProgramivARB(ProgramTargetARB target, ProgramPropertyARB pname, Int32* @params);
        delegate void GetProgramStringARB(ProgramTargetARB target, ProgramStringPropertyARB pname, Void* @string);
        delegate void GetVertexAttribdvARB(UInt32 index, VertexAttribPropertyARB pname, Float64* @params);
        delegate void GetVertexAttribfvARB(UInt32 index, VertexAttribPropertyARB pname, Float32* @params);
        delegate void GetVertexAttribivARB(UInt32 index, VertexAttribPropertyARB pname, Int32* @params);
        delegate void GetVertexAttribPointervARB(UInt32 index, VertexAttribPointerPropertyARB pname, VoidPointer* pointer);
        delegate Boolean IsProgramARB(UInt32 program);
        delegate void BindBufferARB(BufferTargetARB target, UInt32 buffer);
        delegate void DeleteBuffersARB(SizeI n, ConstUInt32* buffers);
        delegate void GenBuffersARB(SizeI n, UInt32* buffers);
        delegate Boolean IsBufferARB(UInt32 buffer);
        delegate void BufferDataARB(BufferTargetARB target, BufferSizeARB size, ConstVoid* data, BufferUsageARB usage);
        delegate void BufferSubDataARB(BufferTargetARB target, BufferOffsetARB offset, BufferSizeARB size, ConstVoid* data);
        delegate void GetBufferSubDataARB(BufferTargetARB target, BufferOffsetARB offset, BufferSizeARB size, Void* data);
        delegate VoidPointer MapBufferARB(BufferTargetARB target, BufferAccessARB access);
        delegate Boolean UnmapBufferARB(BufferTargetARB target);
        delegate void GetBufferParameterivARB(BufferTargetARB target, BufferPNameARB pname, Int32* @params);
        delegate void GetBufferPointervARB(BufferTargetARB target, BufferPointerNameARB pname, VoidPointer* @params);
        delegate void GenQueriesARB(SizeI n, UInt32* ids);
        delegate void DeleteQueriesARB(SizeI n, UInt32* ids);
        delegate Boolean IsQueryARB(UInt32 id);
        delegate void BeginQueryARB(GLenum target, UInt32 id);
        delegate void EndQueryARB(GLenum target);
        delegate void GetQueryivARB(GLenum target, GLenum pname, Int32* @params);
        delegate void GetQueryObjectivARB(UInt32 id, GLenum pname, Int32* @params);
        delegate void GetQueryObjectuivARB(UInt32 id, GLenum pname, UInt32* @params);
        delegate void DeleteObjectARB(handleARB obj);
        delegate handleARB GetHandleARB(GLenum pname);
        delegate void DetachObjectARB(handleARB containerObj, handleARB attachedObj);
        delegate handleARB CreateShaderObjectARB(GLenum shaderType);
        delegate void ShaderSourceARB(handleARB shaderObj, SizeI count, charPointerARB* @string, Int32* length);
        delegate void CompileShaderARB(handleARB shaderObj);
        delegate handleARB CreateProgramObjectARB();
        delegate void AttachObjectARB(handleARB containerObj, handleARB obj);
        delegate void LinkProgramARB(handleARB programObj);
        delegate void UseProgramObjectARB(handleARB programObj);
        delegate void ValidateProgramARB(handleARB programObj);
        delegate void Uniform1fARB(Int32 location, Float32 v0);
        delegate void Uniform2fARB(Int32 location, Float32 v0, Float32 v1);
        delegate void Uniform3fARB(Int32 location, Float32 v0, Float32 v1, Float32 v2);
        delegate void Uniform4fARB(Int32 location, Float32 v0, Float32 v1, Float32 v2, Float32 v3);
        delegate void Uniform1iARB(Int32 location, Int32 v0);
        delegate void Uniform2iARB(Int32 location, Int32 v0, Int32 v1);
        delegate void Uniform3iARB(Int32 location, Int32 v0, Int32 v1, Int32 v2);
        delegate void Uniform4iARB(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3);
        delegate void Uniform1fvARB(Int32 location, SizeI count, Float32* value);
        delegate void Uniform2fvARB(Int32 location, SizeI count, Float32* value);
        delegate void Uniform3fvARB(Int32 location, SizeI count, Float32* value);
        delegate void Uniform4fvARB(Int32 location, SizeI count, Float32* value);
        delegate void Uniform1ivARB(Int32 location, SizeI count, Int32* value);
        delegate void Uniform2ivARB(Int32 location, SizeI count, Int32* value);
        delegate void Uniform3ivARB(Int32 location, SizeI count, Int32* value);
        delegate void Uniform4ivARB(Int32 location, SizeI count, Int32* value);
        delegate void UniformMatrix2fvARB(Int32 location, SizeI count, Boolean transpose, Float32* value);
        delegate void UniformMatrix3fvARB(Int32 location, SizeI count, Boolean transpose, Float32* value);
        delegate void UniformMatrix4fvARB(Int32 location, SizeI count, Boolean transpose, Float32* value);
        delegate void GetObjectParameterfvARB(handleARB obj, GLenum pname, Float32* @params);
        delegate void GetObjectParameterivARB(handleARB obj, GLenum pname, Int32* @params);
        delegate void GetInfoLogARB(handleARB obj, SizeI maxLength, SizeI* length, charARB* infoLog);
        delegate void GetAttachedObjectsARB(handleARB containerObj, SizeI maxCount, SizeI* count, handleARB* obj);
        delegate Int32 GetUniformLocationARB(handleARB programObj, charARB* name);
        delegate void GetActiveUniformARB(handleARB programObj, UInt32 index, SizeI maxLength, SizeI* length, Int32* size, GLenum* type, charARB* name);
        delegate void GetUniformfvARB(handleARB programObj, Int32 location, Float32* @params);
        delegate void GetUniformivARB(handleARB programObj, Int32 location, Int32* @params);
        delegate void GetShaderSourceARB(handleARB obj, SizeI maxLength, SizeI* length, charARB* source);
        delegate void BindAttribLocationARB(handleARB programObj, UInt32 index, charARB* name);
        delegate void GetActiveAttribARB(handleARB programObj, UInt32 index, SizeI maxLength, SizeI* length, Int32* size, GLenum* type, charARB* name);
        delegate Int32 GetAttribLocationARB(handleARB programObj, charARB* name);
        delegate void DrawBuffersARB(SizeI n, DrawBufferModeATI* bufs);
        delegate void ClampColorARB(ClampColorTargetARB target, ClampColorModeARB clamp);
        delegate void BlendColorEXT(ClampedColorF red, ClampedColorF green, ClampedColorF blue, ClampedColorF alpha);
        delegate void PolygonOffsetEXT(Float32 factor, Float32 bias);
        delegate void TexImage3DEXT(TextureTarget target, CheckedInt32 level, PixelInternalFormat internalformat, SizeI width, SizeI height, SizeI depth, CheckedInt32 border, PixelFormat format, PixelType type, Void* pixels);
        delegate void TexSubImage3DEXT(TextureTarget target, CheckedInt32 level, CheckedInt32 xoffset, CheckedInt32 yoffset, CheckedInt32 zoffset, SizeI width, SizeI height, SizeI depth, PixelFormat format, PixelType type, Void* pixels);
        delegate void GetTexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter, Float32* weights);
        delegate void TexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter, SizeI n, Float32* weights);
        delegate void TexSubImage1DEXT(TextureTarget target, CheckedInt32 level, CheckedInt32 xoffset, SizeI width, PixelFormat format, PixelType type, Void* pixels);
        delegate void TexSubImage2DEXT(TextureTarget target, CheckedInt32 level, CheckedInt32 xoffset, CheckedInt32 yoffset, SizeI width, SizeI height, PixelFormat format, PixelType type, Void* pixels);
        delegate void CopyTexImage1DEXT(TextureTarget target, CheckedInt32 level, PixelInternalFormat internalformat, WinCoord x, WinCoord y, SizeI width, CheckedInt32 border);
        delegate void CopyTexImage2DEXT(TextureTarget target, CheckedInt32 level, PixelInternalFormat internalformat, WinCoord x, WinCoord y, SizeI width, SizeI height, CheckedInt32 border);
        delegate void CopyTexSubImage1DEXT(TextureTarget target, CheckedInt32 level, CheckedInt32 xoffset, WinCoord x, WinCoord y, SizeI width);
        delegate void CopyTexSubImage2DEXT(TextureTarget target, CheckedInt32 level, CheckedInt32 xoffset, CheckedInt32 yoffset, WinCoord x, WinCoord y, SizeI width, SizeI height);
        delegate void CopyTexSubImage3DEXT(TextureTarget target, CheckedInt32 level, CheckedInt32 xoffset, CheckedInt32 yoffset, CheckedInt32 zoffset, WinCoord x, WinCoord y, SizeI width, SizeI height);
        delegate void GetHistogramEXT(HistogramTargetEXT target, Boolean reset, PixelFormat format, PixelType type, Void* values);
        delegate void GetHistogramParameterfvEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, Float32* @params);
        delegate void GetHistogramParameterivEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, Int32* @params);
        delegate void GetMinmaxEXT(MinmaxTargetEXT target, Boolean reset, PixelFormat format, PixelType type, Void* values);
        delegate void GetMinmaxParameterfvEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, Float32* @params);
        delegate void GetMinmaxParameterivEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, Int32* @params);
        delegate void HistogramEXT(HistogramTargetEXT target, SizeI width, PixelInternalFormat internalformat, Boolean sink);
        delegate void MinmaxEXT(MinmaxTargetEXT target, PixelInternalFormat internalformat, Boolean sink);
        delegate void ResetHistogramEXT(HistogramTargetEXT target);
        delegate void ResetMinmaxEXT(MinmaxTargetEXT target);
        delegate void ConvolutionFilter1DEXT(ConvolutionTargetEXT target, PixelInternalFormat internalformat, SizeI width, PixelFormat format, PixelType type, Void* image);
        delegate void ConvolutionFilter2DEXT(ConvolutionTargetEXT target, PixelInternalFormat internalformat, SizeI width, SizeI height, PixelFormat format, PixelType type, Void* image);
        delegate void ConvolutionParameterfEXT(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, CheckedFloat32 @params);
        delegate void ConvolutionParameterfvEXT(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, CheckedFloat32* @params);
        delegate void ConvolutionParameteriEXT(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, CheckedInt32 @params);
        delegate void ConvolutionParameterivEXT(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, CheckedInt32* @params);
        delegate void CopyConvolutionFilter1DEXT(ConvolutionTargetEXT target, PixelInternalFormat internalformat, WinCoord x, WinCoord y, SizeI width);
        delegate void CopyConvolutionFilter2DEXT(ConvolutionTargetEXT target, PixelInternalFormat internalformat, WinCoord x, WinCoord y, SizeI width, SizeI height);
        delegate void GetConvolutionFilterEXT(ConvolutionTargetEXT target, PixelFormat format, PixelType type, Void* image);
        delegate void GetConvolutionParameterfvEXT(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, Float32* @params);
        delegate void GetConvolutionParameterivEXT(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, Int32* @params);
        delegate void GetSeparableFilterEXT(SeparableTargetEXT target, PixelFormat format, PixelType type, Void* row, Void* column, Void* span);
        delegate void SeparableFilter2DEXT(SeparableTargetEXT target, PixelInternalFormat internalformat, SizeI width, SizeI height, PixelFormat format, PixelType type, Void* row, Void* column);
        delegate void ColorTableSGI(ColorTableTargetSGI target, PixelInternalFormat internalformat, SizeI width, PixelFormat format, PixelType type, Void* table);
        delegate void ColorTableParameterfvSGI(ColorTableTargetSGI target, ColorTableParameterPNameSGI pname, CheckedFloat32* @params);
        delegate void ColorTableParameterivSGI(ColorTableTargetSGI target, ColorTableParameterPNameSGI pname, CheckedInt32* @params);
        delegate void CopyColorTableSGI(ColorTableTargetSGI target, PixelInternalFormat internalformat, WinCoord x, WinCoord y, SizeI width);
        delegate void GetColorTableSGI(ColorTableTargetSGI target, PixelFormat format, PixelType type, Void* table);
        delegate void GetColorTableParameterfvSGI(ColorTableTargetSGI target, GetColorTableParameterPNameSGI pname, Float32* @params);
        delegate void GetColorTableParameterivSGI(ColorTableTargetSGI target, GetColorTableParameterPNameSGI pname, Int32* @params);
        delegate void PixelTexGenSGIX(PixelTexGenModeSGIX mode);
        delegate void PixelTexGenParameteriSGIS(PixelTexGenParameterNameSGIS pname, CheckedInt32 param);
        delegate void PixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS pname, CheckedInt32* @params);
        delegate void PixelTexGenParameterfSGIS(PixelTexGenParameterNameSGIS pname, CheckedFloat32 param);
        delegate void PixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS pname, CheckedFloat32* @params);
        delegate void GetPixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS pname, CheckedInt32* @params);
        delegate void GetPixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS pname, CheckedFloat32* @params);
        delegate void TexImage4DSGIS(TextureTarget target, CheckedInt32 level, PixelInternalFormat internalformat, SizeI width, SizeI height, SizeI depth, SizeI size4d, CheckedInt32 border, PixelFormat format, PixelType type, Void* pixels);
        delegate void TexSubImage4DSGIS(TextureTarget target, CheckedInt32 level, CheckedInt32 xoffset, CheckedInt32 yoffset, CheckedInt32 zoffset, CheckedInt32 woffset, SizeI width, SizeI height, SizeI depth, SizeI size4d, PixelFormat format, PixelType type, Void* pixels);
        delegate Boolean AreTexturesResidentEXT(SizeI n, Texture* textures, Boolean* residences);
        delegate void BindTextureEXT(TextureTarget target, Texture texture);
        delegate void DeleteTexturesEXT(SizeI n, Texture* textures);
        delegate void GenTexturesEXT(SizeI n, Texture* textures);
        delegate Boolean IsTextureEXT(Texture texture);
        delegate void PrioritizeTexturesEXT(SizeI n, Texture* textures, ClampedFloat32* priorities);
        delegate void DetailTexFuncSGIS(TextureTarget target, SizeI n, Float32* points);
        delegate void GetDetailTexFuncSGIS(TextureTarget target, Float32* points);
        delegate void SharpenTexFuncSGIS(TextureTarget target, SizeI n, Float32* points);
        delegate void GetSharpenTexFuncSGIS(TextureTarget target, Float32* points);
        delegate void SampleMaskSGIS(ClampedFloat32 value, Boolean invert);
        delegate void SamplePatternSGIS(SamplePatternSGIS pattern);
        delegate void ArrayElementEXT(Int32 i);
        delegate void ColorPointerEXT(Int32 size, ColorPointerType type, SizeI stride, SizeI count, Void* pointer);
        delegate void DrawArraysEXT(BeginMode mode, Int32 first, SizeI count);
        delegate void EdgeFlagPointerEXT(SizeI stride, SizeI count, Boolean* pointer);
        delegate void GetPointervEXT(GetPointervPName pname, VoidPointer* @params);
        delegate void IndexPointerEXT(IndexPointerType type, SizeI stride, SizeI count, Void* pointer);
        delegate void NormalPointerEXT(NormalPointerType type, SizeI stride, SizeI count, Void* pointer);
        delegate void TexCoordPointerEXT(Int32 size, TexCoordPointerType type, SizeI stride, SizeI count, Void* pointer);
        delegate void VertexPointerEXT(Int32 size, VertexPointerType type, SizeI stride, SizeI count, Void* pointer);
        delegate void BlendEquationEXT(BlendEquationModeEXT mode);
        delegate void SpriteParameterfSGIX(SpriteParameterNameSGIX pname, CheckedFloat32 param);
        delegate void SpriteParameterfvSGIX(SpriteParameterNameSGIX pname, CheckedFloat32* @params);
        delegate void SpriteParameteriSGIX(SpriteParameterNameSGIX pname, CheckedInt32 param);
        delegate void SpriteParameterivSGIX(SpriteParameterNameSGIX pname, CheckedInt32* @params);
        delegate void PointParameterfEXT(PointParameterNameARB pname, CheckedFloat32 param);
        delegate void PointParameterfvEXT(PointParameterNameARB pname, CheckedFloat32* @params);
        delegate void PointParameterfSGIS(PointParameterNameARB pname, CheckedFloat32 param);
        delegate void PointParameterfvSGIS(PointParameterNameARB pname, CheckedFloat32* @params);
        delegate Int32 GetInstrumentsSGIX();
        delegate void InstrumentsBufferSGIX(SizeI size, Int32* buffer);
        delegate Int32 PollInstrumentsSGIX(Int32* marker_p);
        delegate void ReadInstrumentsSGIX(Int32 marker);
        delegate void StartInstrumentsSGIX();
        delegate void StopInstrumentsSGIX(Int32 marker);
        delegate void FrameZoomSGIX(CheckedInt32 factor);
        delegate void TagSampleBufferSGIX();
        delegate void DeformationMap3dSGIX(FfdTargetSGIX target, CoordD u1, CoordD u2, Int32 ustride, CheckedInt32 uorder, CoordD v1, CoordD v2, Int32 vstride, CheckedInt32 vorder, CoordD w1, CoordD w2, Int32 wstride, CheckedInt32 worder, CoordD* points);
        delegate void DeformationMap3fSGIX(FfdTargetSGIX target, CoordF u1, CoordF u2, Int32 ustride, CheckedInt32 uorder, CoordF v1, CoordF v2, Int32 vstride, CheckedInt32 vorder, CoordF w1, CoordF w2, Int32 wstride, CheckedInt32 worder, CoordF* points);
        delegate void DeformSGIX(FfdMaskSGIX mask);
        delegate void LoadIdentityDeformationMapSGIX(FfdMaskSGIX mask);
        delegate void ReferencePlaneSGIX(Float64* equation);
        delegate void FlushRasterSGIX();
        delegate void FogFuncSGIS(SizeI n, Float32* points);
        delegate void GetFogFuncSGIS(Float32* points);
        delegate void ImageTransformParameteriHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, Int32 param);
        delegate void ImageTransformParameterfHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, Float32 param);
        delegate void ImageTransformParameterivHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, Int32* @params);
        delegate void ImageTransformParameterfvHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, Float32* @params);
        delegate void GetImageTransformParameterivHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, Int32* @params);
        delegate void GetImageTransformParameterfvHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, Float32* @params);
        delegate void ColorSubTableEXT(ColorTableTarget target, SizeI start, SizeI count, PixelFormat format, PixelType type, Void* data);
        delegate void CopyColorSubTableEXT(ColorTableTarget target, SizeI start, WinCoord x, WinCoord y, SizeI width);
        delegate void HintPGI(HintTargetPGI target, Int32 mode);
        delegate void ColorTableEXT(ColorTableTarget target, PixelInternalFormat internalFormat, SizeI width, PixelFormat format, PixelType type, Void* table);
        delegate void GetColorTableEXT(ColorTableTarget target, PixelFormat format, PixelType type, Void* data);
        delegate void GetColorTableParameterivEXT(ColorTableTarget target, GetColorTableParameterPName pname, Int32* @params);
        delegate void GetColorTableParameterfvEXT(ColorTableTarget target, GetColorTableParameterPName pname, Float32* @params);
        delegate void GetListParameterfvSGIX(List list, ListParameterName pname, CheckedFloat32* @params);
        delegate void GetListParameterivSGIX(List list, ListParameterName pname, CheckedInt32* @params);
        delegate void ListParameterfSGIX(List list, ListParameterName pname, CheckedFloat32 param);
        delegate void ListParameterfvSGIX(List list, ListParameterName pname, CheckedFloat32* @params);
        delegate void ListParameteriSGIX(List list, ListParameterName pname, CheckedInt32 param);
        delegate void ListParameterivSGIX(List list, ListParameterName pname, CheckedInt32* @params);
        delegate void IndexMaterialEXT(MaterialFace face, IndexMaterialParameterEXT mode);
        delegate void IndexFuncEXT(IndexFunctionEXT func, ClampedFloat32 @ref);
        delegate void LockArraysEXT(Int32 first, SizeI count);
        delegate void UnlockArraysEXT();
        delegate void CullParameterdvEXT(CullParameterEXT pname, Float64* @params);
        delegate void CullParameterfvEXT(CullParameterEXT pname, Float32* @params);
        delegate void FragmentColorMaterialSGIX(MaterialFace face, MaterialParameter mode);
        delegate void FragmentLightfSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, CheckedFloat32 param);
        delegate void FragmentLightfvSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, CheckedFloat32* @params);
        delegate void FragmentLightiSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, CheckedInt32 param);
        delegate void FragmentLightivSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, CheckedInt32* @params);
        delegate void FragmentLightModelfSGIX(FragmentLightModelParameterSGIX pname, CheckedFloat32 param);
        delegate void FragmentLightModelfvSGIX(FragmentLightModelParameterSGIX pname, CheckedFloat32* @params);
        delegate void FragmentLightModeliSGIX(FragmentLightModelParameterSGIX pname, CheckedInt32 param);
        delegate void FragmentLightModelivSGIX(FragmentLightModelParameterSGIX pname, CheckedInt32* @params);
        delegate void FragmentMaterialfSGIX(MaterialFace face, MaterialParameter pname, CheckedFloat32 param);
        delegate void FragmentMaterialfvSGIX(MaterialFace face, MaterialParameter pname, CheckedFloat32* @params);
        delegate void FragmentMaterialiSGIX(MaterialFace face, MaterialParameter pname, CheckedInt32 param);
        delegate void FragmentMaterialivSGIX(MaterialFace face, MaterialParameter pname, CheckedInt32* @params);
        delegate void GetFragmentLightfvSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, Float32* @params);
        delegate void GetFragmentLightivSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, Int32* @params);
        delegate void GetFragmentMaterialfvSGIX(MaterialFace face, MaterialParameter pname, Float32* @params);
        delegate void GetFragmentMaterialivSGIX(MaterialFace face, MaterialParameter pname, Int32* @params);
        delegate void LightEnviSGIX(LightEnvParameterSGIX pname, CheckedInt32 param);
        delegate void DrawRangeElementsEXT(BeginMode mode, UInt32 start, UInt32 end, SizeI count, DrawElementsType type, Void* indices);
        delegate void ApplyTextureEXT(LightTextureModeEXT mode);
        delegate void TextureLightEXT(LightTexturePNameEXT pname);
        delegate void TextureMaterialEXT(MaterialFace face, MaterialParameter mode);
        delegate void AsyncMarkerSGIX(UInt32 marker);
        delegate Int32 FinishAsyncSGIX(UInt32* markerp);
        delegate Int32 PollAsyncSGIX(UInt32* markerp);
        delegate UInt32 GenAsyncMarkersSGIX(SizeI range);
        delegate void DeleteAsyncMarkersSGIX(UInt32 marker, SizeI range);
        delegate Boolean IsAsyncMarkerSGIX(UInt32 marker);
        delegate void VertexPointervINTEL(Int32 size, VertexPointerType type, VoidPointer* pointer);
        delegate void NormalPointervINTEL(NormalPointerType type, VoidPointer* pointer);
        delegate void ColorPointervINTEL(Int32 size, VertexPointerType type, VoidPointer* pointer);
        delegate void TexCoordPointervINTEL(Int32 size, VertexPointerType type, VoidPointer* pointer);
        delegate void PixelTransformParameteriEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, Int32 param);
        delegate void PixelTransformParameterfEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, Float32 param);
        delegate void PixelTransformParameterivEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, Int32* @params);
        delegate void PixelTransformParameterfvEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, Float32* @params);
        delegate void SecondaryColor3bEXT(ColorB red, ColorB green, ColorB blue);
        delegate void SecondaryColor3bvEXT(ColorB* v);
        delegate void SecondaryColor3dEXT(ColorD red, ColorD green, ColorD blue);
        delegate void SecondaryColor3dvEXT(ColorD* v);
        delegate void SecondaryColor3fEXT(ColorF red, ColorF green, ColorF blue);
        delegate void SecondaryColor3fvEXT(ColorF* v);
        delegate void SecondaryColor3iEXT(ColorI red, ColorI green, ColorI blue);
        delegate void SecondaryColor3ivEXT(ColorI* v);
        delegate void SecondaryColor3sEXT(ColorS red, ColorS green, ColorS blue);
        delegate void SecondaryColor3svEXT(ColorS* v);
        delegate void SecondaryColor3ubEXT(ColorUB red, ColorUB green, ColorUB blue);
        delegate void SecondaryColor3ubvEXT(ColorUB* v);
        delegate void SecondaryColor3uiEXT(ColorUI red, ColorUI green, ColorUI blue);
        delegate void SecondaryColor3uivEXT(ColorUI* v);
        delegate void SecondaryColor3usEXT(ColorUS red, ColorUS green, ColorUS blue);
        delegate void SecondaryColor3usvEXT(ColorUS* v);
        delegate void SecondaryColorPointerEXT(Int32 size, ColorPointerType type, SizeI stride, Void* pointer);
        delegate void TextureNormalEXT(TextureNormalModeEXT mode);
        delegate void MultiDrawArraysEXT(BeginMode mode, Int32* first, SizeI* count, SizeI primcount);
        delegate void MultiDrawElementsEXT(BeginMode mode, SizeI* count, DrawElementsType type, VoidPointer* indices, SizeI primcount);
        delegate void FogCoordfEXT(CoordF coord);
        delegate void FogCoordfvEXT(CoordF* coord);
        delegate void FogCoorddEXT(CoordD coord);
        delegate void FogCoorddvEXT(CoordD* coord);
        delegate void FogCoordPointerEXT(FogPointerTypeEXT type, SizeI stride, Void* pointer);
        delegate void Tangent3bEXT(Int8 tx, Int8 ty, Int8 tz);
        delegate void Tangent3bvEXT(Int8* v);
        delegate void Tangent3dEXT(CoordD tx, CoordD ty, CoordD tz);
        delegate void Tangent3dvEXT(CoordD* v);
        delegate void Tangent3fEXT(CoordF tx, CoordF ty, CoordF tz);
        delegate void Tangent3fvEXT(CoordF* v);
        delegate void Tangent3iEXT(Int32 tx, Int32 ty, Int32 tz);
        delegate void Tangent3ivEXT(Int32* v);
        delegate void Tangent3sEXT(Int16 tx, Int16 ty, Int16 tz);
        delegate void Tangent3svEXT(Int16* v);
        delegate void Binormal3bEXT(Int8 bx, Int8 by, Int8 bz);
        delegate void Binormal3bvEXT(Int8* v);
        delegate void Binormal3dEXT(CoordD bx, CoordD by, CoordD bz);
        delegate void Binormal3dvEXT(CoordD* v);
        delegate void Binormal3fEXT(CoordF bx, CoordF by, CoordF bz);
        delegate void Binormal3fvEXT(CoordF* v);
        delegate void Binormal3iEXT(Int32 bx, Int32 by, Int32 bz);
        delegate void Binormal3ivEXT(Int32* v);
        delegate void Binormal3sEXT(Int16 bx, Int16 by, Int16 bz);
        delegate void Binormal3svEXT(Int16* v);
        delegate void TangentPointerEXT(TangentPointerTypeEXT type, SizeI stride, Void* pointer);
        delegate void BinormalPointerEXT(BinormalPointerTypeEXT type, SizeI stride, Void* pointer);
        delegate void FinishTextureSUNX();
        delegate void GlobalAlphaFactorbSUN(Int8 factor);
        delegate void GlobalAlphaFactorsSUN(Int16 factor);
        delegate void GlobalAlphaFactoriSUN(Int32 factor);
        delegate void GlobalAlphaFactorfSUN(Float32 factor);
        delegate void GlobalAlphaFactordSUN(Float64 factor);
        delegate void GlobalAlphaFactorubSUN(UInt8 factor);
        delegate void GlobalAlphaFactorusSUN(UInt16 factor);
        delegate void GlobalAlphaFactoruiSUN(UInt32 factor);
        delegate void ReplacementCodeuiSUN(UInt32 code);
        delegate void ReplacementCodeusSUN(UInt16 code);
        delegate void ReplacementCodeubSUN(UInt8 code);
        delegate void ReplacementCodeuivSUN(UInt32* code);
        delegate void ReplacementCodeusvSUN(UInt16* code);
        delegate void ReplacementCodeubvSUN(UInt8* code);
        delegate void ReplacementCodePointerSUN(ReplacementCodeTypeSUN type, SizeI stride, VoidPointer* pointer);
        delegate void Color4ubVertex2fSUN(UInt8 r, UInt8 g, UInt8 b, UInt8 a, Float32 x, Float32 y);
        delegate void Color4ubVertex2fvSUN(UInt8* c, Float32* v);
        delegate void Color4ubVertex3fSUN(UInt8 r, UInt8 g, UInt8 b, UInt8 a, Float32 x, Float32 y, Float32 z);
        delegate void Color4ubVertex3fvSUN(UInt8* c, Float32* v);
        delegate void Color3fVertex3fSUN(Float32 r, Float32 g, Float32 b, Float32 x, Float32 y, Float32 z);
        delegate void Color3fVertex3fvSUN(Float32* c, Float32* v);
        delegate void Normal3fVertex3fSUN(Float32 nx, Float32 ny, Float32 nz, Float32 x, Float32 y, Float32 z);
        delegate void Normal3fVertex3fvSUN(Float32* n, Float32* v);
        delegate void Color4fNormal3fVertex3fSUN(Float32 r, Float32 g, Float32 b, Float32 a, Float32 nx, Float32 ny, Float32 nz, Float32 x, Float32 y, Float32 z);
        delegate void Color4fNormal3fVertex3fvSUN(Float32* c, Float32* n, Float32* v);
        delegate void TexCoord2fVertex3fSUN(Float32 s, Float32 t, Float32 x, Float32 y, Float32 z);
        delegate void TexCoord2fVertex3fvSUN(Float32* tc, Float32* v);
        delegate void TexCoord4fVertex4fSUN(Float32 s, Float32 t, Float32 p, Float32 q, Float32 x, Float32 y, Float32 z, Float32 w);
        delegate void TexCoord4fVertex4fvSUN(Float32* tc, Float32* v);
        delegate void TexCoord2fColor4ubVertex3fSUN(Float32 s, Float32 t, UInt8 r, UInt8 g, UInt8 b, UInt8 a, Float32 x, Float32 y, Float32 z);
        delegate void TexCoord2fColor4ubVertex3fvSUN(Float32* tc, UInt8* c, Float32* v);
        delegate void TexCoord2fColor3fVertex3fSUN(Float32 s, Float32 t, Float32 r, Float32 g, Float32 b, Float32 x, Float32 y, Float32 z);
        delegate void TexCoord2fColor3fVertex3fvSUN(Float32* tc, Float32* c, Float32* v);
        delegate void TexCoord2fNormal3fVertex3fSUN(Float32 s, Float32 t, Float32 nx, Float32 ny, Float32 nz, Float32 x, Float32 y, Float32 z);
        delegate void TexCoord2fNormal3fVertex3fvSUN(Float32* tc, Float32* n, Float32* v);
        delegate void TexCoord2fColor4fNormal3fVertex3fSUN(Float32 s, Float32 t, Float32 r, Float32 g, Float32 b, Float32 a, Float32 nx, Float32 ny, Float32 nz, Float32 x, Float32 y, Float32 z);
        delegate void TexCoord2fColor4fNormal3fVertex3fvSUN(Float32* tc, Float32* c, Float32* n, Float32* v);
        delegate void TexCoord4fColor4fNormal3fVertex4fSUN(Float32 s, Float32 t, Float32 p, Float32 q, Float32 r, Float32 g, Float32 b, Float32 a, Float32 nx, Float32 ny, Float32 nz, Float32 x, Float32 y, Float32 z, Float32 w);
        delegate void TexCoord4fColor4fNormal3fVertex4fvSUN(Float32* tc, Float32* c, Float32* n, Float32* v);
        delegate void ReplacementCodeuiVertex3fSUN(ReplacementCodeSUN rc, Float32 x, Float32 y, Float32 z);
        delegate void ReplacementCodeuiVertex3fvSUN(ReplacementCodeSUN* rc, Float32* v);
        delegate void ReplacementCodeuiColor4ubVertex3fSUN(ReplacementCodeSUN rc, UInt8 r, UInt8 g, UInt8 b, UInt8 a, Float32 x, Float32 y, Float32 z);
        delegate void ReplacementCodeuiColor4ubVertex3fvSUN(ReplacementCodeSUN* rc, UInt8* c, Float32* v);
        delegate void ReplacementCodeuiColor3fVertex3fSUN(ReplacementCodeSUN rc, Float32 r, Float32 g, Float32 b, Float32 x, Float32 y, Float32 z);
        delegate void ReplacementCodeuiColor3fVertex3fvSUN(ReplacementCodeSUN* rc, Float32* c, Float32* v);
        delegate void ReplacementCodeuiNormal3fVertex3fSUN(ReplacementCodeSUN rc, Float32 nx, Float32 ny, Float32 nz, Float32 x, Float32 y, Float32 z);
        delegate void ReplacementCodeuiNormal3fVertex3fvSUN(ReplacementCodeSUN* rc, Float32* n, Float32* v);
        delegate void ReplacementCodeuiColor4fNormal3fVertex3fSUN(ReplacementCodeSUN rc, Float32 r, Float32 g, Float32 b, Float32 a, Float32 nx, Float32 ny, Float32 nz, Float32 x, Float32 y, Float32 z);
        delegate void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ReplacementCodeSUN* rc, Float32* c, Float32* n, Float32* v);
        delegate void ReplacementCodeuiTexCoord2fVertex3fSUN(ReplacementCodeSUN rc, Float32 s, Float32 t, Float32 x, Float32 y, Float32 z);
        delegate void ReplacementCodeuiTexCoord2fVertex3fvSUN(ReplacementCodeSUN* rc, Float32* tc, Float32* v);
        delegate void ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(ReplacementCodeSUN rc, Float32 s, Float32 t, Float32 nx, Float32 ny, Float32 nz, Float32 x, Float32 y, Float32 z);
        delegate void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ReplacementCodeSUN* rc, Float32* tc, Float32* n, Float32* v);
        delegate void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(ReplacementCodeSUN rc, Float32 s, Float32 t, Float32 r, Float32 g, Float32 b, Float32 a, Float32 nx, Float32 ny, Float32 nz, Float32 x, Float32 y, Float32 z);
        delegate void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ReplacementCodeSUN* rc, Float32* tc, Float32* c, Float32* n, Float32* v);
        delegate void BlendFuncSeparateEXT(BlendFuncSeparateParameterEXT sfactorRGB, BlendFuncSeparateParameterEXT dfactorRGB, BlendFuncSeparateParameterEXT sfactorAlpha, BlendFuncSeparateParameterEXT dfactorAlpha);
        delegate void BlendFuncSeparateINGR(BlendFuncSeparateParameterEXT sfactorRGB, BlendFuncSeparateParameterEXT dfactorRGB, BlendFuncSeparateParameterEXT sfactorAlpha, BlendFuncSeparateParameterEXT dfactorAlpha);
        delegate void VertexWeightfEXT(Float32 weight);
        delegate void VertexWeightfvEXT(Float32* weight);
        delegate void VertexWeightPointerEXT(SizeI size, VertexWeightPointerTypeEXT type, SizeI stride, Void* pointer);
        delegate void FlushVertexArrayRangeNV();
        delegate void VertexArrayRangeNV(SizeI length, Void* pointer);
        delegate void CombinerParameterfvNV(CombinerParameterNV pname, CheckedFloat32* @params);
        delegate void CombinerParameterfNV(CombinerParameterNV pname, Float32 param);
        delegate void CombinerParameterivNV(CombinerParameterNV pname, CheckedInt32* @params);
        delegate void CombinerParameteriNV(CombinerParameterNV pname, Int32 param);
        delegate void CombinerInputNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerRegisterNV input, CombinerMappingNV mapping, CombinerComponentUsageNV componentUsage);
        delegate void CombinerOutputNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerRegisterNV abOutput, CombinerRegisterNV cdOutput, CombinerRegisterNV sumOutput, CombinerScaleNV scale, CombinerBiasNV bias, Boolean abDotProduct, Boolean cdDotProduct, Boolean muxSum);
        delegate void FinalCombinerInputNV(CombinerVariableNV variable, CombinerRegisterNV input, CombinerMappingNV mapping, CombinerComponentUsageNV componentUsage);
        delegate void GetCombinerInputParameterfvNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, Float32* @params);
        delegate void GetCombinerInputParameterivNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, Int32* @params);
        delegate void GetCombinerOutputParameterfvNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, Float32* @params);
        delegate void GetCombinerOutputParameterivNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, Int32* @params);
        delegate void GetFinalCombinerInputParameterfvNV(CombinerVariableNV variable, CombinerParameterNV pname, Float32* @params);
        delegate void GetFinalCombinerInputParameterivNV(CombinerVariableNV variable, CombinerParameterNV pname, Int32* @params);
        delegate void ResizeBuffersMESA();
        delegate void WindowPos2dMESA(CoordD x, CoordD y);
        delegate void WindowPos2dvMESA(CoordD* v);
        delegate void WindowPos2fMESA(CoordF x, CoordF y);
        delegate void WindowPos2fvMESA(CoordF* v);
        delegate void WindowPos2iMESA(CoordI x, CoordI y);
        delegate void WindowPos2ivMESA(CoordI* v);
        delegate void WindowPos2sMESA(CoordS x, CoordS y);
        delegate void WindowPos2svMESA(CoordS* v);
        delegate void WindowPos3dMESA(CoordD x, CoordD y, CoordD z);
        delegate void WindowPos3dvMESA(CoordD* v);
        delegate void WindowPos3fMESA(CoordF x, CoordF y, CoordF z);
        delegate void WindowPos3fvMESA(CoordF* v);
        delegate void WindowPos3iMESA(CoordI x, CoordI y, CoordI z);
        delegate void WindowPos3ivMESA(CoordI* v);
        delegate void WindowPos3sMESA(CoordS x, CoordS y, CoordS z);
        delegate void WindowPos3svMESA(CoordS* v);
        delegate void WindowPos4dMESA(CoordD x, CoordD y, CoordD z, CoordD w);
        delegate void WindowPos4dvMESA(CoordD* v);
        delegate void WindowPos4fMESA(CoordF x, CoordF y, CoordF z, CoordF w);
        delegate void WindowPos4fvMESA(CoordF* v);
        delegate void WindowPos4iMESA(CoordI x, CoordI y, CoordI z, CoordI w);
        delegate void WindowPos4ivMESA(CoordI* v);
        delegate void WindowPos4sMESA(CoordS x, CoordS y, CoordS z, CoordS w);
        delegate void WindowPos4svMESA(CoordS* v);
        delegate void MultiModeDrawArraysIBM(BeginMode* mode, Int32* first, SizeI* count, SizeI primcount, Int32 modestride);
        delegate void MultiModeDrawElementsIBM(BeginMode* mode, SizeI* count, DrawElementsType type, ConstVoidPointer* indices, SizeI primcount, Int32 modestride);
        delegate void ColorPointerListIBM(Int32 size, ColorPointerType type, Int32 stride, VoidPointer* pointer, Int32 ptrstride);
        delegate void SecondaryColorPointerListIBM(Int32 size, SecondaryColorPointerTypeIBM type, Int32 stride, VoidPointer* pointer, Int32 ptrstride);
        delegate void EdgeFlagPointerListIBM(Int32 stride, BooleanPointer* pointer, Int32 ptrstride);
        delegate void FogCoordPointerListIBM(FogPointerTypeIBM type, Int32 stride, VoidPointer* pointer, Int32 ptrstride);
        delegate void IndexPointerListIBM(IndexPointerType type, Int32 stride, VoidPointer* pointer, Int32 ptrstride);
        delegate void NormalPointerListIBM(NormalPointerType type, Int32 stride, VoidPointer* pointer, Int32 ptrstride);
        delegate void TexCoordPointerListIBM(Int32 size, TexCoordPointerType type, Int32 stride, VoidPointer* pointer, Int32 ptrstride);
        delegate void VertexPointerListIBM(Int32 size, VertexPointerType type, Int32 stride, VoidPointer* pointer, Int32 ptrstride);
        delegate void TbufferMask3DFX(UInt32 mask);
        delegate void SampleMaskEXT(ClampedFloat32 value, Boolean invert);
        delegate void SamplePatternEXT(SamplePatternEXT pattern);
        delegate void TextureColorMaskSGIS(Boolean red, Boolean green, Boolean blue, Boolean alpha);
        delegate void IglooInterfaceSGIX(IglooFunctionSelectSGIX pname, IglooParameterSGIX* @params);
        delegate void DeleteFencesNV(SizeI n, FenceNV* fences);
        delegate void GenFencesNV(SizeI n, FenceNV* fences);
        delegate Boolean IsFenceNV(FenceNV fence);
        delegate Boolean TestFenceNV(FenceNV fence);
        delegate void GetFenceivNV(FenceNV fence, FenceParameterNameNV pname, Int32* @params);
        delegate void FinishFenceNV(FenceNV fence);
        delegate void SetFenceNV(FenceNV fence, FenceConditionNV condition);
        delegate void MapControlPointsNV(EvalTargetNV target, UInt32 index, MapTypeNV type, SizeI ustride, SizeI vstride, CheckedInt32 uorder, CheckedInt32 vorder, Boolean packed, Void* points);
        delegate void MapParameterivNV(EvalTargetNV target, MapParameterNV pname, CheckedInt32* @params);
        delegate void MapParameterfvNV(EvalTargetNV target, MapParameterNV pname, CheckedFloat32* @params);
        delegate void GetMapControlPointsNV(EvalTargetNV target, UInt32 index, MapTypeNV type, SizeI ustride, SizeI vstride, Boolean packed, Void* points);
        delegate void GetMapParameterivNV(EvalTargetNV target, MapParameterNV pname, Int32* @params);
        delegate void GetMapParameterfvNV(EvalTargetNV target, MapParameterNV pname, Float32* @params);
        delegate void GetMapAttribParameterivNV(EvalTargetNV target, UInt32 index, MapAttribParameterNV pname, Int32* @params);
        delegate void GetMapAttribParameterfvNV(EvalTargetNV target, UInt32 index, MapAttribParameterNV pname, Float32* @params);
        delegate void EvalMapsNV(EvalTargetNV target, EvalMapsModeNV mode);
        delegate void CombinerStageParameterfvNV(CombinerStageNV stage, CombinerParameterNV pname, CheckedFloat32* @params);
        delegate void GetCombinerStageParameterfvNV(CombinerStageNV stage, CombinerParameterNV pname, Float32* @params);
        delegate Boolean AreProgramsResidentNV(SizeI n, UInt32* programs, Boolean* residences);
        delegate void BindProgramNV(VertexAttribEnumNV target, UInt32 id);
        delegate void DeleteProgramsNV(SizeI n, UInt32* programs);
        delegate void ExecuteProgramNV(VertexAttribEnumNV target, UInt32 id, Float32* @params);
        delegate void GenProgramsNV(SizeI n, UInt32* programs);
        delegate void GetProgramParameterdvNV(VertexAttribEnumNV target, UInt32 index, VertexAttribEnumNV pname, Float64* @params);
        delegate void GetProgramParameterfvNV(VertexAttribEnumNV target, UInt32 index, VertexAttribEnumNV pname, Float32* @params);
        delegate void GetProgramivNV(UInt32 id, VertexAttribEnumNV pname, Int32* @params);
        delegate void GetProgramStringNV(UInt32 id, VertexAttribEnumNV pname, ProgramCharacterNV* program);
        delegate void GetTrackMatrixivNV(VertexAttribEnumNV target, UInt32 address, VertexAttribEnumNV pname, Int32* @params);
        delegate void GetVertexAttribdvNV(UInt32 index, VertexAttribEnumNV pname, Float64* @params);
        delegate void GetVertexAttribfvNV(UInt32 index, VertexAttribEnumNV pname, Float32* @params);
        delegate void GetVertexAttribivNV(UInt32 index, VertexAttribEnumNV pname, Int32* @params);
        delegate void GetVertexAttribPointervNV(UInt32 index, VertexAttribEnumNV pname, VoidPointer* pointer);
        delegate Boolean IsProgramNV(UInt32 id);
        delegate void LoadProgramNV(VertexAttribEnumNV target, UInt32 id, SizeI len, UInt8* program);
        delegate void ProgramParameter4dNV(VertexAttribEnumNV target, UInt32 index, Float64 x, Float64 y, Float64 z, Float64 w);
        delegate void ProgramParameter4dvNV(VertexAttribEnumNV target, UInt32 index, Float64* v);
        delegate void ProgramParameter4fNV(VertexAttribEnumNV target, UInt32 index, Float32 x, Float32 y, Float32 z, Float32 w);
        delegate void ProgramParameter4fvNV(VertexAttribEnumNV target, UInt32 index, Float32* v);
        delegate void ProgramParameters4dvNV(VertexAttribEnumNV target, UInt32 index, UInt32 count, Float64* v);
        delegate void ProgramParameters4fvNV(VertexAttribEnumNV target, UInt32 index, UInt32 count, Float32* v);
        delegate void RequestResidentProgramsNV(SizeI n, UInt32* programs);
        delegate void TrackMatrixNV(VertexAttribEnumNV target, UInt32 address, VertexAttribEnumNV matrix, VertexAttribEnumNV transform);
        delegate void VertexAttribPointerNV(UInt32 index, Int32 fsize, VertexAttribEnumNV type, SizeI stride, Void* pointer);
        delegate void VertexAttrib1dNV(UInt32 index, Float64 x);
        delegate void VertexAttrib1dvNV(UInt32 index, Float64* v);
        delegate void VertexAttrib1fNV(UInt32 index, Float32 x);
        delegate void VertexAttrib1fvNV(UInt32 index, Float32* v);
        delegate void VertexAttrib1sNV(UInt32 index, Int16 x);
        delegate void VertexAttrib1svNV(UInt32 index, Int16* v);
        delegate void VertexAttrib2dNV(UInt32 index, Float64 x, Float64 y);
        delegate void VertexAttrib2dvNV(UInt32 index, Float64* v);
        delegate void VertexAttrib2fNV(UInt32 index, Float32 x, Float32 y);
        delegate void VertexAttrib2fvNV(UInt32 index, Float32* v);
        delegate void VertexAttrib2sNV(UInt32 index, Int16 x, Int16 y);
        delegate void VertexAttrib2svNV(UInt32 index, Int16* v);
        delegate void VertexAttrib3dNV(UInt32 index, Float64 x, Float64 y, Float64 z);
        delegate void VertexAttrib3dvNV(UInt32 index, Float64* v);
        delegate void VertexAttrib3fNV(UInt32 index, Float32 x, Float32 y, Float32 z);
        delegate void VertexAttrib3fvNV(UInt32 index, Float32* v);
        delegate void VertexAttrib3sNV(UInt32 index, Int16 x, Int16 y, Int16 z);
        delegate void VertexAttrib3svNV(UInt32 index, Int16* v);
        delegate void VertexAttrib4dNV(UInt32 index, Float64 x, Float64 y, Float64 z, Float64 w);
        delegate void VertexAttrib4dvNV(UInt32 index, Float64* v);
        delegate void VertexAttrib4fNV(UInt32 index, Float32 x, Float32 y, Float32 z, Float32 w);
        delegate void VertexAttrib4fvNV(UInt32 index, Float32* v);
        delegate void VertexAttrib4sNV(UInt32 index, Int16 x, Int16 y, Int16 z, Int16 w);
        delegate void VertexAttrib4svNV(UInt32 index, Int16* v);
        delegate void VertexAttrib4ubNV(UInt32 index, ColorUB x, ColorUB y, ColorUB z, ColorUB w);
        delegate void VertexAttrib4ubvNV(UInt32 index, ColorUB* v);
        delegate void VertexAttribs1dvNV(UInt32 index, SizeI count, Float64* v);
        delegate void VertexAttribs1fvNV(UInt32 index, SizeI count, Float32* v);
        delegate void VertexAttribs1svNV(UInt32 index, SizeI count, Int16* v);
        delegate void VertexAttribs2dvNV(UInt32 index, SizeI count, Float64* v);
        delegate void VertexAttribs2fvNV(UInt32 index, SizeI count, Float32* v);
        delegate void VertexAttribs2svNV(UInt32 index, SizeI count, Int16* v);
        delegate void VertexAttribs3dvNV(UInt32 index, SizeI count, Float64* v);
        delegate void VertexAttribs3fvNV(UInt32 index, SizeI count, Float32* v);
        delegate void VertexAttribs3svNV(UInt32 index, SizeI count, Int16* v);
        delegate void VertexAttribs4dvNV(UInt32 index, SizeI count, Float64* v);
        delegate void VertexAttribs4fvNV(UInt32 index, SizeI count, Float32* v);
        delegate void VertexAttribs4svNV(UInt32 index, SizeI count, Int16* v);
        delegate void VertexAttribs4ubvNV(UInt32 index, SizeI count, ColorUB* v);
        delegate void TexBumpParameterivATI(TexBumpParameterATI pname, Int32* param);
        delegate void TexBumpParameterfvATI(TexBumpParameterATI pname, Float32* param);
        delegate void GetTexBumpParameterivATI(GetTexBumpParameterATI pname, Int32* param);
        delegate void GetTexBumpParameterfvATI(GetTexBumpParameterATI pname, Float32* param);
        delegate UInt32 GenFragmentShadersATI(UInt32 range);
        delegate void BindFragmentShaderATI(UInt32 id);
        delegate void DeleteFragmentShaderATI(UInt32 id);
        delegate void BeginFragmentShaderATI();
        delegate void EndFragmentShaderATI();
        delegate void PassTexCoordATI(UInt32 dst, UInt32 coord, SwizzleOpATI swizzle);
        delegate void SampleMapATI(UInt32 dst, UInt32 interp, SwizzleOpATI swizzle);
        delegate void ColorFragmentOp1ATI(FragmentOpATI op, UInt32 dst, UInt32 dstMask, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod);
        delegate void ColorFragmentOp2ATI(FragmentOpATI op, UInt32 dst, UInt32 dstMask, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod, UInt32 arg2, UInt32 arg2Rep, UInt32 arg2Mod);
        delegate void ColorFragmentOp3ATI(FragmentOpATI op, UInt32 dst, UInt32 dstMask, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod, UInt32 arg2, UInt32 arg2Rep, UInt32 arg2Mod, UInt32 arg3, UInt32 arg3Rep, UInt32 arg3Mod);
        delegate void AlphaFragmentOp1ATI(FragmentOpATI op, UInt32 dst, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod);
        delegate void AlphaFragmentOp2ATI(FragmentOpATI op, UInt32 dst, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod, UInt32 arg2, UInt32 arg2Rep, UInt32 arg2Mod);
        delegate void AlphaFragmentOp3ATI(FragmentOpATI op, UInt32 dst, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod, UInt32 arg2, UInt32 arg2Rep, UInt32 arg2Mod, UInt32 arg3, UInt32 arg3Rep, UInt32 arg3Mod);
        delegate void SetFragmentShaderConstantATI(UInt32 dst, ConstFloat32* value);
        delegate void PNTrianglesiATI(PNTrianglesPNameATI pname, Int32 param);
        delegate void PNTrianglesfATI(PNTrianglesPNameATI pname, Float32 param);
        delegate UInt32 NewObjectBufferATI(SizeI size, ConstVoid* pointer, ArrayObjectUsageATI usage);
        delegate Boolean IsObjectBufferATI(UInt32 buffer);
        delegate void UpdateObjectBufferATI(UInt32 buffer, UInt32 offset, SizeI size, ConstVoid* pointer, PreserveModeATI preserve);
        delegate void GetObjectBufferfvATI(UInt32 buffer, ArrayObjectPNameATI pname, Float32* @params);
        delegate void GetObjectBufferivATI(UInt32 buffer, ArrayObjectPNameATI pname, Int32* @params);
        delegate void FreeObjectBufferATI(UInt32 buffer);
        delegate void ArrayObjectATI(EnableCap array, Int32 size, ScalarType type, SizeI stride, UInt32 buffer, UInt32 offset);
        delegate void GetArrayObjectfvATI(EnableCap array, ArrayObjectPNameATI pname, Float32* @params);
        delegate void GetArrayObjectivATI(EnableCap array, ArrayObjectPNameATI pname, Int32* @params);
        delegate void VariantArrayObjectATI(UInt32 id, ScalarType type, SizeI stride, UInt32 buffer, UInt32 offset);
        delegate void GetVariantArrayObjectfvATI(UInt32 id, ArrayObjectPNameATI pname, Float32* @params);
        delegate void GetVariantArrayObjectivATI(UInt32 id, ArrayObjectPNameATI pname, Int32* @params);
        delegate void BeginVertexShaderEXT();
        delegate void EndVertexShaderEXT();
        delegate void BindVertexShaderEXT(UInt32 id);
        delegate UInt32 GenVertexShadersEXT(UInt32 range);
        delegate void DeleteVertexShaderEXT(UInt32 id);
        delegate void ShaderOp1EXT(VertexShaderOpEXT op, UInt32 res, UInt32 arg1);
        delegate void ShaderOp2EXT(VertexShaderOpEXT op, UInt32 res, UInt32 arg1, UInt32 arg2);
        delegate void ShaderOp3EXT(VertexShaderOpEXT op, UInt32 res, UInt32 arg1, UInt32 arg2, UInt32 arg3);
        delegate void SwizzleEXT(UInt32 res, UInt32 @in, VertexShaderCoordOutEXT outX, VertexShaderCoordOutEXT outY, VertexShaderCoordOutEXT outZ, VertexShaderCoordOutEXT outW);
        delegate void WriteMaskEXT(UInt32 res, UInt32 @in, VertexShaderWriteMaskEXT outX, VertexShaderWriteMaskEXT outY, VertexShaderWriteMaskEXT outZ, VertexShaderWriteMaskEXT outW);
        delegate void InsertComponentEXT(UInt32 res, UInt32 src, UInt32 num);
        delegate void ExtractComponentEXT(UInt32 res, UInt32 src, UInt32 num);
        delegate UInt32 GenSymbolsEXT(DataTypeEXT datatype, VertexShaderStorageTypeEXT storagetype, ParameterRangeEXT range, UInt32 components);
        delegate void SetInvariantEXT(UInt32 id, ScalarType type, Void* addr);
        delegate void SetLocalConstantEXT(UInt32 id, ScalarType type, Void* addr);
        delegate void VariantbvEXT(UInt32 id, Int8* addr);
        delegate void VariantsvEXT(UInt32 id, Int16* addr);
        delegate void VariantivEXT(UInt32 id, Int32* addr);
        delegate void VariantfvEXT(UInt32 id, Float32* addr);
        delegate void VariantdvEXT(UInt32 id, Float64* addr);
        delegate void VariantubvEXT(UInt32 id, UInt8* addr);
        delegate void VariantusvEXT(UInt32 id, UInt16* addr);
        delegate void VariantuivEXT(UInt32 id, UInt32* addr);
        delegate void VariantPointerEXT(UInt32 id, ScalarType type, UInt32 stride, Void* addr);
        delegate void EnableVariantClientStateEXT(UInt32 id);
        delegate void DisableVariantClientStateEXT(UInt32 id);
        delegate UInt32 BindLightParameterEXT(LightName light, LightParameter value);
        delegate UInt32 BindMaterialParameterEXT(MaterialFace face, MaterialParameter value);
        delegate UInt32 BindTexGenParameterEXT(TextureUnit unit, TextureCoordName coord, TextureGenParameter value);
        delegate UInt32 BindTextureUnitParameterEXT(TextureUnit unit, VertexShaderTextureUnitParameter value);
        delegate UInt32 BindParameterEXT(VertexShaderParameterEXT value);
        delegate Boolean IsVariantEnabledEXT(UInt32 id, VariantCapEXT cap);
        delegate void GetVariantBooleanvEXT(UInt32 id, GetVariantValueEXT value, Boolean* data);
        delegate void GetVariantIntegervEXT(UInt32 id, GetVariantValueEXT value, Int32* data);
        delegate void GetVariantFloatvEXT(UInt32 id, GetVariantValueEXT value, Float32* data);
        delegate void GetVariantPointervEXT(UInt32 id, GetVariantValueEXT value, VoidPointer* data);
        delegate void GetInvariantBooleanvEXT(UInt32 id, GetVariantValueEXT value, Boolean* data);
        delegate void GetInvariantIntegervEXT(UInt32 id, GetVariantValueEXT value, Int32* data);
        delegate void GetInvariantFloatvEXT(UInt32 id, GetVariantValueEXT value, Float32* data);
        delegate void GetLocalConstantBooleanvEXT(UInt32 id, GetVariantValueEXT value, Boolean* data);
        delegate void GetLocalConstantIntegervEXT(UInt32 id, GetVariantValueEXT value, Int32* data);
        delegate void GetLocalConstantFloatvEXT(UInt32 id, GetVariantValueEXT value, Float32* data);
        delegate void VertexStream1sATI(VertexStreamATI stream, Int16 x);
        delegate void VertexStream1svATI(VertexStreamATI stream, Int16* coords);
        delegate void VertexStream1iATI(VertexStreamATI stream, Int32 x);
        delegate void VertexStream1ivATI(VertexStreamATI stream, Int32* coords);
        delegate void VertexStream1fATI(VertexStreamATI stream, Float32 x);
        delegate void VertexStream1fvATI(VertexStreamATI stream, Float32* coords);
        delegate void VertexStream1dATI(VertexStreamATI stream, Float64 x);
        delegate void VertexStream1dvATI(VertexStreamATI stream, Float64* coords);
        delegate void VertexStream2sATI(VertexStreamATI stream, Int16 x, Int16 y);
        delegate void VertexStream2svATI(VertexStreamATI stream, Int16* coords);
        delegate void VertexStream2iATI(VertexStreamATI stream, Int32 x, Int32 y);
        delegate void VertexStream2ivATI(VertexStreamATI stream, Int32* coords);
        delegate void VertexStream2fATI(VertexStreamATI stream, Float32 x, Float32 y);
        delegate void VertexStream2fvATI(VertexStreamATI stream, Float32* coords);
        delegate void VertexStream2dATI(VertexStreamATI stream, Float64 x, Float64 y);
        delegate void VertexStream2dvATI(VertexStreamATI stream, Float64* coords);
        delegate void VertexStream3sATI(VertexStreamATI stream, Int16 x, Int16 y, Int16 z);
        delegate void VertexStream3svATI(VertexStreamATI stream, Int16* coords);
        delegate void VertexStream3iATI(VertexStreamATI stream, Int32 x, Int32 y, Int32 z);
        delegate void VertexStream3ivATI(VertexStreamATI stream, Int32* coords);
        delegate void VertexStream3fATI(VertexStreamATI stream, Float32 x, Float32 y, Float32 z);
        delegate void VertexStream3fvATI(VertexStreamATI stream, Float32* coords);
        delegate void VertexStream3dATI(VertexStreamATI stream, Float64 x, Float64 y, Float64 z);
        delegate void VertexStream3dvATI(VertexStreamATI stream, Float64* coords);
        delegate void VertexStream4sATI(VertexStreamATI stream, Int16 x, Int16 y, Int16 z, Int16 w);
        delegate void VertexStream4svATI(VertexStreamATI stream, Int16* coords);
        delegate void VertexStream4iATI(VertexStreamATI stream, Int32 x, Int32 y, Int32 z, Int32 w);
        delegate void VertexStream4ivATI(VertexStreamATI stream, Int32* coords);
        delegate void VertexStream4fATI(VertexStreamATI stream, Float32 x, Float32 y, Float32 z, Float32 w);
        delegate void VertexStream4fvATI(VertexStreamATI stream, Float32* coords);
        delegate void VertexStream4dATI(VertexStreamATI stream, Float64 x, Float64 y, Float64 z, Float64 w);
        delegate void VertexStream4dvATI(VertexStreamATI stream, Float64* coords);
        delegate void NormalStream3bATI(VertexStreamATI stream, Int8 nx, Int8 ny, Int8 nz);
        delegate void NormalStream3bvATI(VertexStreamATI stream, Int8* coords);
        delegate void NormalStream3sATI(VertexStreamATI stream, Int16 nx, Int16 ny, Int16 nz);
        delegate void NormalStream3svATI(VertexStreamATI stream, Int16* coords);
        delegate void NormalStream3iATI(VertexStreamATI stream, Int32 nx, Int32 ny, Int32 nz);
        delegate void NormalStream3ivATI(VertexStreamATI stream, Int32* coords);
        delegate void NormalStream3fATI(VertexStreamATI stream, Float32 nx, Float32 ny, Float32 nz);
        delegate void NormalStream3fvATI(VertexStreamATI stream, Float32* coords);
        delegate void NormalStream3dATI(VertexStreamATI stream, Float64 nx, Float64 ny, Float64 nz);
        delegate void NormalStream3dvATI(VertexStreamATI stream, Float64* coords);
        delegate void ClientActiveVertexStreamATI(VertexStreamATI stream);
        delegate void VertexBlendEnviATI(VertexStreamATI pname, Int32 param);
        delegate void VertexBlendEnvfATI(VertexStreamATI pname, Float32 param);
        delegate void ElementPointerATI(ElementPointerTypeATI type, Void* pointer);
        delegate void DrawElementArrayATI(BeginMode mode, SizeI count);
        delegate void DrawRangeElementArrayATI(BeginMode mode, UInt32 start, UInt32 end, SizeI count);
        delegate void DrawMeshArraysSUN(BeginMode mode, Int32 first, SizeI count, SizeI width);
        delegate void GenOcclusionQueriesNV(SizeI n, UInt32* ids);
        delegate void DeleteOcclusionQueriesNV(SizeI n, UInt32* ids);
        delegate Boolean IsOcclusionQueryNV(UInt32 id);
        delegate void BeginOcclusionQueryNV(UInt32 id);
        delegate void EndOcclusionQueryNV();
        delegate void GetOcclusionQueryivNV(UInt32 id, OcclusionQueryParameterNameNV pname, Int32* @params);
        delegate void GetOcclusionQueryuivNV(UInt32 id, OcclusionQueryParameterNameNV pname, UInt32* @params);
        delegate void PointParameteriNV(PointParameterNameARB pname, Int32 param);
        delegate void PointParameterivNV(PointParameterNameARB pname, Int32* @params);
        delegate void ActiveStencilFaceEXT(StencilFaceDirection face);
        delegate void ElementPointerAPPLE(ElementPointerTypeATI type, Void* pointer);
        delegate void DrawElementArrayAPPLE(BeginMode mode, Int32 first, SizeI count);
        delegate void DrawRangeElementArrayAPPLE(BeginMode mode, UInt32 start, UInt32 end, Int32 first, SizeI count);
        delegate void MultiDrawElementArrayAPPLE(BeginMode mode, Int32* first, SizeI* count, SizeI primcount);
        delegate void MultiDrawRangeElementArrayAPPLE(BeginMode mode, UInt32 start, UInt32 end, Int32* first, SizeI* count, SizeI primcount);
        delegate void GenFencesAPPLE(SizeI n, FenceNV* fences);
        delegate void DeleteFencesAPPLE(SizeI n, FenceNV* fences);
        delegate void SetFenceAPPLE(FenceNV fence);
        delegate Boolean IsFenceAPPLE(FenceNV fence);
        delegate Boolean TestFenceAPPLE(FenceNV fence);
        delegate void FinishFenceAPPLE(FenceNV fence);
        delegate Boolean TestObjectAPPLE(ObjectTypeAPPLE @object, UInt32 name);
        delegate void FinishObjectAPPLE(ObjectTypeAPPLE @object, Int32 name);
        delegate void BindVertexArrayAPPLE(UInt32 array);
        delegate void DeleteVertexArraysAPPLE(SizeI n, UInt32* arrays);
        delegate void GenVertexArraysAPPLE(SizeI n, UInt32* arrays);
        delegate Boolean IsVertexArrayAPPLE(UInt32 array);
        delegate void VertexArrayRangeAPPLE(SizeI length, Void* pointer);
        delegate void FlushVertexArrayRangeAPPLE(SizeI length, Void* pointer);
        delegate void VertexArrayParameteriAPPLE(VertexArrayPNameAPPLE pname, Int32 param);
        delegate void DrawBuffersATI(SizeI n, DrawBufferModeATI* bufs);
        delegate void ProgramNamedParameter4fNV(UInt32 id, SizeI len, UInt8* name, Float32 x, Float32 y, Float32 z, Float32 w);
        delegate void ProgramNamedParameter4dNV(UInt32 id, SizeI len, UInt8* name, Float64 x, Float64 y, Float64 z, Float64 w);
        delegate void ProgramNamedParameter4fvNV(UInt32 id, SizeI len, UInt8* name, Float32* v);
        delegate void ProgramNamedParameter4dvNV(UInt32 id, SizeI len, UInt8* name, Float64* v);
        delegate void GetProgramNamedParameterfvNV(UInt32 id, SizeI len, UInt8* name, Float32* @params);
        delegate void GetProgramNamedParameterdvNV(UInt32 id, SizeI len, UInt8* name, Float64* @params);
        delegate void Vertex2hNV(Half16NV x, Half16NV y);
        delegate void Vertex2hvNV(Half16NV* v);
        delegate void Vertex3hNV(Half16NV x, Half16NV y, Half16NV z);
        delegate void Vertex3hvNV(Half16NV* v);
        delegate void Vertex4hNV(Half16NV x, Half16NV y, Half16NV z, Half16NV w);
        delegate void Vertex4hvNV(Half16NV* v);
        delegate void Normal3hNV(Half16NV nx, Half16NV ny, Half16NV nz);
        delegate void Normal3hvNV(Half16NV* v);
        delegate void Color3hNV(Half16NV red, Half16NV green, Half16NV blue);
        delegate void Color3hvNV(Half16NV* v);
        delegate void Color4hNV(Half16NV red, Half16NV green, Half16NV blue, Half16NV alpha);
        delegate void Color4hvNV(Half16NV* v);
        delegate void TexCoord1hNV(Half16NV s);
        delegate void TexCoord1hvNV(Half16NV* v);
        delegate void TexCoord2hNV(Half16NV s, Half16NV t);
        delegate void TexCoord2hvNV(Half16NV* v);
        delegate void TexCoord3hNV(Half16NV s, Half16NV t, Half16NV r);
        delegate void TexCoord3hvNV(Half16NV* v);
        delegate void TexCoord4hNV(Half16NV s, Half16NV t, Half16NV r, Half16NV q);
        delegate void TexCoord4hvNV(Half16NV* v);
        delegate void MultiTexCoord1hNV(TextureUnit target, Half16NV s);
        delegate void MultiTexCoord1hvNV(TextureUnit target, Half16NV* v);
        delegate void MultiTexCoord2hNV(TextureUnit target, Half16NV s, Half16NV t);
        delegate void MultiTexCoord2hvNV(TextureUnit target, Half16NV* v);
        delegate void MultiTexCoord3hNV(TextureUnit target, Half16NV s, Half16NV t, Half16NV r);
        delegate void MultiTexCoord3hvNV(TextureUnit target, Half16NV* v);
        delegate void MultiTexCoord4hNV(TextureUnit target, Half16NV s, Half16NV t, Half16NV r, Half16NV q);
        delegate void MultiTexCoord4hvNV(TextureUnit target, Half16NV* v);
        delegate void FogCoordhNV(Half16NV fog);
        delegate void FogCoordhvNV(Half16NV* fog);
        delegate void SecondaryColor3hNV(Half16NV red, Half16NV green, Half16NV blue);
        delegate void SecondaryColor3hvNV(Half16NV* v);
        delegate void VertexWeighthNV(Half16NV weight);
        delegate void VertexWeighthvNV(Half16NV* weight);
        delegate void VertexAttrib1hNV(UInt32 index, Half16NV x);
        delegate void VertexAttrib1hvNV(UInt32 index, Half16NV* v);
        delegate void VertexAttrib2hNV(UInt32 index, Half16NV x, Half16NV y);
        delegate void VertexAttrib2hvNV(UInt32 index, Half16NV* v);
        delegate void VertexAttrib3hNV(UInt32 index, Half16NV x, Half16NV y, Half16NV z);
        delegate void VertexAttrib3hvNV(UInt32 index, Half16NV* v);
        delegate void VertexAttrib4hNV(UInt32 index, Half16NV x, Half16NV y, Half16NV z, Half16NV w);
        delegate void VertexAttrib4hvNV(UInt32 index, Half16NV* v);
        delegate void VertexAttribs1hvNV(UInt32 index, SizeI n, Half16NV* v);
        delegate void VertexAttribs2hvNV(UInt32 index, SizeI n, Half16NV* v);
        delegate void VertexAttribs3hvNV(UInt32 index, SizeI n, Half16NV* v);
        delegate void VertexAttribs4hvNV(UInt32 index, SizeI n, Half16NV* v);
        delegate void PixelDataRangeNV(PixelDataRangeTargetNV target, SizeI length, Void* pointer);
        delegate void FlushPixelDataRangeNV(PixelDataRangeTargetNV target);
        delegate void PrimitiveRestartNV();
        delegate void PrimitiveRestartIndexNV(UInt32 index);
        delegate VoidPointer MapObjectBufferATI(UInt32 buffer);
        delegate void UnmapObjectBufferATI(UInt32 buffer);
        delegate void StencilOpSeparateATI(StencilFaceDirection face, StencilOp sfail, StencilOp dpfail, StencilOp dppass);
        delegate void StencilFuncSeparateATI(StencilFunction frontfunc, StencilFunction backfunc, ClampedStencilValue @ref, MaskedStencilValue mask);
        delegate void VertexAttribArrayObjectATI(UInt32 index, Int32 size, VertexAttribPointerTypeARB type, Boolean normalized, SizeI stride, UInt32 buffer, UInt32 offset);
        delegate void GetVertexAttribArrayObjectfvATI(UInt32 index, ArrayObjectPNameATI pname, Float32* @params);
        delegate void GetVertexAttribArrayObjectivATI(UInt32 index, ArrayObjectPNameATI pname, Int32* @params);
        delegate void DepthBoundsEXT(ClampedFloat64 zmin, ClampedFloat64 zmax);
        delegate void BlendEquationSeparateEXT(BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha);
        delegate Boolean IsRenderbufferEXT(UInt32 renderbuffer);
        delegate void BindRenderbufferEXT(RenderbufferTarget target, UInt32 renderbuffer);
        delegate void DeleteRenderbuffersEXT(SizeI n, UInt32* renderbuffers);
        delegate void GenRenderbuffersEXT(SizeI n, UInt32* renderbuffers);
        delegate void RenderbufferStorageEXT(RenderbufferTarget target, GLenum internalformat, SizeI width, SizeI height);
        delegate void GetRenderbufferParameterivEXT(RenderbufferTarget target, GLenum pname, Int32* @params);
        delegate Boolean IsFramebufferEXT(UInt32 framebuffer);
        delegate void BindFramebufferEXT(FramebufferTarget target, UInt32 framebuffer);
        delegate void DeleteFramebuffersEXT(SizeI n, UInt32* framebuffers);
        delegate void GenFramebuffersEXT(SizeI n, UInt32* framebuffers);
        delegate GLenum CheckFramebufferStatusEXT(FramebufferTarget target);
        delegate void FramebufferTexture1DEXT(FramebufferTarget target, FramebufferAttachment attachment, GLenum textarget, UInt32 texture, Int32 level);
        delegate void FramebufferTexture2DEXT(FramebufferTarget target, FramebufferAttachment attachment, GLenum textarget, UInt32 texture, Int32 level);
        delegate void FramebufferTexture3DEXT(FramebufferTarget target, FramebufferAttachment attachment, GLenum textarget, UInt32 texture, Int32 level, Int32 zoffset);
        delegate void FramebufferRenderbufferEXT(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, UInt32 renderbuffer);
        delegate void GetFramebufferAttachmentParameterivEXT(FramebufferTarget target, FramebufferAttachment attachment, GLenum pname, Int32* @params);
        delegate void GenerateMipmapEXT(GLenum target);
        delegate void StringMarkerGREMEDY(SizeI len, Void* @string);
        delegate void StencilClearTagEXT(SizeI stencilTagBits, UInt32 stencilClearTag);
        delegate void BlitFramebufferEXT(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, ClearBufferMask mask, GLenum filter);
        delegate void RenderbufferStorageMultisampleEXT(GLenum target, SizeI samples, GLenum internalformat, SizeI width, SizeI height);
        delegate void GetQueryObjecti64vEXT(UInt32 id, GLenum pname, Int64EXT* @params);
        delegate void GetQueryObjectui64vEXT(UInt32 id, GLenum pname, UInt64EXT* @params);
        delegate void ProgramEnvParameters4fvEXT(ProgramTargetARB target, UInt32 index, SizeI count, Float32* @params);
        delegate void ProgramLocalParameters4fvEXT(ProgramTargetARB target, UInt32 index, SizeI count, Float32* @params);
        delegate void BufferParameteriAPPLE(GLenum target, GLenum pname, Int32 param);
        delegate void FlushMappedBufferRangeAPPLE(GLenum target, BufferOffset offset, BufferSize size);
        delegate void ProgramLocalParameterI4iNV(ProgramTarget target, UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w);
        delegate void ProgramLocalParameterI4ivNV(ProgramTarget target, UInt32 index, Int32* @params);
        delegate void ProgramLocalParametersI4ivNV(ProgramTarget target, UInt32 index, SizeI count, Int32* @params);
        delegate void ProgramLocalParameterI4uiNV(ProgramTarget target, UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w);
        delegate void ProgramLocalParameterI4uivNV(ProgramTarget target, UInt32 index, UInt32* @params);
        delegate void ProgramLocalParametersI4uivNV(ProgramTarget target, UInt32 index, SizeI count, UInt32* @params);
        delegate void ProgramEnvParameterI4iNV(ProgramTarget target, UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w);
        delegate void ProgramEnvParameterI4ivNV(ProgramTarget target, UInt32 index, Int32* @params);
        delegate void ProgramEnvParametersI4ivNV(ProgramTarget target, UInt32 index, SizeI count, Int32* @params);
        delegate void ProgramEnvParameterI4uiNV(ProgramTarget target, UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w);
        delegate void ProgramEnvParameterI4uivNV(ProgramTarget target, UInt32 index, UInt32* @params);
        delegate void ProgramEnvParametersI4uivNV(ProgramTarget target, UInt32 index, SizeI count, UInt32* @params);
        delegate void GetProgramLocalParameterIivNV(ProgramTarget target, UInt32 index, Int32* @params);
        delegate void GetProgramLocalParameterIuivNV(ProgramTarget target, UInt32 index, UInt32* @params);
        delegate void GetProgramEnvParameterIivNV(ProgramTarget target, UInt32 index, Int32* @params);
        delegate void GetProgramEnvParameterIuivNV(ProgramTarget target, UInt32 index, UInt32* @params);
        delegate void ProgramVertexLimitNV(ProgramTarget target, Int32 limit);
        delegate void FramebufferTextureEXT(FramebufferTarget target, FramebufferAttachment attachment, Texture texture, CheckedInt32 level);
        delegate void FramebufferTextureLayerEXT(FramebufferTarget target, FramebufferAttachment attachment, Texture texture, CheckedInt32 level, CheckedInt32 layer);
        delegate void FramebufferTextureFaceEXT(FramebufferTarget target, FramebufferAttachment attachment, Texture texture, CheckedInt32 level, TextureTarget face);
        delegate void ProgramParameteriEXT(UInt32 program, ProgramParameterPName pname, Int32 value);
        delegate void VertexAttribI1iEXT(UInt32 index, Int32 x);
        delegate void VertexAttribI2iEXT(UInt32 index, Int32 x, Int32 y);
        delegate void VertexAttribI3iEXT(UInt32 index, Int32 x, Int32 y, Int32 z);
        delegate void VertexAttribI4iEXT(UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w);
        delegate void VertexAttribI1uiEXT(UInt32 index, UInt32 x);
        delegate void VertexAttribI2uiEXT(UInt32 index, UInt32 x, UInt32 y);
        delegate void VertexAttribI3uiEXT(UInt32 index, UInt32 x, UInt32 y, UInt32 z);
        delegate void VertexAttribI4uiEXT(UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w);
        delegate void VertexAttribI1ivEXT(UInt32 index, Int32* v);
        delegate void VertexAttribI2ivEXT(UInt32 index, Int32* v);
        delegate void VertexAttribI3ivEXT(UInt32 index, Int32* v);
        delegate void VertexAttribI4ivEXT(UInt32 index, Int32* v);
        delegate void VertexAttribI1uivEXT(UInt32 index, UInt32* v);
        delegate void VertexAttribI2uivEXT(UInt32 index, UInt32* v);
        delegate void VertexAttribI3uivEXT(UInt32 index, UInt32* v);
        delegate void VertexAttribI4uivEXT(UInt32 index, UInt32* v);
        delegate void VertexAttribI4bvEXT(UInt32 index, Int8* v);
        delegate void VertexAttribI4svEXT(UInt32 index, Int16* v);
        delegate void VertexAttribI4ubvEXT(UInt32 index, UInt8* v);
        delegate void VertexAttribI4usvEXT(UInt32 index, UInt16* v);
        delegate void VertexAttribIPointerEXT(UInt32 index, Int32 size, VertexAttribEnum type, SizeI stride, Void* pointer);
        delegate void GetVertexAttribIivEXT(UInt32 index, VertexAttribEnum pname, Int32* @params);
        delegate void GetVertexAttribIuivEXT(UInt32 index, VertexAttribEnum pname, UInt32* @params);
        delegate void GetUniformuivEXT(UInt32 program, Int32 location, UInt32* @params);
        delegate void BindFragDataLocationEXT(UInt32 program, UInt32 color, Char* name);
        delegate Int32 GetFragDataLocationEXT(UInt32 program, Char* name);
        delegate void Uniform1uiEXT(Int32 location, UInt32 v0);
        delegate void Uniform2uiEXT(Int32 location, UInt32 v0, UInt32 v1);
        delegate void Uniform3uiEXT(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2);
        delegate void Uniform4uiEXT(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3);
        delegate void Uniform1uivEXT(Int32 location, SizeI count, UInt32* value);
        delegate void Uniform2uivEXT(Int32 location, SizeI count, UInt32* value);
        delegate void Uniform3uivEXT(Int32 location, SizeI count, UInt32* value);
        delegate void Uniform4uivEXT(Int32 location, SizeI count, UInt32* value);
        delegate void DrawArraysInstancedEXT(BeginMode mode, Int32 start, SizeI count, SizeI primcount);
        delegate void DrawElementsInstancedEXT(BeginMode mode, SizeI count, DrawElementsType type, Void* indices, SizeI primcount);
        delegate void TexBufferEXT(TextureTarget target, GLenum internalformat, UInt32 buffer);
        delegate void DepthRangedNV(Float64 zNear, Float64 zFar);
        delegate void ClearDepthdNV(Float64 depth);
        delegate void DepthBoundsdNV(Float64 zmin, Float64 zmax);
        delegate void RenderbufferStorageMultisampleCoverageNV(RenderbufferTarget target, SizeI coverageSamples, SizeI colorSamples, PixelInternalFormat internalformat, SizeI width, SizeI height);
        delegate void ProgramBufferParametersfvNV(ProgramTarget target, UInt32 buffer, UInt32 index, SizeI count, Float32* @params);
        delegate void ProgramBufferParametersIivNV(ProgramTarget target, UInt32 buffer, UInt32 index, SizeI count, Int32* @params);
        delegate void ProgramBufferParametersIuivNV(ProgramTarget target, UInt32 buffer, UInt32 index, SizeI count, UInt32* @params);
        delegate void ColorMaskIndexedEXT(UInt32 index, Boolean r, Boolean g, Boolean b, Boolean a);
        delegate void GetBooleanIndexedvEXT(GLenum target, UInt32 index, Boolean* data);
        delegate void GetIntegerIndexedvEXT(GLenum target, UInt32 index, Int32* data);
        delegate void EnableIndexedEXT(GLenum target, UInt32 index);
        delegate void DisableIndexedEXT(GLenum target, UInt32 index);
        delegate Boolean IsEnabledIndexedEXT(GLenum target, UInt32 index);
        delegate void BeginTransformFeedbackNV(GLenum primitiveMode);
        delegate void EndTransformFeedbackNV();
        delegate void TransformFeedbackAttribsNV(UInt32 count, Int32* attribs, GLenum bufferMode);
        delegate void BindBufferRangeNV(GLenum target, UInt32 index, UInt32 buffer, BufferOffset offset, BufferSize size);
        delegate void BindBufferOffsetNV(GLenum target, UInt32 index, UInt32 buffer, BufferOffset offset);
        delegate void BindBufferBaseNV(GLenum target, UInt32 index, UInt32 buffer);
        delegate void TransformFeedbackVaryingsNV(UInt32 program, SizeI count, Int32* locations, GLenum bufferMode);
        delegate void ActiveVaryingNV(UInt32 program, Char* name);
        delegate Int32 GetVaryingLocationNV(UInt32 program, Char* name);
        delegate void GetActiveVaryingNV(UInt32 program, UInt32 index, SizeI bufSize, SizeI* length, SizeI* size, GLenum* type, Char* name);
        delegate void GetTransformFeedbackVaryingNV(UInt32 program, UInt32 index, Int32* location);
        delegate void UniformBufferEXT(UInt32 program, Int32 location, UInt32 buffer);
        delegate Int32 GetUniformBufferSizeEXT(UInt32 program, Int32 location);
        delegate BufferOffset GetUniformOffsetEXT(UInt32 program, Int32 location);
        delegate void TexParameterIivEXT(TextureTarget target, TextureParameterName pname, Int32* @params);
        delegate void TexParameterIuivEXT(TextureTarget target, TextureParameterName pname, UInt32* @params);
        delegate void GetTexParameterIivEXT(TextureTarget target, GetTextureParameter pname, Int32* @params);
        delegate void GetTexParameterIuivEXT(TextureTarget target, GetTextureParameter pname, UInt32* @params);
        delegate void ClearColorIiEXT(Int32 red, Int32 green, Int32 blue, Int32 alpha);
        delegate void ClearColorIuiEXT(UInt32 red, UInt32 green, UInt32 blue, UInt32 alpha);
    }
}
