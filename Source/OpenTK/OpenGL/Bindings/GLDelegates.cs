namespace OpenTK.OpenGL
{
    using GLsizei = System.Int32;
    using GLsizeiptr = System.IntPtr;
    using GLintptr = System.IntPtr;
    using GLboolean = System.Boolean;
    using GLbitfield = System.Int32;
    using GLchar = System.Char;
    using GLbyte = System.Byte;
    using GLubyte = System.Byte;
    using GLshort = System.Int16;
    using GLushort = System.Int16;
    using GLint = System.Int32;
    using GLuint = System.Int32;
    using GLfloat = System.Single;
    using GLclampf = System.Single;
    using GLdouble = System.Double;
    using GLclampd = System.Double;
    using GLstring = System.String;
    using GLsizeiptrARB = System.IntPtr;
    using GLintptrARB = System.IntPtr;
    using GLhandleARB = System.Int32;
    using GLhalfARB = System.Int16;
    using GLhalfNV = System.Int16;
    using GLcharARB = System.Char;
    using GLint64EXT = System.Int64;
    using GLuint64EXT = System.Int64;
    using GLint64 = System.Int64;
    using GLuint64 = System.Int64;

    internal static class Delegates
    {
        internal delegate void NewList(GLuint list, GL.Enums.ListMode mode);
        internal delegate void EndList();
        internal delegate void CallList(GLuint list);
        internal unsafe delegate void CallLists(GLsizei n, GL.Enums.ListNameType type, void* lists);
        internal delegate void DeleteLists(GLuint list, GLsizei range);
        internal delegate GLuint GenLists(GLsizei range);
        internal delegate void ListBase(GLuint @base);
        internal delegate void Begin(GL.Enums.BeginMode mode);
        internal unsafe delegate void Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, GLubyte* bitmap);
        internal delegate void Color3b(GLbyte red, GLbyte green, GLbyte blue);
        internal unsafe delegate void Color3bv(GLbyte* v);
        internal delegate void Color3d(GLdouble red, GLdouble green, GLdouble blue);
        internal unsafe delegate void Color3dv(GLdouble* v);
        internal delegate void Color3f(GLfloat red, GLfloat green, GLfloat blue);
        internal unsafe delegate void Color3fv(GLfloat* v);
        internal delegate void Color3i(GLint red, GLint green, GLint blue);
        internal unsafe delegate void Color3iv(GLint* v);
        internal delegate void Color3s(GLshort red, GLshort green, GLshort blue);
        internal unsafe delegate void Color3sv(GLshort* v);
        internal delegate void Color3ub(GLubyte red, GLubyte green, GLubyte blue);
        internal unsafe delegate void Color3ubv(GLubyte* v);
        internal delegate void Color3ui(GLuint red, GLuint green, GLuint blue);
        internal unsafe delegate void Color3uiv(GLuint* v);
        internal delegate void Color3us(GLushort red, GLushort green, GLushort blue);
        internal unsafe delegate void Color3usv(GLushort* v);
        internal delegate void Color4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
        internal unsafe delegate void Color4bv(GLbyte* v);
        internal delegate void Color4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
        internal unsafe delegate void Color4dv(GLdouble* v);
        internal delegate void Color4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
        internal unsafe delegate void Color4fv(GLfloat* v);
        internal delegate void Color4i(GLint red, GLint green, GLint blue, GLint alpha);
        internal unsafe delegate void Color4iv(GLint* v);
        internal delegate void Color4s(GLshort red, GLshort green, GLshort blue, GLshort alpha);
        internal unsafe delegate void Color4sv(GLshort* v);
        internal delegate void Color4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
        internal unsafe delegate void Color4ubv(GLubyte* v);
        internal delegate void Color4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha);
        internal unsafe delegate void Color4uiv(GLuint* v);
        internal delegate void Color4us(GLushort red, GLushort green, GLushort blue, GLushort alpha);
        internal unsafe delegate void Color4usv(GLushort* v);
        internal delegate void EdgeFlag(GL.Enums.Boolean flag);
        internal unsafe delegate void EdgeFlagv(GL.Enums.Boolean* flag);
        internal delegate void End();
        internal delegate void Indexd(GLdouble c);
        internal unsafe delegate void Indexdv(GLdouble* c);
        internal delegate void Indexf(GLfloat c);
        internal unsafe delegate void Indexfv(GLfloat* c);
        internal delegate void Indexi(GLint c);
        internal unsafe delegate void Indexiv(GLint* c);
        internal delegate void Indexs(GLshort c);
        internal unsafe delegate void Indexsv(GLshort* c);
        internal delegate void Normal3b(GLbyte nx, GLbyte ny, GLbyte nz);
        internal unsafe delegate void Normal3bv(GLbyte* v);
        internal delegate void Normal3d(GLdouble nx, GLdouble ny, GLdouble nz);
        internal unsafe delegate void Normal3dv(GLdouble* v);
        internal delegate void Normal3f(GLfloat nx, GLfloat ny, GLfloat nz);
        internal unsafe delegate void Normal3fv(GLfloat* v);
        internal delegate void Normal3i(GLint nx, GLint ny, GLint nz);
        internal unsafe delegate void Normal3iv(GLint* v);
        internal delegate void Normal3s(GLshort nx, GLshort ny, GLshort nz);
        internal unsafe delegate void Normal3sv(GLshort* v);
        internal delegate void RasterPos2d(GLdouble x, GLdouble y);
        internal unsafe delegate void RasterPos2dv(GLdouble* v);
        internal delegate void RasterPos2f(GLfloat x, GLfloat y);
        internal unsafe delegate void RasterPos2fv(GLfloat* v);
        internal delegate void RasterPos2i(GLint x, GLint y);
        internal unsafe delegate void RasterPos2iv(GLint* v);
        internal delegate void RasterPos2s(GLshort x, GLshort y);
        internal unsafe delegate void RasterPos2sv(GLshort* v);
        internal delegate void RasterPos3d(GLdouble x, GLdouble y, GLdouble z);
        internal unsafe delegate void RasterPos3dv(GLdouble* v);
        internal delegate void RasterPos3f(GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void RasterPos3fv(GLfloat* v);
        internal delegate void RasterPos3i(GLint x, GLint y, GLint z);
        internal unsafe delegate void RasterPos3iv(GLint* v);
        internal delegate void RasterPos3s(GLshort x, GLshort y, GLshort z);
        internal unsafe delegate void RasterPos3sv(GLshort* v);
        internal delegate void RasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        internal unsafe delegate void RasterPos4dv(GLdouble* v);
        internal delegate void RasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        internal unsafe delegate void RasterPos4fv(GLfloat* v);
        internal delegate void RasterPos4i(GLint x, GLint y, GLint z, GLint w);
        internal unsafe delegate void RasterPos4iv(GLint* v);
        internal delegate void RasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
        internal unsafe delegate void RasterPos4sv(GLshort* v);
        internal delegate void Rectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
        internal unsafe delegate void Rectdv(GLdouble* v1, GLdouble* v2);
        internal delegate void Rectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
        internal unsafe delegate void Rectfv(GLfloat* v1, GLfloat* v2);
        internal delegate void Recti(GLint x1, GLint y1, GLint x2, GLint y2);
        internal unsafe delegate void Rectiv(GLint* v1, GLint* v2);
        internal delegate void Rects(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
        internal unsafe delegate void Rectsv(GLshort* v1, GLshort* v2);
        internal delegate void TexCoord1d(GLdouble s);
        internal unsafe delegate void TexCoord1dv(GLdouble* v);
        internal delegate void TexCoord1f(GLfloat s);
        internal unsafe delegate void TexCoord1fv(GLfloat* v);
        internal delegate void TexCoord1i(GLint s);
        internal unsafe delegate void TexCoord1iv(GLint* v);
        internal delegate void TexCoord1s(GLshort s);
        internal unsafe delegate void TexCoord1sv(GLshort* v);
        internal delegate void TexCoord2d(GLdouble s, GLdouble t);
        internal unsafe delegate void TexCoord2dv(GLdouble* v);
        internal delegate void TexCoord2f(GLfloat s, GLfloat t);
        internal unsafe delegate void TexCoord2fv(GLfloat* v);
        internal delegate void TexCoord2i(GLint s, GLint t);
        internal unsafe delegate void TexCoord2iv(GLint* v);
        internal delegate void TexCoord2s(GLshort s, GLshort t);
        internal unsafe delegate void TexCoord2sv(GLshort* v);
        internal delegate void TexCoord3d(GLdouble s, GLdouble t, GLdouble r);
        internal unsafe delegate void TexCoord3dv(GLdouble* v);
        internal delegate void TexCoord3f(GLfloat s, GLfloat t, GLfloat r);
        internal unsafe delegate void TexCoord3fv(GLfloat* v);
        internal delegate void TexCoord3i(GLint s, GLint t, GLint r);
        internal unsafe delegate void TexCoord3iv(GLint* v);
        internal delegate void TexCoord3s(GLshort s, GLshort t, GLshort r);
        internal unsafe delegate void TexCoord3sv(GLshort* v);
        internal delegate void TexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
        internal unsafe delegate void TexCoord4dv(GLdouble* v);
        internal delegate void TexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
        internal unsafe delegate void TexCoord4fv(GLfloat* v);
        internal delegate void TexCoord4i(GLint s, GLint t, GLint r, GLint q);
        internal unsafe delegate void TexCoord4iv(GLint* v);
        internal delegate void TexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q);
        internal unsafe delegate void TexCoord4sv(GLshort* v);
        internal delegate void Vertex2d(GLdouble x, GLdouble y);
        internal unsafe delegate void Vertex2dv(GLdouble* v);
        internal delegate void Vertex2f(GLfloat x, GLfloat y);
        internal unsafe delegate void Vertex2fv(GLfloat* v);
        internal delegate void Vertex2i(GLint x, GLint y);
        internal unsafe delegate void Vertex2iv(GLint* v);
        internal delegate void Vertex2s(GLshort x, GLshort y);
        internal unsafe delegate void Vertex2sv(GLshort* v);
        internal delegate void Vertex3d(GLdouble x, GLdouble y, GLdouble z);
        internal unsafe delegate void Vertex3dv(GLdouble* v);
        internal delegate void Vertex3f(GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void Vertex3fv(GLfloat* v);
        internal delegate void Vertex3i(GLint x, GLint y, GLint z);
        internal unsafe delegate void Vertex3iv(GLint* v);
        internal delegate void Vertex3s(GLshort x, GLshort y, GLshort z);
        internal unsafe delegate void Vertex3sv(GLshort* v);
        internal delegate void Vertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        internal unsafe delegate void Vertex4dv(GLdouble* v);
        internal delegate void Vertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        internal unsafe delegate void Vertex4fv(GLfloat* v);
        internal delegate void Vertex4i(GLint x, GLint y, GLint z, GLint w);
        internal unsafe delegate void Vertex4iv(GLint* v);
        internal delegate void Vertex4s(GLshort x, GLshort y, GLshort z, GLshort w);
        internal unsafe delegate void Vertex4sv(GLshort* v);
        internal unsafe delegate void ClipPlane(GL.Enums.ClipPlaneName plane, GLdouble* equation);
        internal delegate void ColorMaterial(GL.Enums.MaterialFace face, GL.Enums.ColorMaterialParameter mode);
        internal delegate void CullFace(GL.Enums.CullFaceMode mode);
        internal delegate void Fogf(GL.Enums.FogParameter pname, GLfloat param);
        internal unsafe delegate void Fogfv(GL.Enums.FogParameter pname, GLfloat* @params);
        internal delegate void Fogi(GL.Enums.FogParameter pname, GLint param);
        internal unsafe delegate void Fogiv(GL.Enums.FogParameter pname, GLint* @params);
        internal delegate void FrontFace(GL.Enums.FrontFaceDirection mode);
        internal delegate void Hint(GL.Enums.HintTarget target, GL.Enums.HintMode mode);
        internal delegate void Lightf(GL.Enums.LightName light, GL.Enums.LightParameter pname, GLfloat param);
        internal unsafe delegate void Lightfv(GL.Enums.LightName light, GL.Enums.LightParameter pname, GLfloat* @params);
        internal delegate void Lighti(GL.Enums.LightName light, GL.Enums.LightParameter pname, GLint param);
        internal unsafe delegate void Lightiv(GL.Enums.LightName light, GL.Enums.LightParameter pname, GLint* @params);
        internal delegate void LightModelf(GL.Enums.LightModelParameter pname, GLfloat param);
        internal unsafe delegate void LightModelfv(GL.Enums.LightModelParameter pname, GLfloat* @params);
        internal delegate void LightModeli(GL.Enums.LightModelParameter pname, GLint param);
        internal unsafe delegate void LightModeliv(GL.Enums.LightModelParameter pname, GLint* @params);
        internal delegate void LineStipple(GLint factor, GLushort pattern);
        internal delegate void LineWidth(GLfloat width);
        internal delegate void Materialf(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLfloat param);
        internal unsafe delegate void Materialfv(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLfloat* @params);
        internal delegate void Materiali(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLint param);
        internal unsafe delegate void Materialiv(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLint* @params);
        internal delegate void PointSize(GLfloat size);
        internal delegate void PolygonMode(GL.Enums.MaterialFace face, GL.Enums.PolygonMode mode);
        internal unsafe delegate void PolygonStipple(GLubyte* mask);
        internal delegate void Scissor(GLint x, GLint y, GLsizei width, GLsizei height);
        internal delegate void ShadeModel(GL.Enums.ShadingModel mode);
        internal delegate void TexParameterf(GL.Enums.TextureTarget target, GL.Enums.TextureParameterName pname, GLfloat param);
        internal unsafe delegate void TexParameterfv(GL.Enums.TextureTarget target, GL.Enums.TextureParameterName pname, GLfloat* @params);
        internal delegate void TexParameteri(GL.Enums.TextureTarget target, GL.Enums.TextureParameterName pname, GLint param);
        internal unsafe delegate void TexParameteriv(GL.Enums.TextureTarget target, GL.Enums.TextureParameterName pname, GLint* @params);
        internal unsafe delegate void TexImage1D(GL.Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLint border, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels);
        internal unsafe delegate void TexImage2D(GL.Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels);
        internal delegate void TexEnvf(GL.Enums.TextureEnvTarget target, GL.Enums.TextureEnvParameter pname, GLfloat param);
        internal unsafe delegate void TexEnvfv(GL.Enums.TextureEnvTarget target, GL.Enums.TextureEnvParameter pname, GLfloat* @params);
        internal delegate void TexEnvi(GL.Enums.TextureEnvTarget target, GL.Enums.TextureEnvParameter pname, GLint param);
        internal unsafe delegate void TexEnviv(GL.Enums.TextureEnvTarget target, GL.Enums.TextureEnvParameter pname, GLint* @params);
        internal delegate void TexGend(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, GLdouble param);
        internal unsafe delegate void TexGendv(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, GLdouble* @params);
        internal delegate void TexGenf(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, GLfloat param);
        internal unsafe delegate void TexGenfv(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, GLfloat* @params);
        internal delegate void TexGeni(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, GLint param);
        internal unsafe delegate void TexGeniv(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, GLint* @params);
        internal unsafe delegate void FeedbackBuffer(GLsizei size, GL.Enums.FeedbackType type, GLfloat* buffer);
        internal unsafe delegate void SelectBuffer(GLsizei size, GLuint* buffer);
        internal delegate GLint RenderMode(GL.Enums.RenderingMode mode);
        internal delegate void InitNames();
        internal delegate void LoadName(GLuint name);
        internal delegate void PassThrough(GLfloat token);
        internal delegate void PopName();
        internal delegate void PushName(GLuint name);
        internal delegate void DrawBuffer(GL.Enums.DrawBufferMode mode);
        internal delegate void Clear(GL.Enums.ClearBufferMask mask);
        internal delegate void ClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
        internal delegate void ClearIndex(GLfloat c);
        internal delegate void ClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
        internal delegate void ClearStencil(GLint s);
        internal delegate void ClearDepth(GLclampd depth);
        internal delegate void StencilMask(GLuint mask);
        internal delegate void ColorMask(GL.Enums.Boolean red, GL.Enums.Boolean green, GL.Enums.Boolean blue, GL.Enums.Boolean alpha);
        internal delegate void DepthMask(GL.Enums.Boolean flag);
        internal delegate void IndexMask(GLuint mask);
        internal delegate void Accum(GL.Enums.AccumOp op, GLfloat value);
        internal delegate void Disable(GL.Enums.EnableCap cap);
        internal delegate void Enable(GL.Enums.EnableCap cap);
        internal delegate void Finish();
        internal delegate void Flush();
        internal delegate void PopAttrib();
        internal delegate void PushAttrib(GL.Enums.AttribMask mask);
        internal unsafe delegate void Map1d(GL.Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint stride, GLint order, GLdouble* points);
        internal unsafe delegate void Map1f(GL.Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint stride, GLint order, GLfloat* points);
        internal unsafe delegate void Map2d(GL.Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble* points);
        internal unsafe delegate void Map2f(GL.Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat* points);
        internal delegate void MapGrid1d(GLint un, GLdouble u1, GLdouble u2);
        internal delegate void MapGrid1f(GLint un, GLfloat u1, GLfloat u2);
        internal delegate void MapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
        internal delegate void MapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
        internal delegate void EvalCoord1d(GLdouble u);
        internal unsafe delegate void EvalCoord1dv(GLdouble* u);
        internal delegate void EvalCoord1f(GLfloat u);
        internal unsafe delegate void EvalCoord1fv(GLfloat* u);
        internal delegate void EvalCoord2d(GLdouble u, GLdouble v);
        internal unsafe delegate void EvalCoord2dv(GLdouble* u);
        internal delegate void EvalCoord2f(GLfloat u, GLfloat v);
        internal unsafe delegate void EvalCoord2fv(GLfloat* u);
        internal delegate void EvalMesh1(GL.Enums.MeshMode1 mode, GLint i1, GLint i2);
        internal delegate void EvalPoint1(GLint i);
        internal delegate void EvalMesh2(GL.Enums.MeshMode2 mode, GLint i1, GLint i2, GLint j1, GLint j2);
        internal delegate void EvalPoint2(GLint i, GLint j);
        internal delegate void AlphaFunc(GL.Enums.AlphaFunction func, GLclampf @ref);
        internal delegate void BlendFunc(GL.Enums.BlendingFactorSrc sfactor, GL.Enums.BlendingFactorDest dfactor);
        internal delegate void LogicOp(GL.Enums.LogicOp opcode);
        internal delegate void StencilFunc(GL.Enums.StencilFunction func, GLint @ref, GLuint mask);
        internal delegate void StencilOp(GL.Enums.StencilOp fail, GL.Enums.StencilOp zfail, GL.Enums.StencilOp zpass);
        internal delegate void DepthFunc(GL.Enums.DepthFunction func);
        internal delegate void PixelZoom(GLfloat xfactor, GLfloat yfactor);
        internal delegate void PixelTransferf(GL.Enums.PixelTransferParameter pname, GLfloat param);
        internal delegate void PixelTransferi(GL.Enums.PixelTransferParameter pname, GLint param);
        internal delegate void PixelStoref(GL.Enums.PixelStoreParameter pname, GLfloat param);
        internal delegate void PixelStorei(GL.Enums.PixelStoreParameter pname, GLint param);
        internal unsafe delegate void PixelMapfv(GL.Enums.PixelMap map, GLint mapsize, GLfloat* values);
        internal unsafe delegate void PixelMapuiv(GL.Enums.PixelMap map, GLint mapsize, GLuint* values);
        internal unsafe delegate void PixelMapusv(GL.Enums.PixelMap map, GLint mapsize, GLushort* values);
        internal delegate void ReadBuffer(GL.Enums.ReadBufferMode mode);
        internal delegate void CopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GL.Enums.PixelCopyType type);
        internal unsafe delegate void ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels);
        internal unsafe delegate void DrawPixels(GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels);
        internal unsafe delegate void GetBooleanv(GL.Enums.GetPName pname, GL.Enums.Boolean* @params);
        internal unsafe delegate void GetClipPlane(GL.Enums.ClipPlaneName plane, GLdouble* equation);
        internal unsafe delegate void GetDoublev(GL.Enums.GetPName pname, GLdouble* @params);
        internal delegate GL.Enums.GLenum GetError();
        internal unsafe delegate void GetFloatv(GL.Enums.GetPName pname, GLfloat* @params);
        internal unsafe delegate void GetIntegerv(GL.Enums.GetPName pname, GLint* @params);
        internal unsafe delegate void GetLightfv(GL.Enums.LightName light, GL.Enums.LightParameter pname, GLfloat* @params);
        internal unsafe delegate void GetLightiv(GL.Enums.LightName light, GL.Enums.LightParameter pname, GLint* @params);
        internal unsafe delegate void GetMapdv(GL.Enums.MapTarget target, GL.Enums.GetMapQuery query, GLdouble* v);
        internal unsafe delegate void GetMapfv(GL.Enums.MapTarget target, GL.Enums.GetMapQuery query, GLfloat* v);
        internal unsafe delegate void GetMapiv(GL.Enums.MapTarget target, GL.Enums.GetMapQuery query, GLint* v);
        internal unsafe delegate void GetMaterialfv(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLfloat* @params);
        internal unsafe delegate void GetMaterialiv(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLint* @params);
        internal unsafe delegate void GetPixelMapfv(GL.Enums.PixelMap map, GLfloat* values);
        internal unsafe delegate void GetPixelMapuiv(GL.Enums.PixelMap map, GLuint* values);
        internal unsafe delegate void GetPixelMapusv(GL.Enums.PixelMap map, GLushort* values);
        internal unsafe delegate void GetPolygonStipple(GLubyte* mask);
        internal delegate System.IntPtr GetString(GL.Enums.StringName name);
        internal unsafe delegate void GetTexEnvfv(GL.Enums.TextureEnvTarget target, GL.Enums.TextureEnvParameter pname, GLfloat* @params);
        internal unsafe delegate void GetTexEnviv(GL.Enums.TextureEnvTarget target, GL.Enums.TextureEnvParameter pname, GLint* @params);
        internal unsafe delegate void GetTexGendv(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, GLdouble* @params);
        internal unsafe delegate void GetTexGenfv(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, GLfloat* @params);
        internal unsafe delegate void GetTexGeniv(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, GLint* @params);
        internal unsafe delegate void GetTexImage(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels);
        internal unsafe delegate void GetTexParameterfv(GL.Enums.TextureTarget target, GL.Enums.GetTextureParameter pname, GLfloat* @params);
        internal unsafe delegate void GetTexParameteriv(GL.Enums.TextureTarget target, GL.Enums.GetTextureParameter pname, GLint* @params);
        internal unsafe delegate void GetTexLevelParameterfv(GL.Enums.TextureTarget target, GLint level, GL.Enums.GetTextureParameter pname, GLfloat* @params);
        internal unsafe delegate void GetTexLevelParameteriv(GL.Enums.TextureTarget target, GLint level, GL.Enums.GetTextureParameter pname, GLint* @params);
        internal delegate GLboolean IsEnabled(GL.Enums.EnableCap cap);
        internal delegate GLboolean IsList(GLuint list);
        internal delegate void DepthRange(GLclampd near, GLclampd far);
        internal delegate void Frustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
        internal delegate void LoadIdentity();
        internal unsafe delegate void LoadMatrixf(GLfloat* m);
        internal unsafe delegate void LoadMatrixd(GLdouble* m);
        internal delegate void MatrixMode(GL.Enums.MatrixMode mode);
        internal unsafe delegate void MultMatrixf(GLfloat* m);
        internal unsafe delegate void MultMatrixd(GLdouble* m);
        internal delegate void Ortho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
        internal delegate void PopMatrix();
        internal delegate void PushMatrix();
        internal delegate void Rotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
        internal delegate void Rotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
        internal delegate void Scaled(GLdouble x, GLdouble y, GLdouble z);
        internal delegate void Scalef(GLfloat x, GLfloat y, GLfloat z);
        internal delegate void Translated(GLdouble x, GLdouble y, GLdouble z);
        internal delegate void Translatef(GLfloat x, GLfloat y, GLfloat z);
        internal delegate void Viewport(GLint x, GLint y, GLsizei width, GLsizei height);
        internal delegate void ArrayElement(GLint i);
        internal unsafe delegate void ColorPointer(GLint size, GL.Enums.ColorPointerType type, GLsizei stride, void* pointer);
        internal delegate void DisableClientState(GL.Enums.EnableCap array);
        internal delegate void DrawArrays(GL.Enums.BeginMode mode, GLint first, GLsizei count);
        internal unsafe delegate void DrawElements(GL.Enums.BeginMode mode, GLsizei count, GL.Enums.GLenum type, void* indices);
        internal unsafe delegate void EdgeFlagPointer(GLsizei stride, void* pointer);
        internal delegate void EnableClientState(GL.Enums.EnableCap array);
        internal unsafe delegate void GetPointerv(GL.Enums.GetPointervPName pname, void* @params);
        internal unsafe delegate void IndexPointer(GL.Enums.IndexPointerType type, GLsizei stride, void* pointer);
        internal unsafe delegate void InterleavedArrays(GL.Enums.InterleavedArrayFormat format, GLsizei stride, void* pointer);
        internal unsafe delegate void NormalPointer(GL.Enums.NormalPointerType type, GLsizei stride, void* pointer);
        internal unsafe delegate void TexCoordPointer(GLint size, GL.Enums.TexCoordPointerType type, GLsizei stride, void* pointer);
        internal unsafe delegate void VertexPointer(GLint size, GL.Enums.VertexPointerType type, GLsizei stride, void* pointer);
        internal delegate void PolygonOffset(GLfloat factor, GLfloat units);
        internal delegate void CopyTexImage1D(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLint border);
        internal delegate void CopyTexImage2D(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
        internal delegate void CopyTexSubImage1D(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
        internal delegate void CopyTexSubImage2D(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
        internal unsafe delegate void TexSubImage1D(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels);
        internal unsafe delegate void TexSubImage2D(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels);
        internal unsafe delegate GLboolean AreTexturesResident(GLsizei n, GLuint* textures, GL.Enums.Boolean* residences);
        internal delegate void BindTexture(GL.Enums.TextureTarget target, GLuint texture);
        internal unsafe delegate void DeleteTextures(GLsizei n, GLuint* textures);
        internal unsafe delegate void GenTextures(GLsizei n, GLuint* textures);
        internal delegate GLboolean IsTexture(GLuint texture);
        internal unsafe delegate void PrioritizeTextures(GLsizei n, GLuint* textures, GLclampf* priorities);
        internal delegate void Indexub(GLubyte c);
        internal unsafe delegate void Indexubv(GLubyte* c);
        internal delegate void PopClientAttrib();
        internal delegate void PushClientAttrib(GL.Enums.ClientAttribMask mask);
        internal delegate void BlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
        internal delegate void BlendEquation(GL.Enums.VERSION_1_2 mode);
        internal unsafe delegate void DrawRangeElements(GL.Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count, GL.Enums.VERSION_1_2 type, void* indices);
        internal unsafe delegate void ColorTable(GL.Enums.VERSION_1_2 target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* table);
        internal unsafe delegate void ColorTableParameterfv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLfloat* @params);
        internal unsafe delegate void ColorTableParameteriv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLint* @params);
        internal delegate void CopyColorTable(GL.Enums.VERSION_1_2 target, GL.Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width);
        internal unsafe delegate void GetColorTable(GL.Enums.VERSION_1_2 target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* table);
        internal unsafe delegate void GetColorTableParameterfv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLfloat* @params);
        internal unsafe delegate void GetColorTableParameteriv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLint* @params);
        internal unsafe delegate void ColorSubTable(GL.Enums.VERSION_1_2 target, GLsizei start, GLsizei count, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* data);
        internal delegate void CopyColorSubTable(GL.Enums.VERSION_1_2 target, GLsizei start, GLint x, GLint y, GLsizei width);
        internal unsafe delegate void ConvolutionFilter1D(GL.Enums.VERSION_1_2 target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* image);
        internal unsafe delegate void ConvolutionFilter2D(GL.Enums.VERSION_1_2 target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* image);
        internal delegate void ConvolutionParameterf(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLfloat @params);
        internal unsafe delegate void ConvolutionParameterfv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLfloat* @params);
        internal delegate void ConvolutionParameteri(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLint @params);
        internal unsafe delegate void ConvolutionParameteriv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLint* @params);
        internal delegate void CopyConvolutionFilter1D(GL.Enums.VERSION_1_2 target, GL.Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width);
        internal delegate void CopyConvolutionFilter2D(GL.Enums.VERSION_1_2 target, GL.Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
        internal unsafe delegate void GetConvolutionFilter(GL.Enums.VERSION_1_2 target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* image);
        internal unsafe delegate void GetConvolutionParameterfv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLfloat* @params);
        internal unsafe delegate void GetConvolutionParameteriv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLint* @params);
        internal unsafe delegate void GetSeparableFilter(GL.Enums.VERSION_1_2 target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* row, void* column, void* span);
        internal unsafe delegate void SeparableFilter2D(GL.Enums.VERSION_1_2 target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* row, void* column);
        internal unsafe delegate void GetHistogram(GL.Enums.VERSION_1_2 target, GL.Enums.Boolean reset, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* values);
        internal unsafe delegate void GetHistogramParameterfv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLfloat* @params);
        internal unsafe delegate void GetHistogramParameteriv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLint* @params);
        internal unsafe delegate void GetMinmax(GL.Enums.VERSION_1_2 target, GL.Enums.Boolean reset, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* values);
        internal unsafe delegate void GetMinmaxParameterfv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLfloat* @params);
        internal unsafe delegate void GetMinmaxParameteriv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLint* @params);
        internal delegate void Histogram(GL.Enums.VERSION_1_2 target, GLsizei width, GL.Enums.PixelInternalFormat internalformat, GL.Enums.Boolean sink);
        internal delegate void Minmax(GL.Enums.VERSION_1_2 target, GL.Enums.PixelInternalFormat internalformat, GL.Enums.Boolean sink);
        internal delegate void ResetHistogram(GL.Enums.VERSION_1_2 target);
        internal delegate void ResetMinmax(GL.Enums.VERSION_1_2 target);
        internal unsafe delegate void TexImage3D(GL.Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels);
        internal unsafe delegate void TexSubImage3D(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels);
        internal delegate void CopyTexSubImage3D(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
        internal delegate void ActiveTexture(GL.Enums.VERSION_1_3 texture);
        internal delegate void ClientActiveTexture(GL.Enums.VERSION_1_3 texture);
        internal delegate void MultiTexCoord1d(GL.Enums.VERSION_1_3 target, GLdouble s);
        internal unsafe delegate void MultiTexCoord1dv(GL.Enums.VERSION_1_3 target, GLdouble* v);
        internal delegate void MultiTexCoord1f(GL.Enums.VERSION_1_3 target, GLfloat s);
        internal unsafe delegate void MultiTexCoord1fv(GL.Enums.VERSION_1_3 target, GLfloat* v);
        internal delegate void MultiTexCoord1i(GL.Enums.VERSION_1_3 target, GLint s);
        internal unsafe delegate void MultiTexCoord1iv(GL.Enums.VERSION_1_3 target, GLint* v);
        internal delegate void MultiTexCoord1s(GL.Enums.VERSION_1_3 target, GLshort s);
        internal unsafe delegate void MultiTexCoord1sv(GL.Enums.VERSION_1_3 target, GLshort* v);
        internal delegate void MultiTexCoord2d(GL.Enums.VERSION_1_3 target, GLdouble s, GLdouble t);
        internal unsafe delegate void MultiTexCoord2dv(GL.Enums.VERSION_1_3 target, GLdouble* v);
        internal delegate void MultiTexCoord2f(GL.Enums.VERSION_1_3 target, GLfloat s, GLfloat t);
        internal unsafe delegate void MultiTexCoord2fv(GL.Enums.VERSION_1_3 target, GLfloat* v);
        internal delegate void MultiTexCoord2i(GL.Enums.VERSION_1_3 target, GLint s, GLint t);
        internal unsafe delegate void MultiTexCoord2iv(GL.Enums.VERSION_1_3 target, GLint* v);
        internal delegate void MultiTexCoord2s(GL.Enums.VERSION_1_3 target, GLshort s, GLshort t);
        internal unsafe delegate void MultiTexCoord2sv(GL.Enums.VERSION_1_3 target, GLshort* v);
        internal delegate void MultiTexCoord3d(GL.Enums.VERSION_1_3 target, GLdouble s, GLdouble t, GLdouble r);
        internal unsafe delegate void MultiTexCoord3dv(GL.Enums.VERSION_1_3 target, GLdouble* v);
        internal delegate void MultiTexCoord3f(GL.Enums.VERSION_1_3 target, GLfloat s, GLfloat t, GLfloat r);
        internal unsafe delegate void MultiTexCoord3fv(GL.Enums.VERSION_1_3 target, GLfloat* v);
        internal delegate void MultiTexCoord3i(GL.Enums.VERSION_1_3 target, GLint s, GLint t, GLint r);
        internal unsafe delegate void MultiTexCoord3iv(GL.Enums.VERSION_1_3 target, GLint* v);
        internal delegate void MultiTexCoord3s(GL.Enums.VERSION_1_3 target, GLshort s, GLshort t, GLshort r);
        internal unsafe delegate void MultiTexCoord3sv(GL.Enums.VERSION_1_3 target, GLshort* v);
        internal delegate void MultiTexCoord4d(GL.Enums.VERSION_1_3 target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
        internal unsafe delegate void MultiTexCoord4dv(GL.Enums.VERSION_1_3 target, GLdouble* v);
        internal delegate void MultiTexCoord4f(GL.Enums.VERSION_1_3 target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
        internal unsafe delegate void MultiTexCoord4fv(GL.Enums.VERSION_1_3 target, GLfloat* v);
        internal delegate void MultiTexCoord4i(GL.Enums.VERSION_1_3 target, GLint s, GLint t, GLint r, GLint q);
        internal unsafe delegate void MultiTexCoord4iv(GL.Enums.VERSION_1_3 target, GLint* v);
        internal delegate void MultiTexCoord4s(GL.Enums.VERSION_1_3 target, GLshort s, GLshort t, GLshort r, GLshort q);
        internal unsafe delegate void MultiTexCoord4sv(GL.Enums.VERSION_1_3 target, GLshort* v);
        internal unsafe delegate void LoadTransposeMatrixf(GLfloat* m);
        internal unsafe delegate void LoadTransposeMatrixd(GLdouble* m);
        internal unsafe delegate void MultTransposeMatrixf(GLfloat* m);
        internal unsafe delegate void MultTransposeMatrixd(GLdouble* m);
        internal delegate void SampleCoverage(GLclampf value, GL.Enums.Boolean invert);
        internal unsafe delegate void CompressedTexImage3D(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, void* data);
        internal unsafe delegate void CompressedTexImage2D(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, void* data);
        internal unsafe delegate void CompressedTexImage1D(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, void* data);
        internal unsafe delegate void CompressedTexSubImage3D(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL.Enums.PixelFormat format, GLsizei imageSize, void* data);
        internal unsafe delegate void CompressedTexSubImage2D(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GLsizei imageSize, void* data);
        internal unsafe delegate void CompressedTexSubImage1D(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, GL.Enums.PixelFormat format, GLsizei imageSize, void* data);
        internal unsafe delegate void GetCompressedTexImage(GL.Enums.TextureTarget target, GLint level, void* img);
        internal delegate void BlendFuncSeparate(GL.Enums.VERSION_1_4 sfactorRGB, GL.Enums.VERSION_1_4 dfactorRGB, GL.Enums.VERSION_1_4 sfactorAlpha, GL.Enums.VERSION_1_4 dfactorAlpha);
        internal delegate void FogCoordf(GLfloat coord);
        internal unsafe delegate void FogCoordfv(GLfloat* coord);
        internal delegate void FogCoordd(GLdouble coord);
        internal unsafe delegate void FogCoorddv(GLdouble* coord);
        internal unsafe delegate void FogCoordPointer(GL.Enums.VERSION_1_4 type, GLsizei stride, void* pointer);
        internal unsafe delegate void MultiDrawArrays(GL.Enums.BeginMode mode, GLint* first, GLsizei* count, GLsizei primcount);
        internal unsafe delegate void MultiDrawElements(GL.Enums.BeginMode mode, GLsizei* count, GL.Enums.VERSION_1_4 type, void* indices, GLsizei primcount);
        internal delegate void PointParameterf(GL.Enums.VERSION_1_4 pname, GLfloat param);
        internal unsafe delegate void PointParameterfv(GL.Enums.VERSION_1_4 pname, GLfloat* @params);
        internal delegate void PointParameteri(GL.Enums.VERSION_1_4 pname, GLint param);
        internal unsafe delegate void PointParameteriv(GL.Enums.VERSION_1_4 pname, GLint* @params);
        internal delegate void SecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue);
        internal unsafe delegate void SecondaryColor3bv(GLbyte* v);
        internal delegate void SecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue);
        internal unsafe delegate void SecondaryColor3dv(GLdouble* v);
        internal delegate void SecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue);
        internal unsafe delegate void SecondaryColor3fv(GLfloat* v);
        internal delegate void SecondaryColor3i(GLint red, GLint green, GLint blue);
        internal unsafe delegate void SecondaryColor3iv(GLint* v);
        internal delegate void SecondaryColor3s(GLshort red, GLshort green, GLshort blue);
        internal unsafe delegate void SecondaryColor3sv(GLshort* v);
        internal delegate void SecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue);
        internal unsafe delegate void SecondaryColor3ubv(GLubyte* v);
        internal delegate void SecondaryColor3ui(GLuint red, GLuint green, GLuint blue);
        internal unsafe delegate void SecondaryColor3uiv(GLuint* v);
        internal delegate void SecondaryColor3us(GLushort red, GLushort green, GLushort blue);
        internal unsafe delegate void SecondaryColor3usv(GLushort* v);
        internal unsafe delegate void SecondaryColorPointer(GLint size, GL.Enums.ColorPointerType type, GLsizei stride, void* pointer);
        internal delegate void WindowPos2d(GLdouble x, GLdouble y);
        internal unsafe delegate void WindowPos2dv(GLdouble* v);
        internal delegate void WindowPos2f(GLfloat x, GLfloat y);
        internal unsafe delegate void WindowPos2fv(GLfloat* v);
        internal delegate void WindowPos2i(GLint x, GLint y);
        internal unsafe delegate void WindowPos2iv(GLint* v);
        internal delegate void WindowPos2s(GLshort x, GLshort y);
        internal unsafe delegate void WindowPos2sv(GLshort* v);
        internal delegate void WindowPos3d(GLdouble x, GLdouble y, GLdouble z);
        internal unsafe delegate void WindowPos3dv(GLdouble* v);
        internal delegate void WindowPos3f(GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void WindowPos3fv(GLfloat* v);
        internal delegate void WindowPos3i(GLint x, GLint y, GLint z);
        internal unsafe delegate void WindowPos3iv(GLint* v);
        internal delegate void WindowPos3s(GLshort x, GLshort y, GLshort z);
        internal unsafe delegate void WindowPos3sv(GLshort* v);
        internal unsafe delegate void GenQueries(GLsizei n, GLuint* ids);
        internal unsafe delegate void DeleteQueries(GLsizei n, GLuint* ids);
        internal delegate GLboolean IsQuery(GLuint id);
        internal delegate void BeginQuery(GL.Enums.GLenum target, GLuint id);
        internal delegate void EndQuery(GL.Enums.GLenum target);
        internal unsafe delegate void GetQueryiv(GL.Enums.GLenum target, GL.Enums.GLenum pname, GLint* @params);
        internal unsafe delegate void GetQueryObjectiv(GLuint id, GL.Enums.GLenum pname, GLint* @params);
        internal unsafe delegate void GetQueryObjectuiv(GLuint id, GL.Enums.GLenum pname, GLuint* @params);
        internal delegate void BindBuffer(GL.Enums.VERSION_1_5 target, GLuint buffer);
        internal unsafe delegate void DeleteBuffers(GLsizei n, GLuint* buffers);
        internal unsafe delegate void GenBuffers(GLsizei n, GLuint* buffers);
        internal delegate GLboolean IsBuffer(GLuint buffer);
        internal unsafe delegate void BufferData(GL.Enums.VERSION_1_5 target, GLsizeiptr size, void* data, GL.Enums.VERSION_1_5 usage);
        internal unsafe delegate void BufferSubData(GL.Enums.VERSION_1_5 target, GLintptr offset, GLsizeiptr size, void* data);
        internal unsafe delegate void GetBufferSubData(GL.Enums.VERSION_1_5 target, GLintptr offset, GLsizeiptr size, void* data);
        internal delegate void MapBuffer(GL.Enums.VERSION_1_5 target, GL.Enums.VERSION_1_5 access);
        internal delegate GLboolean UnmapBuffer(GL.Enums.VERSION_1_5 target);
        internal unsafe delegate void GetBufferParameteriv(GL.Enums.VERSION_1_5 target, GL.Enums.VERSION_1_5 pname, GLint* @params);
        internal unsafe delegate void GetBufferPointerv(GL.Enums.VERSION_1_5 target, GL.Enums.VERSION_1_5 pname, void* @params);
        internal delegate void BlendEquationSeparate(GL.Enums.BlendEquationModeEXT modeRGB, GL.Enums.BlendEquationModeEXT modeAlpha);
        internal unsafe delegate void DrawBuffers(GLsizei n, GL.Enums.VERSION_2_0* bufs);
        internal delegate void StencilOpSeparate(GL.Enums.VERSION_2_0 face, GL.Enums.StencilOp sfail, GL.Enums.StencilOp dpfail, GL.Enums.StencilOp dppass);
        internal delegate void StencilFuncSeparate(GL.Enums.StencilFunction frontfunc, GL.Enums.StencilFunction backfunc, GLint @ref, GLuint mask);
        internal delegate void StencilMaskSeparate(GL.Enums.VERSION_2_0 face, GLuint mask);
        internal delegate void AttachShader(GLuint program, GLuint shader);
        internal unsafe delegate void BindAttribLocation(GLuint program, GLuint index, System.String name);
        internal delegate void CompileShader(GLuint shader);
        internal delegate GLuint CreateProgram();
        internal delegate GLuint CreateShader(GL.Enums.GLenum type);
        internal delegate void DeleteProgram(GLuint program);
        internal delegate void DeleteShader(GLuint shader);
        internal delegate void DetachShader(GLuint program, GLuint shader);
        internal delegate void DisableVertexAttribArray(GLuint index);
        internal delegate void EnableVertexAttribArray(GLuint index);
        internal unsafe delegate void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GL.Enums.GLenum* type, System.Text.StringBuilder name);
        internal unsafe delegate void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GL.Enums.GLenum* type, System.Text.StringBuilder name);
        internal unsafe delegate void GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei* count, GLuint* obj);
        internal unsafe delegate GLint GetAttribLocation(GLuint program, System.String name);
        internal unsafe delegate void GetProgramiv(GLuint program, GL.Enums.GLenum pname, GLint* @params);
        internal unsafe delegate void GetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei* length, System.Text.StringBuilder infoLog);
        internal unsafe delegate void GetShaderiv(GLuint shader, GL.Enums.GLenum pname, GLint* @params);
        internal unsafe delegate void GetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei* length, System.Text.StringBuilder infoLog);
        internal unsafe delegate void GetShaderSource(GLuint shader, GLsizei bufSize, GLsizei* length, System.Text.StringBuilder source);
        internal unsafe delegate GLint GetUniformLocation(GLuint program, System.String name);
        internal unsafe delegate void GetUniformfv(GLuint program, GLint location, GLfloat* @params);
        internal unsafe delegate void GetUniformiv(GLuint program, GLint location, GLint* @params);
        internal unsafe delegate void GetVertexAttribdv(GLuint index, GL.Enums.VERSION_2_0 pname, GLdouble* @params);
        internal unsafe delegate void GetVertexAttribfv(GLuint index, GL.Enums.VERSION_2_0 pname, GLfloat* @params);
        internal unsafe delegate void GetVertexAttribiv(GLuint index, GL.Enums.VERSION_2_0 pname, GLint* @params);
        internal unsafe delegate void GetVertexAttribPointerv(GLuint index, GL.Enums.VERSION_2_0 pname, void* pointer);
        internal delegate GLboolean IsProgram(GLuint program);
        internal delegate GLboolean IsShader(GLuint shader);
        internal delegate void LinkProgram(GLuint program);
        internal unsafe delegate void ShaderSource(GLuint shader, GLsizei count, System.String @string, GLint* length);
        internal delegate void UseProgram(GLuint program);
        internal delegate void Uniform1f(GLint location, GLfloat v0);
        internal delegate void Uniform2f(GLint location, GLfloat v0, GLfloat v1);
        internal delegate void Uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
        internal delegate void Uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
        internal delegate void Uniform1i(GLint location, GLint v0);
        internal delegate void Uniform2i(GLint location, GLint v0, GLint v1);
        internal delegate void Uniform3i(GLint location, GLint v0, GLint v1, GLint v2);
        internal delegate void Uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
        internal unsafe delegate void Uniform1fv(GLint location, GLsizei count, GLfloat* value);
        internal unsafe delegate void Uniform2fv(GLint location, GLsizei count, GLfloat* value);
        internal unsafe delegate void Uniform3fv(GLint location, GLsizei count, GLfloat* value);
        internal unsafe delegate void Uniform4fv(GLint location, GLsizei count, GLfloat* value);
        internal unsafe delegate void Uniform1iv(GLint location, GLsizei count, GLint* value);
        internal unsafe delegate void Uniform2iv(GLint location, GLsizei count, GLint* value);
        internal unsafe delegate void Uniform3iv(GLint location, GLsizei count, GLint* value);
        internal unsafe delegate void Uniform4iv(GLint location, GLsizei count, GLint* value);
        internal unsafe delegate void UniformMatrix2fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat* value);
        internal unsafe delegate void UniformMatrix3fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat* value);
        internal unsafe delegate void UniformMatrix4fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat* value);
        internal delegate void ValidateProgram(GLuint program);
        internal delegate void VertexAttrib1d(GLuint index, GLdouble x);
        internal unsafe delegate void VertexAttrib1dv(GLuint index, GLdouble* v);
        internal delegate void VertexAttrib1f(GLuint index, GLfloat x);
        internal unsafe delegate void VertexAttrib1fv(GLuint index, GLfloat* v);
        internal delegate void VertexAttrib1s(GLuint index, GLshort x);
        internal unsafe delegate void VertexAttrib1sv(GLuint index, GLshort* v);
        internal delegate void VertexAttrib2d(GLuint index, GLdouble x, GLdouble y);
        internal unsafe delegate void VertexAttrib2dv(GLuint index, GLdouble* v);
        internal delegate void VertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
        internal unsafe delegate void VertexAttrib2fv(GLuint index, GLfloat* v);
        internal delegate void VertexAttrib2s(GLuint index, GLshort x, GLshort y);
        internal unsafe delegate void VertexAttrib2sv(GLuint index, GLshort* v);
        internal delegate void VertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
        internal unsafe delegate void VertexAttrib3dv(GLuint index, GLdouble* v);
        internal delegate void VertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void VertexAttrib3fv(GLuint index, GLfloat* v);
        internal delegate void VertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);
        internal unsafe delegate void VertexAttrib3sv(GLuint index, GLshort* v);
        internal unsafe delegate void VertexAttrib4Nbv(GLuint index, GLbyte* v);
        internal unsafe delegate void VertexAttrib4Niv(GLuint index, GLint* v);
        internal unsafe delegate void VertexAttrib4Nsv(GLuint index, GLshort* v);
        internal delegate void VertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
        internal unsafe delegate void VertexAttrib4Nubv(GLuint index, GLubyte* v);
        internal unsafe delegate void VertexAttrib4Nuiv(GLuint index, GLuint* v);
        internal unsafe delegate void VertexAttrib4Nusv(GLuint index, GLushort* v);
        internal unsafe delegate void VertexAttrib4bv(GLuint index, GLbyte* v);
        internal delegate void VertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        internal unsafe delegate void VertexAttrib4dv(GLuint index, GLdouble* v);
        internal delegate void VertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        internal unsafe delegate void VertexAttrib4fv(GLuint index, GLfloat* v);
        internal unsafe delegate void VertexAttrib4iv(GLuint index, GLint* v);
        internal delegate void VertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
        internal unsafe delegate void VertexAttrib4sv(GLuint index, GLshort* v);
        internal unsafe delegate void VertexAttrib4ubv(GLuint index, GLubyte* v);
        internal unsafe delegate void VertexAttrib4uiv(GLuint index, GLuint* v);
        internal unsafe delegate void VertexAttrib4usv(GLuint index, GLushort* v);
        internal unsafe delegate void VertexAttribPointer(GLuint index, GLint size, GL.Enums.VERSION_2_0 type, GL.Enums.Boolean normalized, GLsizei stride, void* pointer);
        internal unsafe delegate void UniformMatrix2x3fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat* value);
        internal unsafe delegate void UniformMatrix3x2fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat* value);
        internal unsafe delegate void UniformMatrix2x4fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat* value);
        internal unsafe delegate void UniformMatrix4x2fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat* value);
        internal unsafe delegate void UniformMatrix3x4fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat* value);
        internal unsafe delegate void UniformMatrix4x3fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat* value);
        internal delegate void ActiveTextureARB(GL.Enums.ARB_multitexture texture);
        internal delegate void ClientActiveTextureARB(GL.Enums.ARB_multitexture texture);
        internal delegate void MultiTexCoord1dARB(GL.Enums.ARB_multitexture target, GLdouble s);
        internal unsafe delegate void MultiTexCoord1dvARB(GL.Enums.ARB_multitexture target, GLdouble* v);
        internal delegate void MultiTexCoord1fARB(GL.Enums.ARB_multitexture target, GLfloat s);
        internal unsafe delegate void MultiTexCoord1fvARB(GL.Enums.ARB_multitexture target, GLfloat* v);
        internal delegate void MultiTexCoord1iARB(GL.Enums.ARB_multitexture target, GLint s);
        internal unsafe delegate void MultiTexCoord1ivARB(GL.Enums.ARB_multitexture target, GLint* v);
        internal delegate void MultiTexCoord1sARB(GL.Enums.ARB_multitexture target, GLshort s);
        internal unsafe delegate void MultiTexCoord1svARB(GL.Enums.ARB_multitexture target, GLshort* v);
        internal delegate void MultiTexCoord2dARB(GL.Enums.ARB_multitexture target, GLdouble s, GLdouble t);
        internal unsafe delegate void MultiTexCoord2dvARB(GL.Enums.ARB_multitexture target, GLdouble* v);
        internal delegate void MultiTexCoord2fARB(GL.Enums.ARB_multitexture target, GLfloat s, GLfloat t);
        internal unsafe delegate void MultiTexCoord2fvARB(GL.Enums.ARB_multitexture target, GLfloat* v);
        internal delegate void MultiTexCoord2iARB(GL.Enums.ARB_multitexture target, GLint s, GLint t);
        internal unsafe delegate void MultiTexCoord2ivARB(GL.Enums.ARB_multitexture target, GLint* v);
        internal delegate void MultiTexCoord2sARB(GL.Enums.ARB_multitexture target, GLshort s, GLshort t);
        internal unsafe delegate void MultiTexCoord2svARB(GL.Enums.ARB_multitexture target, GLshort* v);
        internal delegate void MultiTexCoord3dARB(GL.Enums.ARB_multitexture target, GLdouble s, GLdouble t, GLdouble r);
        internal unsafe delegate void MultiTexCoord3dvARB(GL.Enums.ARB_multitexture target, GLdouble* v);
        internal delegate void MultiTexCoord3fARB(GL.Enums.ARB_multitexture target, GLfloat s, GLfloat t, GLfloat r);
        internal unsafe delegate void MultiTexCoord3fvARB(GL.Enums.ARB_multitexture target, GLfloat* v);
        internal delegate void MultiTexCoord3iARB(GL.Enums.ARB_multitexture target, GLint s, GLint t, GLint r);
        internal unsafe delegate void MultiTexCoord3ivARB(GL.Enums.ARB_multitexture target, GLint* v);
        internal delegate void MultiTexCoord3sARB(GL.Enums.ARB_multitexture target, GLshort s, GLshort t, GLshort r);
        internal unsafe delegate void MultiTexCoord3svARB(GL.Enums.ARB_multitexture target, GLshort* v);
        internal delegate void MultiTexCoord4dARB(GL.Enums.ARB_multitexture target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
        internal unsafe delegate void MultiTexCoord4dvARB(GL.Enums.ARB_multitexture target, GLdouble* v);
        internal delegate void MultiTexCoord4fARB(GL.Enums.ARB_multitexture target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
        internal unsafe delegate void MultiTexCoord4fvARB(GL.Enums.ARB_multitexture target, GLfloat* v);
        internal delegate void MultiTexCoord4iARB(GL.Enums.ARB_multitexture target, GLint s, GLint t, GLint r, GLint q);
        internal unsafe delegate void MultiTexCoord4ivARB(GL.Enums.ARB_multitexture target, GLint* v);
        internal delegate void MultiTexCoord4sARB(GL.Enums.ARB_multitexture target, GLshort s, GLshort t, GLshort r, GLshort q);
        internal unsafe delegate void MultiTexCoord4svARB(GL.Enums.ARB_multitexture target, GLshort* v);
        internal unsafe delegate void LoadTransposeMatrixfARB(GLfloat* m);
        internal unsafe delegate void LoadTransposeMatrixdARB(GLdouble* m);
        internal unsafe delegate void MultTransposeMatrixfARB(GLfloat* m);
        internal unsafe delegate void MultTransposeMatrixdARB(GLdouble* m);
        internal delegate void SampleCoverageARB(GLclampf value, GL.Enums.Boolean invert);
        internal unsafe delegate void CompressedTexImage3DARB(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, void* data);
        internal unsafe delegate void CompressedTexImage2DARB(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, void* data);
        internal unsafe delegate void CompressedTexImage1DARB(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, void* data);
        internal unsafe delegate void CompressedTexSubImage3DARB(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL.Enums.PixelFormat format, GLsizei imageSize, void* data);
        internal unsafe delegate void CompressedTexSubImage2DARB(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GLsizei imageSize, void* data);
        internal unsafe delegate void CompressedTexSubImage1DARB(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, GL.Enums.PixelFormat format, GLsizei imageSize, void* data);
        internal unsafe delegate void GetCompressedTexImageARB(GL.Enums.TextureTarget target, GLint level, void* img);
        internal delegate void PointParameterfARB(GL.Enums.ARB_point_parameters pname, GLfloat param);
        internal unsafe delegate void PointParameterfvARB(GL.Enums.ARB_point_parameters pname, GLfloat* @params);
        internal unsafe delegate void WeightbvARB(GLint size, GLbyte* weights);
        internal unsafe delegate void WeightsvARB(GLint size, GLshort* weights);
        internal unsafe delegate void WeightivARB(GLint size, GLint* weights);
        internal unsafe delegate void WeightfvARB(GLint size, GLfloat* weights);
        internal unsafe delegate void WeightdvARB(GLint size, GLdouble* weights);
        internal unsafe delegate void WeightubvARB(GLint size, GLubyte* weights);
        internal unsafe delegate void WeightusvARB(GLint size, GLushort* weights);
        internal unsafe delegate void WeightuivARB(GLint size, GLuint* weights);
        internal unsafe delegate void WeightPointerARB(GLint size, GL.Enums.ARB_vertex_blend type, GLsizei stride, void* pointer);
        internal delegate void VertexBlendARB(GLint count);
        internal delegate void CurrentPaletteMatrixARB(GLint index);
        internal unsafe delegate void MatrixIndexubvARB(GLint size, GLubyte* indices);
        internal unsafe delegate void MatrixIndexusvARB(GLint size, GLushort* indices);
        internal unsafe delegate void MatrixIndexuivARB(GLint size, GLuint* indices);
        internal unsafe delegate void MatrixIndexPointerARB(GLint size, GL.Enums.ARB_matrix_palette type, GLsizei stride, void* pointer);
        internal delegate void WindowPos2dARB(GLdouble x, GLdouble y);
        internal unsafe delegate void WindowPos2dvARB(GLdouble* v);
        internal delegate void WindowPos2fARB(GLfloat x, GLfloat y);
        internal unsafe delegate void WindowPos2fvARB(GLfloat* v);
        internal delegate void WindowPos2iARB(GLint x, GLint y);
        internal unsafe delegate void WindowPos2ivARB(GLint* v);
        internal delegate void WindowPos2sARB(GLshort x, GLshort y);
        internal unsafe delegate void WindowPos2svARB(GLshort* v);
        internal delegate void WindowPos3dARB(GLdouble x, GLdouble y, GLdouble z);
        internal unsafe delegate void WindowPos3dvARB(GLdouble* v);
        internal delegate void WindowPos3fARB(GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void WindowPos3fvARB(GLfloat* v);
        internal delegate void WindowPos3iARB(GLint x, GLint y, GLint z);
        internal unsafe delegate void WindowPos3ivARB(GLint* v);
        internal delegate void WindowPos3sARB(GLshort x, GLshort y, GLshort z);
        internal unsafe delegate void WindowPos3svARB(GLshort* v);
        internal delegate void VertexAttrib1dARB(GLuint index, GLdouble x);
        internal unsafe delegate void VertexAttrib1dvARB(GLuint index, GLdouble* v);
        internal delegate void VertexAttrib1fARB(GLuint index, GLfloat x);
        internal unsafe delegate void VertexAttrib1fvARB(GLuint index, GLfloat* v);
        internal delegate void VertexAttrib1sARB(GLuint index, GLshort x);
        internal unsafe delegate void VertexAttrib1svARB(GLuint index, GLshort* v);
        internal delegate void VertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y);
        internal unsafe delegate void VertexAttrib2dvARB(GLuint index, GLdouble* v);
        internal delegate void VertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y);
        internal unsafe delegate void VertexAttrib2fvARB(GLuint index, GLfloat* v);
        internal delegate void VertexAttrib2sARB(GLuint index, GLshort x, GLshort y);
        internal unsafe delegate void VertexAttrib2svARB(GLuint index, GLshort* v);
        internal delegate void VertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z);
        internal unsafe delegate void VertexAttrib3dvARB(GLuint index, GLdouble* v);
        internal delegate void VertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void VertexAttrib3fvARB(GLuint index, GLfloat* v);
        internal delegate void VertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z);
        internal unsafe delegate void VertexAttrib3svARB(GLuint index, GLshort* v);
        internal unsafe delegate void VertexAttrib4NbvARB(GLuint index, GLbyte* v);
        internal unsafe delegate void VertexAttrib4NivARB(GLuint index, GLint* v);
        internal unsafe delegate void VertexAttrib4NsvARB(GLuint index, GLshort* v);
        internal delegate void VertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
        internal unsafe delegate void VertexAttrib4NubvARB(GLuint index, GLubyte* v);
        internal unsafe delegate void VertexAttrib4NuivARB(GLuint index, GLuint* v);
        internal unsafe delegate void VertexAttrib4NusvARB(GLuint index, GLushort* v);
        internal unsafe delegate void VertexAttrib4bvARB(GLuint index, GLbyte* v);
        internal delegate void VertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        internal unsafe delegate void VertexAttrib4dvARB(GLuint index, GLdouble* v);
        internal delegate void VertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        internal unsafe delegate void VertexAttrib4fvARB(GLuint index, GLfloat* v);
        internal unsafe delegate void VertexAttrib4ivARB(GLuint index, GLint* v);
        internal delegate void VertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
        internal unsafe delegate void VertexAttrib4svARB(GLuint index, GLshort* v);
        internal unsafe delegate void VertexAttrib4ubvARB(GLuint index, GLubyte* v);
        internal unsafe delegate void VertexAttrib4uivARB(GLuint index, GLuint* v);
        internal unsafe delegate void VertexAttrib4usvARB(GLuint index, GLushort* v);
        internal unsafe delegate void VertexAttribPointerARB(GLuint index, GLint size, GL.Enums.ARB_vertex_program type, GL.Enums.Boolean normalized, GLsizei stride, void* pointer);
        internal delegate void EnableVertexAttribArrayARB(GLuint index);
        internal delegate void DisableVertexAttribArrayARB(GLuint index);
        internal unsafe delegate void ProgramStringARB(GL.Enums.ARB_vertex_program target, GL.Enums.ARB_vertex_program format, GLsizei len, void* @string);
        internal delegate void BindProgramARB(GL.Enums.ARB_vertex_program target, GLuint program);
        internal unsafe delegate void DeleteProgramsARB(GLsizei n, GLuint* programs);
        internal unsafe delegate void GenProgramsARB(GLsizei n, GLuint* programs);
        internal delegate void ProgramEnvParameter4dARB(GL.Enums.ARB_vertex_program target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        internal unsafe delegate void ProgramEnvParameter4dvARB(GL.Enums.ARB_vertex_program target, GLuint index, GLdouble* @params);
        internal delegate void ProgramEnvParameter4fARB(GL.Enums.ARB_vertex_program target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        internal unsafe delegate void ProgramEnvParameter4fvARB(GL.Enums.ARB_vertex_program target, GLuint index, GLfloat* @params);
        internal delegate void ProgramLocalParameter4dARB(GL.Enums.ARB_vertex_program target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        internal unsafe delegate void ProgramLocalParameter4dvARB(GL.Enums.ARB_vertex_program target, GLuint index, GLdouble* @params);
        internal delegate void ProgramLocalParameter4fARB(GL.Enums.ARB_vertex_program target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        internal unsafe delegate void ProgramLocalParameter4fvARB(GL.Enums.ARB_vertex_program target, GLuint index, GLfloat* @params);
        internal unsafe delegate void GetProgramEnvParameterdvARB(GL.Enums.ARB_vertex_program target, GLuint index, GLdouble* @params);
        internal unsafe delegate void GetProgramEnvParameterfvARB(GL.Enums.ARB_vertex_program target, GLuint index, GLfloat* @params);
        internal unsafe delegate void GetProgramLocalParameterdvARB(GL.Enums.ARB_vertex_program target, GLuint index, GLdouble* @params);
        internal unsafe delegate void GetProgramLocalParameterfvARB(GL.Enums.ARB_vertex_program target, GLuint index, GLfloat* @params);
        internal unsafe delegate void GetProgramivARB(GL.Enums.ARB_vertex_program target, GL.Enums.ARB_vertex_program pname, GLint* @params);
        internal unsafe delegate void GetProgramStringARB(GL.Enums.ARB_vertex_program target, GL.Enums.ARB_vertex_program pname, void* @string);
        internal unsafe delegate void GetVertexAttribdvARB(GLuint index, GL.Enums.ARB_vertex_program pname, GLdouble* @params);
        internal unsafe delegate void GetVertexAttribfvARB(GLuint index, GL.Enums.ARB_vertex_program pname, GLfloat* @params);
        internal unsafe delegate void GetVertexAttribivARB(GLuint index, GL.Enums.ARB_vertex_program pname, GLint* @params);
        internal unsafe delegate void GetVertexAttribPointervARB(GLuint index, GL.Enums.ARB_vertex_program pname, void* pointer);
        internal delegate GLboolean IsProgramARB(GLuint program);
        internal delegate void BindBufferARB(GL.Enums.ARB_vertex_buffer_object target, GLuint buffer);
        internal unsafe delegate void DeleteBuffersARB(GLsizei n, GLuint* buffers);
        internal unsafe delegate void GenBuffersARB(GLsizei n, GLuint* buffers);
        internal delegate GLboolean IsBufferARB(GLuint buffer);
        internal unsafe delegate void BufferDataARB(GL.Enums.ARB_vertex_buffer_object target, GLsizeiptrARB size, void* data, GL.Enums.ARB_vertex_buffer_object usage);
        internal unsafe delegate void BufferSubDataARB(GL.Enums.ARB_vertex_buffer_object target, GLintptrARB offset, GLsizeiptrARB size, void* data);
        internal unsafe delegate void GetBufferSubDataARB(GL.Enums.ARB_vertex_buffer_object target, GLintptrARB offset, GLsizeiptrARB size, void* data);
        internal delegate void MapBufferARB(GL.Enums.ARB_vertex_buffer_object target, GL.Enums.ARB_vertex_buffer_object access);
        internal delegate GLboolean UnmapBufferARB(GL.Enums.ARB_vertex_buffer_object target);
        internal unsafe delegate void GetBufferParameterivARB(GL.Enums.ARB_vertex_buffer_object target, GL.Enums.ARB_vertex_buffer_object pname, GLint* @params);
        internal unsafe delegate void GetBufferPointervARB(GL.Enums.ARB_vertex_buffer_object target, GL.Enums.ARB_vertex_buffer_object pname, void* @params);
        internal unsafe delegate void GenQueriesARB(GLsizei n, GLuint* ids);
        internal unsafe delegate void DeleteQueriesARB(GLsizei n, GLuint* ids);
        internal delegate GLboolean IsQueryARB(GLuint id);
        internal delegate void BeginQueryARB(GL.Enums.GLenum target, GLuint id);
        internal delegate void EndQueryARB(GL.Enums.GLenum target);
        internal unsafe delegate void GetQueryivARB(GL.Enums.GLenum target, GL.Enums.GLenum pname, GLint* @params);
        internal unsafe delegate void GetQueryObjectivARB(GLuint id, GL.Enums.GLenum pname, GLint* @params);
        internal unsafe delegate void GetQueryObjectuivARB(GLuint id, GL.Enums.GLenum pname, GLuint* @params);
        internal delegate void DeleteObjectARB(GLhandleARB obj);
        internal delegate GLhandleARB GetHandleARB(GL.Enums.GLenum pname);
        internal delegate void DetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj);
        internal delegate GLhandleARB CreateShaderObjectARB(GL.Enums.GLenum shaderType);
        internal unsafe delegate void ShaderSourceARB(GLhandleARB shaderObj, GLsizei count, System.String @string, GLint* length);
        internal delegate void CompileShaderARB(GLhandleARB shaderObj);
        internal delegate GLhandleARB CreateProgramObjectARB();
        internal delegate void AttachObjectARB(GLhandleARB containerObj, GLhandleARB obj);
        internal delegate void LinkProgramARB(GLhandleARB programObj);
        internal delegate void UseProgramObjectARB(GLhandleARB programObj);
        internal delegate void ValidateProgramARB(GLhandleARB programObj);
        internal delegate void Uniform1fARB(GLint location, GLfloat v0);
        internal delegate void Uniform2fARB(GLint location, GLfloat v0, GLfloat v1);
        internal delegate void Uniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
        internal delegate void Uniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
        internal delegate void Uniform1iARB(GLint location, GLint v0);
        internal delegate void Uniform2iARB(GLint location, GLint v0, GLint v1);
        internal delegate void Uniform3iARB(GLint location, GLint v0, GLint v1, GLint v2);
        internal delegate void Uniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
        internal unsafe delegate void Uniform1fvARB(GLint location, GLsizei count, GLfloat* value);
        internal unsafe delegate void Uniform2fvARB(GLint location, GLsizei count, GLfloat* value);
        internal unsafe delegate void Uniform3fvARB(GLint location, GLsizei count, GLfloat* value);
        internal unsafe delegate void Uniform4fvARB(GLint location, GLsizei count, GLfloat* value);
        internal unsafe delegate void Uniform1ivARB(GLint location, GLsizei count, GLint* value);
        internal unsafe delegate void Uniform2ivARB(GLint location, GLsizei count, GLint* value);
        internal unsafe delegate void Uniform3ivARB(GLint location, GLsizei count, GLint* value);
        internal unsafe delegate void Uniform4ivARB(GLint location, GLsizei count, GLint* value);
        internal unsafe delegate void UniformMatrix2fvARB(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat* value);
        internal unsafe delegate void UniformMatrix3fvARB(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat* value);
        internal unsafe delegate void UniformMatrix4fvARB(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat* value);
        internal unsafe delegate void GetObjectParameterfvARB(GLhandleARB obj, GL.Enums.GLenum pname, GLfloat* @params);
        internal unsafe delegate void GetObjectParameterivARB(GLhandleARB obj, GL.Enums.GLenum pname, GLint* @params);
        internal unsafe delegate void GetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei* length, System.Text.StringBuilder infoLog);
        internal unsafe delegate void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, GLhandleARB* obj);
        internal unsafe delegate GLint GetUniformLocationARB(GLhandleARB programObj, System.String name);
        internal unsafe delegate void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GL.Enums.GLenum* type, System.Text.StringBuilder name);
        internal unsafe delegate void GetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat* @params);
        internal unsafe delegate void GetUniformivARB(GLhandleARB programObj, GLint location, GLint* @params);
        internal unsafe delegate void GetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei* length, System.Text.StringBuilder source);
        internal unsafe delegate void BindAttribLocationARB(GLhandleARB programObj, GLuint index, System.String name);
        internal unsafe delegate void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GL.Enums.GLenum* type, System.Text.StringBuilder name);
        internal unsafe delegate GLint GetAttribLocationARB(GLhandleARB programObj, System.String name);
        internal unsafe delegate void DrawBuffersARB(GLsizei n, GL.Enums.ARB_draw_buffers* bufs);
        internal delegate void ClampColorARB(GL.Enums.ARB_color_buffer_float target, GL.Enums.ARB_color_buffer_float clamp);
        internal delegate void BlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
        internal delegate void PolygonOffsetEXT(GLfloat factor, GLfloat bias);
        internal unsafe delegate void TexImage3DEXT(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels);
        internal unsafe delegate void TexSubImage3DEXT(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels);
        internal unsafe delegate void GetTexFilterFuncSGIS(GL.Enums.TextureTarget target, GL.Enums.SGIS_texture_filter4 filter, GLfloat* weights);
        internal unsafe delegate void TexFilterFuncSGIS(GL.Enums.TextureTarget target, GL.Enums.SGIS_texture_filter4 filter, GLsizei n, GLfloat* weights);
        internal unsafe delegate void TexSubImage1DEXT(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels);
        internal unsafe delegate void TexSubImage2DEXT(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels);
        internal delegate void CopyTexImage1DEXT(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLint border);
        internal delegate void CopyTexImage2DEXT(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
        internal delegate void CopyTexSubImage1DEXT(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
        internal delegate void CopyTexSubImage2DEXT(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
        internal delegate void CopyTexSubImage3DEXT(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
        internal unsafe delegate void GetHistogramEXT(GL.Enums.HistogramTargetEXT target, GL.Enums.Boolean reset, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* values);
        internal unsafe delegate void GetHistogramParameterfvEXT(GL.Enums.HistogramTargetEXT target, GL.Enums.GetHistogramParameterPNameEXT pname, GLfloat* @params);
        internal unsafe delegate void GetHistogramParameterivEXT(GL.Enums.HistogramTargetEXT target, GL.Enums.GetHistogramParameterPNameEXT pname, GLint* @params);
        internal unsafe delegate void GetMinmaxEXT(GL.Enums.MinmaxTargetEXT target, GL.Enums.Boolean reset, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* values);
        internal unsafe delegate void GetMinmaxParameterfvEXT(GL.Enums.MinmaxTargetEXT target, GL.Enums.GetMinmaxParameterPNameEXT pname, GLfloat* @params);
        internal unsafe delegate void GetMinmaxParameterivEXT(GL.Enums.MinmaxTargetEXT target, GL.Enums.GetMinmaxParameterPNameEXT pname, GLint* @params);
        internal delegate void HistogramEXT(GL.Enums.HistogramTargetEXT target, GLsizei width, GL.Enums.PixelInternalFormat internalformat, GL.Enums.Boolean sink);
        internal delegate void MinmaxEXT(GL.Enums.MinmaxTargetEXT target, GL.Enums.PixelInternalFormat internalformat, GL.Enums.Boolean sink);
        internal delegate void ResetHistogramEXT(GL.Enums.HistogramTargetEXT target);
        internal delegate void ResetMinmaxEXT(GL.Enums.MinmaxTargetEXT target);
        internal unsafe delegate void ConvolutionFilter1DEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* image);
        internal unsafe delegate void ConvolutionFilter2DEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* image);
        internal delegate void ConvolutionParameterfEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.ConvolutionParameterEXT pname, GLfloat @params);
        internal unsafe delegate void ConvolutionParameterfvEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.ConvolutionParameterEXT pname, GLfloat* @params);
        internal delegate void ConvolutionParameteriEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.ConvolutionParameterEXT pname, GLint @params);
        internal unsafe delegate void ConvolutionParameterivEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.ConvolutionParameterEXT pname, GLint* @params);
        internal delegate void CopyConvolutionFilter1DEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width);
        internal delegate void CopyConvolutionFilter2DEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
        internal unsafe delegate void GetConvolutionFilterEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* image);
        internal unsafe delegate void GetConvolutionParameterfvEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.ConvolutionParameterEXT pname, GLfloat* @params);
        internal unsafe delegate void GetConvolutionParameterivEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.ConvolutionParameterEXT pname, GLint* @params);
        internal unsafe delegate void GetSeparableFilterEXT(GL.Enums.SeparableTargetEXT target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* row, void* column, void* span);
        internal unsafe delegate void SeparableFilter2DEXT(GL.Enums.SeparableTargetEXT target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* row, void* column);
        internal unsafe delegate void ColorTableSGI(GL.Enums.ColorTableTargetSGI target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* table);
        internal unsafe delegate void ColorTableParameterfvSGI(GL.Enums.ColorTableTargetSGI target, GL.Enums.ColorTableParameterPNameSGI pname, GLfloat* @params);
        internal unsafe delegate void ColorTableParameterivSGI(GL.Enums.ColorTableTargetSGI target, GL.Enums.ColorTableParameterPNameSGI pname, GLint* @params);
        internal delegate void CopyColorTableSGI(GL.Enums.ColorTableTargetSGI target, GL.Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width);
        internal unsafe delegate void GetColorTableSGI(GL.Enums.ColorTableTargetSGI target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* table);
        internal unsafe delegate void GetColorTableParameterfvSGI(GL.Enums.ColorTableTargetSGI target, GL.Enums.GetColorTableParameterPNameSGI pname, GLfloat* @params);
        internal unsafe delegate void GetColorTableParameterivSGI(GL.Enums.ColorTableTargetSGI target, GL.Enums.GetColorTableParameterPNameSGI pname, GLint* @params);
        internal delegate void PixelTexGenSGIX(GL.Enums.SGIX_pixel_texture mode);
        internal delegate void PixelTexGenParameteriSGIS(GL.Enums.PixelTexGenParameterNameSGIS pname, GLint param);
        internal unsafe delegate void PixelTexGenParameterivSGIS(GL.Enums.PixelTexGenParameterNameSGIS pname, GLint* @params);
        internal delegate void PixelTexGenParameterfSGIS(GL.Enums.PixelTexGenParameterNameSGIS pname, GLfloat param);
        internal unsafe delegate void PixelTexGenParameterfvSGIS(GL.Enums.PixelTexGenParameterNameSGIS pname, GLfloat* @params);
        internal unsafe delegate void GetPixelTexGenParameterivSGIS(GL.Enums.PixelTexGenParameterNameSGIS pname, GLint* @params);
        internal unsafe delegate void GetPixelTexGenParameterfvSGIS(GL.Enums.PixelTexGenParameterNameSGIS pname, GLfloat* @params);
        internal unsafe delegate void TexImage4DSGIS(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels);
        internal unsafe delegate void TexSubImage4DSGIS(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels);
        internal unsafe delegate GLboolean AreTexturesResidentEXT(GLsizei n, GLuint* textures, GL.Enums.Boolean* residences);
        internal delegate void BindTextureEXT(GL.Enums.TextureTarget target, GLuint texture);
        internal unsafe delegate void DeleteTexturesEXT(GLsizei n, GLuint* textures);
        internal unsafe delegate void GenTexturesEXT(GLsizei n, GLuint* textures);
        internal delegate GLboolean IsTextureEXT(GLuint texture);
        internal unsafe delegate void PrioritizeTexturesEXT(GLsizei n, GLuint* textures, GLclampf* priorities);
        internal unsafe delegate void DetailTexFuncSGIS(GL.Enums.TextureTarget target, GLsizei n, GLfloat* points);
        internal unsafe delegate void GetDetailTexFuncSGIS(GL.Enums.TextureTarget target, GLfloat* points);
        internal unsafe delegate void SharpenTexFuncSGIS(GL.Enums.TextureTarget target, GLsizei n, GLfloat* points);
        internal unsafe delegate void GetSharpenTexFuncSGIS(GL.Enums.TextureTarget target, GLfloat* points);
        internal delegate void SampleMaskSGIS(GLclampf value, GL.Enums.Boolean invert);
        internal delegate void SamplePatternSGIS(GL.Enums.SamplePatternSGIS pattern);
        internal delegate void ArrayElementEXT(GLint i);
        internal unsafe delegate void ColorPointerEXT(GLint size, GL.Enums.ColorPointerType type, GLsizei stride, GLsizei count, void* pointer);
        internal delegate void DrawArraysEXT(GL.Enums.BeginMode mode, GLint first, GLsizei count);
        internal unsafe delegate void EdgeFlagPointerEXT(GLsizei stride, GLsizei count, GL.Enums.Boolean* pointer);
        internal unsafe delegate void GetPointervEXT(GL.Enums.GetPointervPName pname, void* @params);
        internal unsafe delegate void IndexPointerEXT(GL.Enums.IndexPointerType type, GLsizei stride, GLsizei count, void* pointer);
        internal unsafe delegate void NormalPointerEXT(GL.Enums.NormalPointerType type, GLsizei stride, GLsizei count, void* pointer);
        internal unsafe delegate void TexCoordPointerEXT(GLint size, GL.Enums.TexCoordPointerType type, GLsizei stride, GLsizei count, void* pointer);
        internal unsafe delegate void VertexPointerEXT(GLint size, GL.Enums.VertexPointerType type, GLsizei stride, GLsizei count, void* pointer);
        internal delegate void BlendEquationEXT(GL.Enums.BlendEquationModeEXT mode);
        internal delegate void SpriteParameterfSGIX(GL.Enums.SGIX_sprite pname, GLfloat param);
        internal unsafe delegate void SpriteParameterfvSGIX(GL.Enums.SGIX_sprite pname, GLfloat* @params);
        internal delegate void SpriteParameteriSGIX(GL.Enums.SGIX_sprite pname, GLint param);
        internal unsafe delegate void SpriteParameterivSGIX(GL.Enums.SGIX_sprite pname, GLint* @params);
        internal delegate void PointParameterfEXT(GL.Enums.EXT_point_parameters pname, GLfloat param);
        internal unsafe delegate void PointParameterfvEXT(GL.Enums.EXT_point_parameters pname, GLfloat* @params);
        internal delegate void PointParameterfSGIS(GL.Enums.SGIS_point_parameters pname, GLfloat param);
        internal unsafe delegate void PointParameterfvSGIS(GL.Enums.SGIS_point_parameters pname, GLfloat* @params);
        internal delegate GLint GetInstrumentsSGIX();
        internal unsafe delegate void InstrumentsBufferSGIX(GLsizei size, GLint* buffer);
        internal unsafe delegate GLint PollInstrumentsSGIX(GLint* marker_p);
        internal delegate void ReadInstrumentsSGIX(GLint marker);
        internal delegate void StartInstrumentsSGIX();
        internal delegate void StopInstrumentsSGIX(GLint marker);
        internal delegate void FrameZoomSGIX(GLint factor);
        internal delegate void TagSampleBufferSGIX();
        internal unsafe delegate void DeformationMap3dSGIX(GL.Enums.FfdTargetSGIX target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, GLdouble* points);
        internal unsafe delegate void DeformationMap3fSGIX(GL.Enums.FfdTargetSGIX target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, GLfloat* points);
        internal delegate void DeformSGIX(GL.Enums.FfdMaskSGIX mask);
        internal delegate void LoadIdentityDeformationMapSGIX(GL.Enums.FfdMaskSGIX mask);
        internal unsafe delegate void ReferencePlaneSGIX(GLdouble* equation);
        internal delegate void FlushRasterSGIX();
        internal unsafe delegate void FogFuncSGIS(GLsizei n, GLfloat* points);
        internal unsafe delegate void GetFogFuncSGIS(GLfloat* points);
        internal delegate void ImageTransformParameteriHP(GL.Enums.HP_image_transform target, GL.Enums.HP_image_transform pname, GLint param);
        internal delegate void ImageTransformParameterfHP(GL.Enums.HP_image_transform target, GL.Enums.HP_image_transform pname, GLfloat param);
        internal unsafe delegate void ImageTransformParameterivHP(GL.Enums.HP_image_transform target, GL.Enums.HP_image_transform pname, GLint* @params);
        internal unsafe delegate void ImageTransformParameterfvHP(GL.Enums.HP_image_transform target, GL.Enums.HP_image_transform pname, GLfloat* @params);
        internal unsafe delegate void GetImageTransformParameterivHP(GL.Enums.HP_image_transform target, GL.Enums.HP_image_transform pname, GLint* @params);
        internal unsafe delegate void GetImageTransformParameterfvHP(GL.Enums.HP_image_transform target, GL.Enums.HP_image_transform pname, GLfloat* @params);
        internal unsafe delegate void ColorSubTableEXT(GL.Enums.EXT_color_subtable target, GLsizei start, GLsizei count, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* data);
        internal delegate void CopyColorSubTableEXT(GL.Enums.EXT_color_subtable target, GLsizei start, GLint x, GLint y, GLsizei width);
        internal delegate void HintPGI(GL.Enums.PGI_misc_hints target, GLint mode);
        internal unsafe delegate void ColorTableEXT(GL.Enums.EXT_paletted_texture target, GL.Enums.PixelInternalFormat internalFormat, GLsizei width, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* table);
        internal unsafe delegate void GetColorTableEXT(GL.Enums.EXT_paletted_texture target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* data);
        internal unsafe delegate void GetColorTableParameterivEXT(GL.Enums.EXT_paletted_texture target, GL.Enums.EXT_paletted_texture pname, GLint* @params);
        internal unsafe delegate void GetColorTableParameterfvEXT(GL.Enums.EXT_paletted_texture target, GL.Enums.EXT_paletted_texture pname, GLfloat* @params);
        internal unsafe delegate void GetListParameterfvSGIX(GLuint list, GL.Enums.ListParameterName pname, GLfloat* @params);
        internal unsafe delegate void GetListParameterivSGIX(GLuint list, GL.Enums.ListParameterName pname, GLint* @params);
        internal delegate void ListParameterfSGIX(GLuint list, GL.Enums.ListParameterName pname, GLfloat param);
        internal unsafe delegate void ListParameterfvSGIX(GLuint list, GL.Enums.ListParameterName pname, GLfloat* @params);
        internal delegate void ListParameteriSGIX(GLuint list, GL.Enums.ListParameterName pname, GLint param);
        internal unsafe delegate void ListParameterivSGIX(GLuint list, GL.Enums.ListParameterName pname, GLint* @params);
        internal delegate void IndexMaterialEXT(GL.Enums.MaterialFace face, GL.Enums.EXT_index_material mode);
        internal delegate void IndexFuncEXT(GL.Enums.EXT_index_func func, GLclampf @ref);
        internal delegate void LockArraysEXT(GLint first, GLsizei count);
        internal delegate void UnlockArraysEXT();
        internal unsafe delegate void CullParameterdvEXT(GL.Enums.EXT_cull_vertex pname, GLdouble* @params);
        internal unsafe delegate void CullParameterfvEXT(GL.Enums.EXT_cull_vertex pname, GLfloat* @params);
        internal delegate void FragmentColorMaterialSGIX(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter mode);
        internal delegate void FragmentLightfSGIX(GL.Enums.SGIX_fragment_lighting light, GL.Enums.SGIX_fragment_lighting pname, GLfloat param);
        internal unsafe delegate void FragmentLightfvSGIX(GL.Enums.SGIX_fragment_lighting light, GL.Enums.SGIX_fragment_lighting pname, GLfloat* @params);
        internal delegate void FragmentLightiSGIX(GL.Enums.SGIX_fragment_lighting light, GL.Enums.SGIX_fragment_lighting pname, GLint param);
        internal unsafe delegate void FragmentLightivSGIX(GL.Enums.SGIX_fragment_lighting light, GL.Enums.SGIX_fragment_lighting pname, GLint* @params);
        internal delegate void FragmentLightModelfSGIX(GL.Enums.FragmentLightModelParameterSGIX pname, GLfloat param);
        internal unsafe delegate void FragmentLightModelfvSGIX(GL.Enums.FragmentLightModelParameterSGIX pname, GLfloat* @params);
        internal delegate void FragmentLightModeliSGIX(GL.Enums.FragmentLightModelParameterSGIX pname, GLint param);
        internal unsafe delegate void FragmentLightModelivSGIX(GL.Enums.FragmentLightModelParameterSGIX pname, GLint* @params);
        internal delegate void FragmentMaterialfSGIX(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLfloat param);
        internal unsafe delegate void FragmentMaterialfvSGIX(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLfloat* @params);
        internal delegate void FragmentMaterialiSGIX(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLint param);
        internal unsafe delegate void FragmentMaterialivSGIX(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLint* @params);
        internal unsafe delegate void GetFragmentLightfvSGIX(GL.Enums.SGIX_fragment_lighting light, GL.Enums.SGIX_fragment_lighting pname, GLfloat* @params);
        internal unsafe delegate void GetFragmentLightivSGIX(GL.Enums.SGIX_fragment_lighting light, GL.Enums.SGIX_fragment_lighting pname, GLint* @params);
        internal unsafe delegate void GetFragmentMaterialfvSGIX(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLfloat* @params);
        internal unsafe delegate void GetFragmentMaterialivSGIX(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLint* @params);
        internal delegate void LightEnviSGIX(GL.Enums.LightEnvParameterSGIX pname, GLint param);
        internal unsafe delegate void DrawRangeElementsEXT(GL.Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count, GL.Enums.EXT_draw_range_elements type, void* indices);
        internal delegate void ApplyTextureEXT(GL.Enums.EXT_light_texture mode);
        internal delegate void TextureLightEXT(GL.Enums.EXT_light_texture pname);
        internal delegate void TextureMaterialEXT(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter mode);
        internal delegate void AsyncMarkerSGIX(GLuint marker);
        internal unsafe delegate GLint FinishAsyncSGIX(GLuint* markerp);
        internal unsafe delegate GLint PollAsyncSGIX(GLuint* markerp);
        internal delegate GLuint GenAsyncMarkersSGIX(GLsizei range);
        internal delegate void DeleteAsyncMarkersSGIX(GLuint marker, GLsizei range);
        internal delegate GLboolean IsAsyncMarkerSGIX(GLuint marker);
        internal unsafe delegate void VertexPointervINTEL(GLint size, GL.Enums.VertexPointerType type, void* pointer);
        internal unsafe delegate void NormalPointervINTEL(GL.Enums.NormalPointerType type, void* pointer);
        internal unsafe delegate void ColorPointervINTEL(GLint size, GL.Enums.VertexPointerType type, void* pointer);
        internal unsafe delegate void TexCoordPointervINTEL(GLint size, GL.Enums.VertexPointerType type, void* pointer);
        internal delegate void PixelTransformParameteriEXT(GL.Enums.EXT_pixel_transform target, GL.Enums.EXT_pixel_transform pname, GLint param);
        internal delegate void PixelTransformParameterfEXT(GL.Enums.EXT_pixel_transform target, GL.Enums.EXT_pixel_transform pname, GLfloat param);
        internal unsafe delegate void PixelTransformParameterivEXT(GL.Enums.EXT_pixel_transform target, GL.Enums.EXT_pixel_transform pname, GLint* @params);
        internal unsafe delegate void PixelTransformParameterfvEXT(GL.Enums.EXT_pixel_transform target, GL.Enums.EXT_pixel_transform pname, GLfloat* @params);
        internal delegate void SecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue);
        internal unsafe delegate void SecondaryColor3bvEXT(GLbyte* v);
        internal delegate void SecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue);
        internal unsafe delegate void SecondaryColor3dvEXT(GLdouble* v);
        internal delegate void SecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue);
        internal unsafe delegate void SecondaryColor3fvEXT(GLfloat* v);
        internal delegate void SecondaryColor3iEXT(GLint red, GLint green, GLint blue);
        internal unsafe delegate void SecondaryColor3ivEXT(GLint* v);
        internal delegate void SecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue);
        internal unsafe delegate void SecondaryColor3svEXT(GLshort* v);
        internal delegate void SecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue);
        internal unsafe delegate void SecondaryColor3ubvEXT(GLubyte* v);
        internal delegate void SecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue);
        internal unsafe delegate void SecondaryColor3uivEXT(GLuint* v);
        internal delegate void SecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue);
        internal unsafe delegate void SecondaryColor3usvEXT(GLushort* v);
        internal unsafe delegate void SecondaryColorPointerEXT(GLint size, GL.Enums.ColorPointerType type, GLsizei stride, void* pointer);
        internal delegate void TextureNormalEXT(GL.Enums.EXT_texture_perturb_normal mode);
        internal unsafe delegate void MultiDrawArraysEXT(GL.Enums.BeginMode mode, GLint* first, GLsizei* count, GLsizei primcount);
        internal unsafe delegate void MultiDrawElementsEXT(GL.Enums.BeginMode mode, GLsizei* count, GL.Enums.EXT_multi_draw_arrays type, void* indices, GLsizei primcount);
        internal delegate void FogCoordfEXT(GLfloat coord);
        internal unsafe delegate void FogCoordfvEXT(GLfloat* coord);
        internal delegate void FogCoorddEXT(GLdouble coord);
        internal unsafe delegate void FogCoorddvEXT(GLdouble* coord);
        internal unsafe delegate void FogCoordPointerEXT(GL.Enums.EXT_fog_coord type, GLsizei stride, void* pointer);
        internal delegate void Tangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz);
        internal unsafe delegate void Tangent3bvEXT(GLbyte* v);
        internal delegate void Tangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz);
        internal unsafe delegate void Tangent3dvEXT(GLdouble* v);
        internal delegate void Tangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz);
        internal unsafe delegate void Tangent3fvEXT(GLfloat* v);
        internal delegate void Tangent3iEXT(GLint tx, GLint ty, GLint tz);
        internal unsafe delegate void Tangent3ivEXT(GLint* v);
        internal delegate void Tangent3sEXT(GLshort tx, GLshort ty, GLshort tz);
        internal unsafe delegate void Tangent3svEXT(GLshort* v);
        internal delegate void Binormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz);
        internal unsafe delegate void Binormal3bvEXT(GLbyte* v);
        internal delegate void Binormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz);
        internal unsafe delegate void Binormal3dvEXT(GLdouble* v);
        internal delegate void Binormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz);
        internal unsafe delegate void Binormal3fvEXT(GLfloat* v);
        internal delegate void Binormal3iEXT(GLint bx, GLint by, GLint bz);
        internal unsafe delegate void Binormal3ivEXT(GLint* v);
        internal delegate void Binormal3sEXT(GLshort bx, GLshort by, GLshort bz);
        internal unsafe delegate void Binormal3svEXT(GLshort* v);
        internal unsafe delegate void TangentPointerEXT(GL.Enums.EXT_coordinate_frame type, GLsizei stride, void* pointer);
        internal unsafe delegate void BinormalPointerEXT(GL.Enums.EXT_coordinate_frame type, GLsizei stride, void* pointer);
        internal delegate void FinishTextureSUNX();
        internal delegate void GlobalAlphaFactorbSUN(GLbyte factor);
        internal delegate void GlobalAlphaFactorsSUN(GLshort factor);
        internal delegate void GlobalAlphaFactoriSUN(GLint factor);
        internal delegate void GlobalAlphaFactorfSUN(GLfloat factor);
        internal delegate void GlobalAlphaFactordSUN(GLdouble factor);
        internal delegate void GlobalAlphaFactorubSUN(GLubyte factor);
        internal delegate void GlobalAlphaFactorusSUN(GLushort factor);
        internal delegate void GlobalAlphaFactoruiSUN(GLuint factor);
        internal delegate void ReplacementCodeuiSUN(GLuint code);
        internal delegate void ReplacementCodeusSUN(GLushort code);
        internal delegate void ReplacementCodeubSUN(GLubyte code);
        internal unsafe delegate void ReplacementCodeuivSUN(GLuint* code);
        internal unsafe delegate void ReplacementCodeusvSUN(GLushort* code);
        internal unsafe delegate void ReplacementCodeubvSUN(GLubyte* code);
        internal unsafe delegate void ReplacementCodePointerSUN(GL.Enums.SUN_triangle_list type, GLsizei stride, void* pointer);
        internal delegate void Color4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
        internal unsafe delegate void Color4ubVertex2fvSUN(GLubyte* c, GLfloat* v);
        internal delegate void Color4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void Color4ubVertex3fvSUN(GLubyte* c, GLfloat* v);
        internal delegate void Color3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void Color3fVertex3fvSUN(GLfloat* c, GLfloat* v);
        internal delegate void Normal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void Normal3fVertex3fvSUN(GLfloat* n, GLfloat* v);
        internal delegate void Color4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void Color4fNormal3fVertex3fvSUN(GLfloat* c, GLfloat* n, GLfloat* v);
        internal delegate void TexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void TexCoord2fVertex3fvSUN(GLfloat* tc, GLfloat* v);
        internal delegate void TexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        internal unsafe delegate void TexCoord4fVertex4fvSUN(GLfloat* tc, GLfloat* v);
        internal delegate void TexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void TexCoord2fColor4ubVertex3fvSUN(GLfloat* tc, GLubyte* c, GLfloat* v);
        internal delegate void TexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void TexCoord2fColor3fVertex3fvSUN(GLfloat* tc, GLfloat* c, GLfloat* v);
        internal delegate void TexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void TexCoord2fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat* n, GLfloat* v);
        internal delegate void TexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat* c, GLfloat* n, GLfloat* v);
        internal delegate void TexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        internal unsafe delegate void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, GLfloat* c, GLfloat* n, GLfloat* v);
        internal delegate void ReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void ReplacementCodeuiVertex3fvSUN(GLuint* rc, GLfloat* v);
        internal delegate void ReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint* rc, GLubyte* c, GLfloat* v);
        internal delegate void ReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void ReplacementCodeuiColor3fVertex3fvSUN(GLuint* rc, GLfloat* c, GLfloat* v);
        internal delegate void ReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint* rc, GLfloat* n, GLfloat* v);
        internal delegate void ReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* c, GLfloat* n, GLfloat* v);
        internal delegate void ReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat* v);
        internal delegate void ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat* n, GLfloat* v);
        internal delegate void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat* c, GLfloat* n, GLfloat* v);
        internal delegate void BlendFuncSeparateEXT(GL.Enums.EXT_blend_func_separate sfactorRGB, GL.Enums.EXT_blend_func_separate dfactorRGB, GL.Enums.EXT_blend_func_separate sfactorAlpha, GL.Enums.EXT_blend_func_separate dfactorAlpha);
        internal delegate void BlendFuncSeparateINGR(GL.Enums.GLenum sfactorRGB, GL.Enums.GLenum dfactorRGB, GL.Enums.GLenum sfactorAlpha, GL.Enums.GLenum dfactorAlpha);
        internal delegate void VertexWeightfEXT(GLfloat weight);
        internal unsafe delegate void VertexWeightfvEXT(GLfloat* weight);
        internal unsafe delegate void VertexWeightPointerEXT(GLsizei size, GL.Enums.EXT_vertex_weighting type, GLsizei stride, void* pointer);
        internal delegate void FlushVertexArrayRangeNV();
        internal unsafe delegate void VertexArrayRangeNV(GLsizei length, void* pointer);
        internal unsafe delegate void CombinerParameterfvNV(GL.Enums.NV_register_combiners pname, GLfloat* @params);
        internal delegate void CombinerParameterfNV(GL.Enums.NV_register_combiners pname, GLfloat param);
        internal unsafe delegate void CombinerParameterivNV(GL.Enums.NV_register_combiners pname, GLint* @params);
        internal delegate void CombinerParameteriNV(GL.Enums.NV_register_combiners pname, GLint param);
        internal delegate void CombinerInputNV(GL.Enums.NV_register_combiners stage, GL.Enums.NV_register_combiners portion, GL.Enums.NV_register_combiners variable, GL.Enums.NV_register_combiners input, GL.Enums.NV_register_combiners mapping, GL.Enums.NV_register_combiners componentUsage);
        internal delegate void CombinerOutputNV(GL.Enums.NV_register_combiners stage, GL.Enums.NV_register_combiners portion, GL.Enums.NV_register_combiners abOutput, GL.Enums.NV_register_combiners cdOutput, GL.Enums.NV_register_combiners sumOutput, GL.Enums.NV_register_combiners scale, GL.Enums.NV_register_combiners bias, GL.Enums.Boolean abDotProduct, GL.Enums.Boolean cdDotProduct, GL.Enums.Boolean muxSum);
        internal delegate void FinalCombinerInputNV(GL.Enums.NV_register_combiners variable, GL.Enums.NV_register_combiners input, GL.Enums.NV_register_combiners mapping, GL.Enums.NV_register_combiners componentUsage);
        internal unsafe delegate void GetCombinerInputParameterfvNV(GL.Enums.NV_register_combiners stage, GL.Enums.NV_register_combiners portion, GL.Enums.NV_register_combiners variable, GL.Enums.NV_register_combiners pname, GLfloat* @params);
        internal unsafe delegate void GetCombinerInputParameterivNV(GL.Enums.NV_register_combiners stage, GL.Enums.NV_register_combiners portion, GL.Enums.NV_register_combiners variable, GL.Enums.NV_register_combiners pname, GLint* @params);
        internal unsafe delegate void GetCombinerOutputParameterfvNV(GL.Enums.NV_register_combiners stage, GL.Enums.NV_register_combiners portion, GL.Enums.NV_register_combiners pname, GLfloat* @params);
        internal unsafe delegate void GetCombinerOutputParameterivNV(GL.Enums.NV_register_combiners stage, GL.Enums.NV_register_combiners portion, GL.Enums.NV_register_combiners pname, GLint* @params);
        internal unsafe delegate void GetFinalCombinerInputParameterfvNV(GL.Enums.NV_register_combiners variable, GL.Enums.NV_register_combiners pname, GLfloat* @params);
        internal unsafe delegate void GetFinalCombinerInputParameterivNV(GL.Enums.NV_register_combiners variable, GL.Enums.NV_register_combiners pname, GLint* @params);
        internal delegate void ResizeBuffersMESA();
        internal delegate void WindowPos2dMESA(GLdouble x, GLdouble y);
        internal unsafe delegate void WindowPos2dvMESA(GLdouble* v);
        internal delegate void WindowPos2fMESA(GLfloat x, GLfloat y);
        internal unsafe delegate void WindowPos2fvMESA(GLfloat* v);
        internal delegate void WindowPos2iMESA(GLint x, GLint y);
        internal unsafe delegate void WindowPos2ivMESA(GLint* v);
        internal delegate void WindowPos2sMESA(GLshort x, GLshort y);
        internal unsafe delegate void WindowPos2svMESA(GLshort* v);
        internal delegate void WindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z);
        internal unsafe delegate void WindowPos3dvMESA(GLdouble* v);
        internal delegate void WindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void WindowPos3fvMESA(GLfloat* v);
        internal delegate void WindowPos3iMESA(GLint x, GLint y, GLint z);
        internal unsafe delegate void WindowPos3ivMESA(GLint* v);
        internal delegate void WindowPos3sMESA(GLshort x, GLshort y, GLshort z);
        internal unsafe delegate void WindowPos3svMESA(GLshort* v);
        internal delegate void WindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        internal unsafe delegate void WindowPos4dvMESA(GLdouble* v);
        internal delegate void WindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        internal unsafe delegate void WindowPos4fvMESA(GLfloat* v);
        internal delegate void WindowPos4iMESA(GLint x, GLint y, GLint z, GLint w);
        internal unsafe delegate void WindowPos4ivMESA(GLint* v);
        internal delegate void WindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w);
        internal unsafe delegate void WindowPos4svMESA(GLshort* v);
        internal unsafe delegate void MultiModeDrawArraysIBM(GL.Enums.BeginMode* mode, GLint* first, GLsizei* count, GLsizei primcount, GLint modestride);
        internal unsafe delegate void MultiModeDrawElementsIBM(GL.Enums.BeginMode* mode, GLsizei* count, GL.Enums.IBM_multimode_draw_arrays type, void* indices, GLsizei primcount, GLint modestride);
        internal unsafe delegate void ColorPointerListIBM(GLint size, GL.Enums.ColorPointerType type, GLint stride, void* pointer, GLint ptrstride);
        internal unsafe delegate void SecondaryColorPointerListIBM(GLint size, GL.Enums.IBM_vertex_array_lists type, GLint stride, void* pointer, GLint ptrstride);
        internal unsafe delegate void EdgeFlagPointerListIBM(GLint stride, GLboolean* pointer, GLint ptrstride);
        internal unsafe delegate void FogCoordPointerListIBM(GL.Enums.IBM_vertex_array_lists type, GLint stride, void* pointer, GLint ptrstride);
        internal unsafe delegate void IndexPointerListIBM(GL.Enums.IndexPointerType type, GLint stride, void* pointer, GLint ptrstride);
        internal unsafe delegate void NormalPointerListIBM(GL.Enums.NormalPointerType type, GLint stride, void* pointer, GLint ptrstride);
        internal unsafe delegate void TexCoordPointerListIBM(GLint size, GL.Enums.TexCoordPointerType type, GLint stride, void* pointer, GLint ptrstride);
        internal unsafe delegate void VertexPointerListIBM(GLint size, GL.Enums.VertexPointerType type, GLint stride, void* pointer, GLint ptrstride);
        internal delegate void TbufferMask3DFX(GLuint mask);
        internal delegate void SampleMaskEXT(GLclampf value, GL.Enums.Boolean invert);
        internal delegate void SamplePatternEXT(GL.Enums.EXT_multisample pattern);
        internal delegate void TextureColorMaskSGIS(GL.Enums.Boolean red, GL.Enums.Boolean green, GL.Enums.Boolean blue, GL.Enums.Boolean alpha);
        internal unsafe delegate void IglooInterfaceSGIX(GL.Enums.GLenum pname, void* @params);
        internal unsafe delegate void DeleteFencesNV(GLsizei n, GLuint* fences);
        internal unsafe delegate void GenFencesNV(GLsizei n, GLuint* fences);
        internal delegate GLboolean IsFenceNV(GLuint fence);
        internal delegate GLboolean TestFenceNV(GLuint fence);
        internal unsafe delegate void GetFenceivNV(GLuint fence, GL.Enums.NV_fence pname, GLint* @params);
        internal delegate void FinishFenceNV(GLuint fence);
        internal delegate void SetFenceNV(GLuint fence, GL.Enums.NV_fence condition);
        internal unsafe delegate void MapControlPointsNV(GL.Enums.NV_evaluators target, GLuint index, GL.Enums.NV_evaluators type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GL.Enums.Boolean packed, void* points);
        internal unsafe delegate void MapParameterivNV(GL.Enums.NV_evaluators target, GL.Enums.NV_evaluators pname, GLint* @params);
        internal unsafe delegate void MapParameterfvNV(GL.Enums.NV_evaluators target, GL.Enums.NV_evaluators pname, GLfloat* @params);
        internal unsafe delegate void GetMapControlPointsNV(GL.Enums.NV_evaluators target, GLuint index, GL.Enums.NV_evaluators type, GLsizei ustride, GLsizei vstride, GL.Enums.Boolean packed, void* points);
        internal unsafe delegate void GetMapParameterivNV(GL.Enums.NV_evaluators target, GL.Enums.NV_evaluators pname, GLint* @params);
        internal unsafe delegate void GetMapParameterfvNV(GL.Enums.NV_evaluators target, GL.Enums.NV_evaluators pname, GLfloat* @params);
        internal unsafe delegate void GetMapAttribParameterivNV(GL.Enums.NV_evaluators target, GLuint index, GL.Enums.NV_evaluators pname, GLint* @params);
        internal unsafe delegate void GetMapAttribParameterfvNV(GL.Enums.NV_evaluators target, GLuint index, GL.Enums.NV_evaluators pname, GLfloat* @params);
        internal delegate void EvalMapsNV(GL.Enums.NV_evaluators target, GL.Enums.NV_evaluators mode);
        internal unsafe delegate void CombinerStageParameterfvNV(GL.Enums.NV_register_combiners2 stage, GL.Enums.NV_register_combiners2 pname, GLfloat* @params);
        internal unsafe delegate void GetCombinerStageParameterfvNV(GL.Enums.NV_register_combiners2 stage, GL.Enums.NV_register_combiners2 pname, GLfloat* @params);
        internal unsafe delegate GLboolean AreProgramsResidentNV(GLsizei n, GLuint* programs, GL.Enums.Boolean* residences);
        internal delegate void BindProgramNV(GL.Enums.NV_vertex_program target, GLuint id);
        internal unsafe delegate void DeleteProgramsNV(GLsizei n, GLuint* programs);
        internal unsafe delegate void ExecuteProgramNV(GL.Enums.NV_vertex_program target, GLuint id, GLfloat* @params);
        internal unsafe delegate void GenProgramsNV(GLsizei n, GLuint* programs);
        internal unsafe delegate void GetProgramParameterdvNV(GL.Enums.NV_vertex_program target, GLuint index, GL.Enums.NV_vertex_program pname, GLdouble* @params);
        internal unsafe delegate void GetProgramParameterfvNV(GL.Enums.NV_vertex_program target, GLuint index, GL.Enums.NV_vertex_program pname, GLfloat* @params);
        internal unsafe delegate void GetProgramivNV(GLuint id, GL.Enums.NV_vertex_program pname, GLint* @params);
        internal unsafe delegate void GetProgramStringNV(GLuint id, GL.Enums.NV_vertex_program pname, GLubyte* program);
        internal unsafe delegate void GetTrackMatrixivNV(GL.Enums.NV_vertex_program target, GLuint address, GL.Enums.NV_vertex_program pname, GLint* @params);
        internal unsafe delegate void GetVertexAttribdvNV(GLuint index, GL.Enums.NV_vertex_program pname, GLdouble* @params);
        internal unsafe delegate void GetVertexAttribfvNV(GLuint index, GL.Enums.NV_vertex_program pname, GLfloat* @params);
        internal unsafe delegate void GetVertexAttribivNV(GLuint index, GL.Enums.NV_vertex_program pname, GLint* @params);
        internal unsafe delegate void GetVertexAttribPointervNV(GLuint index, GL.Enums.NV_vertex_program pname, void* pointer);
        internal delegate GLboolean IsProgramNV(GLuint id);
        internal unsafe delegate void LoadProgramNV(GL.Enums.NV_vertex_program target, GLuint id, GLsizei len, GLubyte* program);
        internal delegate void ProgramParameter4dNV(GL.Enums.NV_vertex_program target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        internal unsafe delegate void ProgramParameter4dvNV(GL.Enums.NV_vertex_program target, GLuint index, GLdouble* v);
        internal delegate void ProgramParameter4fNV(GL.Enums.NV_vertex_program target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        internal unsafe delegate void ProgramParameter4fvNV(GL.Enums.NV_vertex_program target, GLuint index, GLfloat* v);
        internal unsafe delegate void ProgramParameters4dvNV(GL.Enums.NV_vertex_program target, GLuint index, GLuint count, GLdouble* v);
        internal unsafe delegate void ProgramParameters4fvNV(GL.Enums.NV_vertex_program target, GLuint index, GLuint count, GLfloat* v);
        internal unsafe delegate void RequestResidentProgramsNV(GLsizei n, GLuint* programs);
        internal delegate void TrackMatrixNV(GL.Enums.NV_vertex_program target, GLuint address, GL.Enums.NV_vertex_program matrix, GL.Enums.NV_vertex_program transform);
        internal unsafe delegate void VertexAttribPointerNV(GLuint index, GLint fsize, GL.Enums.NV_vertex_program type, GLsizei stride, void* pointer);
        internal delegate void VertexAttrib1dNV(GLuint index, GLdouble x);
        internal unsafe delegate void VertexAttrib1dvNV(GLuint index, GLdouble* v);
        internal delegate void VertexAttrib1fNV(GLuint index, GLfloat x);
        internal unsafe delegate void VertexAttrib1fvNV(GLuint index, GLfloat* v);
        internal delegate void VertexAttrib1sNV(GLuint index, GLshort x);
        internal unsafe delegate void VertexAttrib1svNV(GLuint index, GLshort* v);
        internal delegate void VertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y);
        internal unsafe delegate void VertexAttrib2dvNV(GLuint index, GLdouble* v);
        internal delegate void VertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y);
        internal unsafe delegate void VertexAttrib2fvNV(GLuint index, GLfloat* v);
        internal delegate void VertexAttrib2sNV(GLuint index, GLshort x, GLshort y);
        internal unsafe delegate void VertexAttrib2svNV(GLuint index, GLshort* v);
        internal delegate void VertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z);
        internal unsafe delegate void VertexAttrib3dvNV(GLuint index, GLdouble* v);
        internal delegate void VertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void VertexAttrib3fvNV(GLuint index, GLfloat* v);
        internal delegate void VertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z);
        internal unsafe delegate void VertexAttrib3svNV(GLuint index, GLshort* v);
        internal delegate void VertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        internal unsafe delegate void VertexAttrib4dvNV(GLuint index, GLdouble* v);
        internal delegate void VertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        internal unsafe delegate void VertexAttrib4fvNV(GLuint index, GLfloat* v);
        internal delegate void VertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
        internal unsafe delegate void VertexAttrib4svNV(GLuint index, GLshort* v);
        internal delegate void VertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
        internal unsafe delegate void VertexAttrib4ubvNV(GLuint index, GLubyte* v);
        internal unsafe delegate void VertexAttribs1dvNV(GLuint index, GLsizei count, GLdouble* v);
        internal unsafe delegate void VertexAttribs1fvNV(GLuint index, GLsizei count, GLfloat* v);
        internal unsafe delegate void VertexAttribs1svNV(GLuint index, GLsizei count, GLshort* v);
        internal unsafe delegate void VertexAttribs2dvNV(GLuint index, GLsizei count, GLdouble* v);
        internal unsafe delegate void VertexAttribs2fvNV(GLuint index, GLsizei count, GLfloat* v);
        internal unsafe delegate void VertexAttribs2svNV(GLuint index, GLsizei count, GLshort* v);
        internal unsafe delegate void VertexAttribs3dvNV(GLuint index, GLsizei count, GLdouble* v);
        internal unsafe delegate void VertexAttribs3fvNV(GLuint index, GLsizei count, GLfloat* v);
        internal unsafe delegate void VertexAttribs3svNV(GLuint index, GLsizei count, GLshort* v);
        internal unsafe delegate void VertexAttribs4dvNV(GLuint index, GLsizei count, GLdouble* v);
        internal unsafe delegate void VertexAttribs4fvNV(GLuint index, GLsizei count, GLfloat* v);
        internal unsafe delegate void VertexAttribs4svNV(GLuint index, GLsizei count, GLshort* v);
        internal unsafe delegate void VertexAttribs4ubvNV(GLuint index, GLsizei count, GLubyte* v);
        internal unsafe delegate void TexBumpParameterivATI(GL.Enums.ATI_envmap_bumpmap pname, GLint* param);
        internal unsafe delegate void TexBumpParameterfvATI(GL.Enums.ATI_envmap_bumpmap pname, GLfloat* param);
        internal unsafe delegate void GetTexBumpParameterivATI(GL.Enums.ATI_envmap_bumpmap pname, GLint* param);
        internal unsafe delegate void GetTexBumpParameterfvATI(GL.Enums.ATI_envmap_bumpmap pname, GLfloat* param);
        internal delegate GLuint GenFragmentShadersATI(GLuint range);
        internal delegate void BindFragmentShaderATI(GLuint id);
        internal delegate void DeleteFragmentShaderATI(GLuint id);
        internal delegate void BeginFragmentShaderATI();
        internal delegate void EndFragmentShaderATI();
        internal delegate void PassTexCoordATI(GLuint dst, GLuint coord, GL.Enums.ATI_fragment_shader swizzle);
        internal delegate void SampleMapATI(GLuint dst, GLuint interp, GL.Enums.ATI_fragment_shader swizzle);
        internal delegate void ColorFragmentOp1ATI(GL.Enums.ATI_fragment_shader op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
        internal delegate void ColorFragmentOp2ATI(GL.Enums.ATI_fragment_shader op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
        internal delegate void ColorFragmentOp3ATI(GL.Enums.ATI_fragment_shader op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
        internal delegate void AlphaFragmentOp1ATI(GL.Enums.ATI_fragment_shader op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
        internal delegate void AlphaFragmentOp2ATI(GL.Enums.ATI_fragment_shader op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
        internal delegate void AlphaFragmentOp3ATI(GL.Enums.ATI_fragment_shader op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
        internal unsafe delegate void SetFragmentShaderConstantATI(GLuint dst, GLfloat* value);
        internal delegate void PNTrianglesiATI(GL.Enums.ATI_pn_triangles pname, GLint param);
        internal delegate void PNTrianglesfATI(GL.Enums.ATI_pn_triangles pname, GLfloat param);
        internal unsafe delegate GLuint NewObjectBufferATI(GLsizei size, void* pointer, GL.Enums.ATI_vertex_array_object usage);
        internal delegate GLboolean IsObjectBufferATI(GLuint buffer);
        internal unsafe delegate void UpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, void* pointer, GL.Enums.ATI_vertex_array_object preserve);
        internal unsafe delegate void GetObjectBufferfvATI(GLuint buffer, GL.Enums.ATI_vertex_array_object pname, GLfloat* @params);
        internal unsafe delegate void GetObjectBufferivATI(GLuint buffer, GL.Enums.ATI_vertex_array_object pname, GLint* @params);
        internal delegate void FreeObjectBufferATI(GLuint buffer);
        internal delegate void ArrayObjectATI(GL.Enums.EnableCap array, GLint size, GL.Enums.ATI_vertex_array_object type, GLsizei stride, GLuint buffer, GLuint offset);
        internal unsafe delegate void GetArrayObjectfvATI(GL.Enums.EnableCap array, GL.Enums.ATI_vertex_array_object pname, GLfloat* @params);
        internal unsafe delegate void GetArrayObjectivATI(GL.Enums.EnableCap array, GL.Enums.ATI_vertex_array_object pname, GLint* @params);
        internal delegate void VariantArrayObjectATI(GLuint id, GL.Enums.ATI_vertex_array_object type, GLsizei stride, GLuint buffer, GLuint offset);
        internal unsafe delegate void GetVariantArrayObjectfvATI(GLuint id, GL.Enums.ATI_vertex_array_object pname, GLfloat* @params);
        internal unsafe delegate void GetVariantArrayObjectivATI(GLuint id, GL.Enums.ATI_vertex_array_object pname, GLint* @params);
        internal delegate void BeginVertexShaderEXT();
        internal delegate void EndVertexShaderEXT();
        internal delegate void BindVertexShaderEXT(GLuint id);
        internal delegate GLuint GenVertexShadersEXT(GLuint range);
        internal delegate void DeleteVertexShaderEXT(GLuint id);
        internal delegate void ShaderOp1EXT(GL.Enums.EXT_vertex_shader op, GLuint res, GLuint arg1);
        internal delegate void ShaderOp2EXT(GL.Enums.EXT_vertex_shader op, GLuint res, GLuint arg1, GLuint arg2);
        internal delegate void ShaderOp3EXT(GL.Enums.EXT_vertex_shader op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
        internal delegate void SwizzleEXT(GLuint res, GLuint @in, GL.Enums.EXT_vertex_shader outX, GL.Enums.EXT_vertex_shader outY, GL.Enums.EXT_vertex_shader outZ, GL.Enums.EXT_vertex_shader outW);
        internal delegate void WriteMaskEXT(GLuint res, GLuint @in, GL.Enums.EXT_vertex_shader outX, GL.Enums.EXT_vertex_shader outY, GL.Enums.EXT_vertex_shader outZ, GL.Enums.EXT_vertex_shader outW);
        internal delegate void InsertComponentEXT(GLuint res, GLuint src, GLuint num);
        internal delegate void ExtractComponentEXT(GLuint res, GLuint src, GLuint num);
        internal delegate GLuint GenSymbolsEXT(GL.Enums.EXT_vertex_shader datatype, GL.Enums.EXT_vertex_shader storagetype, GL.Enums.EXT_vertex_shader range, GLuint components);
        internal unsafe delegate void SetInvariantEXT(GLuint id, GL.Enums.EXT_vertex_shader type, void* addr);
        internal unsafe delegate void SetLocalConstantEXT(GLuint id, GL.Enums.EXT_vertex_shader type, void* addr);
        internal unsafe delegate void VariantbvEXT(GLuint id, GLbyte* addr);
        internal unsafe delegate void VariantsvEXT(GLuint id, GLshort* addr);
        internal unsafe delegate void VariantivEXT(GLuint id, GLint* addr);
        internal unsafe delegate void VariantfvEXT(GLuint id, GLfloat* addr);
        internal unsafe delegate void VariantdvEXT(GLuint id, GLdouble* addr);
        internal unsafe delegate void VariantubvEXT(GLuint id, GLubyte* addr);
        internal unsafe delegate void VariantusvEXT(GLuint id, GLushort* addr);
        internal unsafe delegate void VariantuivEXT(GLuint id, GLuint* addr);
        internal unsafe delegate void VariantPointerEXT(GLuint id, GL.Enums.EXT_vertex_shader type, GLuint stride, void* addr);
        internal delegate void EnableVariantClientStateEXT(GLuint id);
        internal delegate void DisableVariantClientStateEXT(GLuint id);
        internal delegate GLuint BindLightParameterEXT(GL.Enums.LightName light, GL.Enums.LightParameter value);
        internal delegate GLuint BindMaterialParameterEXT(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter value);
        internal delegate GLuint BindTexGenParameterEXT(GL.Enums.EXT_vertex_shader unit, GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter value);
        internal delegate GLuint BindTextureUnitParameterEXT(GL.Enums.EXT_vertex_shader unit, GL.Enums.EXT_vertex_shader value);
        internal delegate GLuint BindParameterEXT(GL.Enums.EXT_vertex_shader value);
        internal delegate GLboolean IsVariantEnabledEXT(GLuint id, GL.Enums.EXT_vertex_shader cap);
        internal unsafe delegate void GetVariantBooleanvEXT(GLuint id, GL.Enums.EXT_vertex_shader value, GL.Enums.Boolean* data);
        internal unsafe delegate void GetVariantIntegervEXT(GLuint id, GL.Enums.EXT_vertex_shader value, GLint* data);
        internal unsafe delegate void GetVariantFloatvEXT(GLuint id, GL.Enums.EXT_vertex_shader value, GLfloat* data);
        internal unsafe delegate void GetVariantPointervEXT(GLuint id, GL.Enums.EXT_vertex_shader value, void* data);
        internal unsafe delegate void GetInvariantBooleanvEXT(GLuint id, GL.Enums.EXT_vertex_shader value, GL.Enums.Boolean* data);
        internal unsafe delegate void GetInvariantIntegervEXT(GLuint id, GL.Enums.EXT_vertex_shader value, GLint* data);
        internal unsafe delegate void GetInvariantFloatvEXT(GLuint id, GL.Enums.EXT_vertex_shader value, GLfloat* data);
        internal unsafe delegate void GetLocalConstantBooleanvEXT(GLuint id, GL.Enums.EXT_vertex_shader value, GL.Enums.Boolean* data);
        internal unsafe delegate void GetLocalConstantIntegervEXT(GLuint id, GL.Enums.EXT_vertex_shader value, GLint* data);
        internal unsafe delegate void GetLocalConstantFloatvEXT(GLuint id, GL.Enums.EXT_vertex_shader value, GLfloat* data);
        internal delegate void VertexStream1sATI(GL.Enums.ATI_vertex_streams stream, GLshort x);
        internal unsafe delegate void VertexStream1svATI(GL.Enums.ATI_vertex_streams stream, GLshort* coords);
        internal delegate void VertexStream1iATI(GL.Enums.ATI_vertex_streams stream, GLint x);
        internal unsafe delegate void VertexStream1ivATI(GL.Enums.ATI_vertex_streams stream, GLint* coords);
        internal delegate void VertexStream1fATI(GL.Enums.ATI_vertex_streams stream, GLfloat x);
        internal unsafe delegate void VertexStream1fvATI(GL.Enums.ATI_vertex_streams stream, GLfloat* coords);
        internal delegate void VertexStream1dATI(GL.Enums.ATI_vertex_streams stream, GLdouble x);
        internal unsafe delegate void VertexStream1dvATI(GL.Enums.ATI_vertex_streams stream, GLdouble* coords);
        internal delegate void VertexStream2sATI(GL.Enums.ATI_vertex_streams stream, GLshort x, GLshort y);
        internal unsafe delegate void VertexStream2svATI(GL.Enums.ATI_vertex_streams stream, GLshort* coords);
        internal delegate void VertexStream2iATI(GL.Enums.ATI_vertex_streams stream, GLint x, GLint y);
        internal unsafe delegate void VertexStream2ivATI(GL.Enums.ATI_vertex_streams stream, GLint* coords);
        internal delegate void VertexStream2fATI(GL.Enums.ATI_vertex_streams stream, GLfloat x, GLfloat y);
        internal unsafe delegate void VertexStream2fvATI(GL.Enums.ATI_vertex_streams stream, GLfloat* coords);
        internal delegate void VertexStream2dATI(GL.Enums.ATI_vertex_streams stream, GLdouble x, GLdouble y);
        internal unsafe delegate void VertexStream2dvATI(GL.Enums.ATI_vertex_streams stream, GLdouble* coords);
        internal delegate void VertexStream3sATI(GL.Enums.ATI_vertex_streams stream, GLshort x, GLshort y, GLshort z);
        internal unsafe delegate void VertexStream3svATI(GL.Enums.ATI_vertex_streams stream, GLshort* coords);
        internal delegate void VertexStream3iATI(GL.Enums.ATI_vertex_streams stream, GLint x, GLint y, GLint z);
        internal unsafe delegate void VertexStream3ivATI(GL.Enums.ATI_vertex_streams stream, GLint* coords);
        internal delegate void VertexStream3fATI(GL.Enums.ATI_vertex_streams stream, GLfloat x, GLfloat y, GLfloat z);
        internal unsafe delegate void VertexStream3fvATI(GL.Enums.ATI_vertex_streams stream, GLfloat* coords);
        internal delegate void VertexStream3dATI(GL.Enums.ATI_vertex_streams stream, GLdouble x, GLdouble y, GLdouble z);
        internal unsafe delegate void VertexStream3dvATI(GL.Enums.ATI_vertex_streams stream, GLdouble* coords);
        internal delegate void VertexStream4sATI(GL.Enums.ATI_vertex_streams stream, GLshort x, GLshort y, GLshort z, GLshort w);
        internal unsafe delegate void VertexStream4svATI(GL.Enums.ATI_vertex_streams stream, GLshort* coords);
        internal delegate void VertexStream4iATI(GL.Enums.ATI_vertex_streams stream, GLint x, GLint y, GLint z, GLint w);
        internal unsafe delegate void VertexStream4ivATI(GL.Enums.ATI_vertex_streams stream, GLint* coords);
        internal delegate void VertexStream4fATI(GL.Enums.ATI_vertex_streams stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        internal unsafe delegate void VertexStream4fvATI(GL.Enums.ATI_vertex_streams stream, GLfloat* coords);
        internal delegate void VertexStream4dATI(GL.Enums.ATI_vertex_streams stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        internal unsafe delegate void VertexStream4dvATI(GL.Enums.ATI_vertex_streams stream, GLdouble* coords);
        internal delegate void NormalStream3bATI(GL.Enums.ATI_vertex_streams stream, GLbyte nx, GLbyte ny, GLbyte nz);
        internal unsafe delegate void NormalStream3bvATI(GL.Enums.ATI_vertex_streams stream, GLbyte* coords);
        internal delegate void NormalStream3sATI(GL.Enums.ATI_vertex_streams stream, GLshort nx, GLshort ny, GLshort nz);
        internal unsafe delegate void NormalStream3svATI(GL.Enums.ATI_vertex_streams stream, GLshort* coords);
        internal delegate void NormalStream3iATI(GL.Enums.ATI_vertex_streams stream, GLint nx, GLint ny, GLint nz);
        internal unsafe delegate void NormalStream3ivATI(GL.Enums.ATI_vertex_streams stream, GLint* coords);
        internal delegate void NormalStream3fATI(GL.Enums.ATI_vertex_streams stream, GLfloat nx, GLfloat ny, GLfloat nz);
        internal unsafe delegate void NormalStream3fvATI(GL.Enums.ATI_vertex_streams stream, GLfloat* coords);
        internal delegate void NormalStream3dATI(GL.Enums.ATI_vertex_streams stream, GLdouble nx, GLdouble ny, GLdouble nz);
        internal unsafe delegate void NormalStream3dvATI(GL.Enums.ATI_vertex_streams stream, GLdouble* coords);
        internal delegate void ClientActiveVertexStreamATI(GL.Enums.ATI_vertex_streams stream);
        internal delegate void VertexBlendEnviATI(GL.Enums.ATI_vertex_streams pname, GLint param);
        internal delegate void VertexBlendEnvfATI(GL.Enums.ATI_vertex_streams pname, GLfloat param);
        internal unsafe delegate void ElementPointerATI(GL.Enums.ATI_element_array type, void* pointer);
        internal delegate void DrawElementArrayATI(GL.Enums.BeginMode mode, GLsizei count);
        internal delegate void DrawRangeElementArrayATI(GL.Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count);
        internal delegate void DrawMeshArraysSUN(GL.Enums.BeginMode mode, GLint first, GLsizei count, GLsizei width);
        internal unsafe delegate void GenOcclusionQueriesNV(GLsizei n, GLuint* ids);
        internal unsafe delegate void DeleteOcclusionQueriesNV(GLsizei n, GLuint* ids);
        internal delegate GLboolean IsOcclusionQueryNV(GLuint id);
        internal delegate void BeginOcclusionQueryNV(GLuint id);
        internal delegate void EndOcclusionQueryNV();
        internal unsafe delegate void GetOcclusionQueryivNV(GLuint id, GL.Enums.NV_occlusion_query pname, GLint* @params);
        internal unsafe delegate void GetOcclusionQueryuivNV(GLuint id, GL.Enums.NV_occlusion_query pname, GLuint* @params);
        internal delegate void PointParameteriNV(GL.Enums.NV_point_sprite pname, GLint param);
        internal unsafe delegate void PointParameterivNV(GL.Enums.NV_point_sprite pname, GLint* @params);
        internal delegate void ActiveStencilFaceEXT(GL.Enums.EXT_stencil_two_side face);
        internal unsafe delegate void ElementPointerAPPLE(GL.Enums.APPLE_element_array type, void* pointer);
        internal delegate void DrawElementArrayAPPLE(GL.Enums.BeginMode mode, GLint first, GLsizei count);
        internal delegate void DrawRangeElementArrayAPPLE(GL.Enums.BeginMode mode, GLuint start, GLuint end, GLint first, GLsizei count);
        internal unsafe delegate void MultiDrawElementArrayAPPLE(GL.Enums.BeginMode mode, GLint* first, GLsizei* count, GLsizei primcount);
        internal unsafe delegate void MultiDrawRangeElementArrayAPPLE(GL.Enums.BeginMode mode, GLuint start, GLuint end, GLint* first, GLsizei* count, GLsizei primcount);
        internal unsafe delegate void GenFencesAPPLE(GLsizei n, GLuint* fences);
        internal unsafe delegate void DeleteFencesAPPLE(GLsizei n, GLuint* fences);
        internal delegate void SetFenceAPPLE(GLuint fence);
        internal delegate GLboolean IsFenceAPPLE(GLuint fence);
        internal delegate GLboolean TestFenceAPPLE(GLuint fence);
        internal delegate void FinishFenceAPPLE(GLuint fence);
        internal delegate GLboolean TestObjectAPPLE(GL.Enums.APPLE_fence @object, GLuint name);
        internal delegate void FinishObjectAPPLE(GL.Enums.APPLE_fence @object, GLint name);
        internal delegate void BindVertexArrayAPPLE(GLuint array);
        internal unsafe delegate void DeleteVertexArraysAPPLE(GLsizei n, GLuint* arrays);
        internal unsafe delegate void GenVertexArraysAPPLE(GLsizei n, GLuint* arrays);
        internal delegate GLboolean IsVertexArrayAPPLE(GLuint array);
        internal unsafe delegate void VertexArrayRangeAPPLE(GLsizei length, void* pointer);
        internal unsafe delegate void FlushVertexArrayRangeAPPLE(GLsizei length, void* pointer);
        internal delegate void VertexArrayParameteriAPPLE(GL.Enums.APPLE_vertex_array_range pname, GLint param);
        internal unsafe delegate void DrawBuffersATI(GLsizei n, GL.Enums.ATI_draw_buffers* bufs);
        internal unsafe delegate void ProgramNamedParameter4fNV(GLuint id, GLsizei len, GLubyte* name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        internal unsafe delegate void ProgramNamedParameter4dNV(GLuint id, GLsizei len, GLubyte* name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        internal unsafe delegate void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte* name, GLfloat* v);
        internal unsafe delegate void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte* name, GLdouble* v);
        internal unsafe delegate void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte* name, GLfloat* @params);
        internal unsafe delegate void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte* name, GLdouble* @params);
        internal delegate void Vertex2hNV(GLhalfNV x, GLhalfNV y);
        internal unsafe delegate void Vertex2hvNV(GLhalfNV* v);
        internal delegate void Vertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z);
        internal unsafe delegate void Vertex3hvNV(GLhalfNV* v);
        internal delegate void Vertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
        internal unsafe delegate void Vertex4hvNV(GLhalfNV* v);
        internal delegate void Normal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
        internal unsafe delegate void Normal3hvNV(GLhalfNV* v);
        internal delegate void Color3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
        internal unsafe delegate void Color3hvNV(GLhalfNV* v);
        internal delegate void Color4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
        internal unsafe delegate void Color4hvNV(GLhalfNV* v);
        internal delegate void TexCoord1hNV(GLhalfNV s);
        internal unsafe delegate void TexCoord1hvNV(GLhalfNV* v);
        internal delegate void TexCoord2hNV(GLhalfNV s, GLhalfNV t);
        internal unsafe delegate void TexCoord2hvNV(GLhalfNV* v);
        internal delegate void TexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r);
        internal unsafe delegate void TexCoord3hvNV(GLhalfNV* v);
        internal delegate void TexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
        internal unsafe delegate void TexCoord4hvNV(GLhalfNV* v);
        internal delegate void MultiTexCoord1hNV(GL.Enums.NV_half_float target, GLhalfNV s);
        internal unsafe delegate void MultiTexCoord1hvNV(GL.Enums.NV_half_float target, GLhalfNV* v);
        internal delegate void MultiTexCoord2hNV(GL.Enums.NV_half_float target, GLhalfNV s, GLhalfNV t);
        internal unsafe delegate void MultiTexCoord2hvNV(GL.Enums.NV_half_float target, GLhalfNV* v);
        internal delegate void MultiTexCoord3hNV(GL.Enums.NV_half_float target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
        internal unsafe delegate void MultiTexCoord3hvNV(GL.Enums.NV_half_float target, GLhalfNV* v);
        internal delegate void MultiTexCoord4hNV(GL.Enums.NV_half_float target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
        internal unsafe delegate void MultiTexCoord4hvNV(GL.Enums.NV_half_float target, GLhalfNV* v);
        internal delegate void FogCoordhNV(GLhalfNV fog);
        internal unsafe delegate void FogCoordhvNV(GLhalfNV* fog);
        internal delegate void SecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
        internal unsafe delegate void SecondaryColor3hvNV(GLhalfNV* v);
        internal delegate void VertexWeighthNV(GLhalfNV weight);
        internal unsafe delegate void VertexWeighthvNV(GLhalfNV* weight);
        internal delegate void VertexAttrib1hNV(GLuint index, GLhalfNV x);
        internal unsafe delegate void VertexAttrib1hvNV(GLuint index, GLhalfNV* v);
        internal delegate void VertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y);
        internal unsafe delegate void VertexAttrib2hvNV(GLuint index, GLhalfNV* v);
        internal delegate void VertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
        internal unsafe delegate void VertexAttrib3hvNV(GLuint index, GLhalfNV* v);
        internal delegate void VertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
        internal unsafe delegate void VertexAttrib4hvNV(GLuint index, GLhalfNV* v);
        internal unsafe delegate void VertexAttribs1hvNV(GLuint index, GLsizei n, GLhalfNV* v);
        internal unsafe delegate void VertexAttribs2hvNV(GLuint index, GLsizei n, GLhalfNV* v);
        internal unsafe delegate void VertexAttribs3hvNV(GLuint index, GLsizei n, GLhalfNV* v);
        internal unsafe delegate void VertexAttribs4hvNV(GLuint index, GLsizei n, GLhalfNV* v);
        internal unsafe delegate void PixelDataRangeNV(GL.Enums.NV_pixel_data_range target, GLsizei length, void* pointer);
        internal delegate void FlushPixelDataRangeNV(GL.Enums.NV_pixel_data_range target);
        internal delegate void PrimitiveRestartNV();
        internal delegate void PrimitiveRestartIndexNV(GLuint index);
        internal delegate void MapObjectBufferATI(GLuint buffer);
        internal delegate void UnmapObjectBufferATI(GLuint buffer);
        internal delegate void StencilOpSeparateATI(GL.Enums.ATI_separate_stencil face, GL.Enums.StencilOp sfail, GL.Enums.StencilOp dpfail, GL.Enums.StencilOp dppass);
        internal delegate void StencilFuncSeparateATI(GL.Enums.StencilFunction frontfunc, GL.Enums.StencilFunction backfunc, GLint @ref, GLuint mask);
        internal delegate void VertexAttribArrayObjectATI(GLuint index, GLint size, GL.Enums.ATI_vertex_attrib_array_object type, GL.Enums.Boolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
        internal unsafe delegate void GetVertexAttribArrayObjectfvATI(GLuint index, GL.Enums.ATI_vertex_attrib_array_object pname, GLfloat* @params);
        internal unsafe delegate void GetVertexAttribArrayObjectivATI(GLuint index, GL.Enums.ATI_vertex_attrib_array_object pname, GLint* @params);
        internal delegate void DepthBoundsEXT(GLclampd zmin, GLclampd zmax);
        internal delegate void BlendEquationSeparateEXT(GL.Enums.BlendEquationModeEXT modeRGB, GL.Enums.BlendEquationModeEXT modeAlpha);
        internal delegate GLboolean IsRenderbufferEXT(GLuint renderbuffer);
        internal delegate void BindRenderbufferEXT(GL.Enums.EXT_framebuffer_object target, GLuint renderbuffer);
        internal unsafe delegate void DeleteRenderbuffersEXT(GLsizei n, GLuint* renderbuffers);
        internal unsafe delegate void GenRenderbuffersEXT(GLsizei n, GLuint* renderbuffers);
        internal delegate void RenderbufferStorageEXT(GL.Enums.EXT_framebuffer_object target, GL.Enums.GLenum internalformat, GLsizei width, GLsizei height);
        internal unsafe delegate void GetRenderbufferParameterivEXT(GL.Enums.EXT_framebuffer_object target, GL.Enums.GLenum pname, GLint* @params);
        internal delegate GLboolean IsFramebufferEXT(GLuint framebuffer);
        internal delegate void BindFramebufferEXT(GL.Enums.EXT_framebuffer_object target, GLuint framebuffer);
        internal unsafe delegate void DeleteFramebuffersEXT(GLsizei n, GLuint* framebuffers);
        internal unsafe delegate void GenFramebuffersEXT(GLsizei n, GLuint* framebuffers);
        internal delegate GL.Enums.GLenum CheckFramebufferStatusEXT(GL.Enums.EXT_framebuffer_object target);
        internal delegate void FramebufferTexture1DEXT(GL.Enums.EXT_framebuffer_object target, GL.Enums.EXT_framebuffer_object attachment, GL.Enums.GLenum textarget, GLuint texture, GLint level);
        internal delegate void FramebufferTexture2DEXT(GL.Enums.EXT_framebuffer_object target, GL.Enums.EXT_framebuffer_object attachment, GL.Enums.GLenum textarget, GLuint texture, GLint level);
        internal delegate void FramebufferTexture3DEXT(GL.Enums.EXT_framebuffer_object target, GL.Enums.EXT_framebuffer_object attachment, GL.Enums.GLenum textarget, GLuint texture, GLint level, GLint zoffset);
        internal delegate void FramebufferRenderbufferEXT(GL.Enums.EXT_framebuffer_object target, GL.Enums.EXT_framebuffer_object attachment, GL.Enums.EXT_framebuffer_object renderbuffertarget, GLuint renderbuffer);
        internal unsafe delegate void GetFramebufferAttachmentParameterivEXT(GL.Enums.EXT_framebuffer_object target, GL.Enums.EXT_framebuffer_object attachment, GL.Enums.GLenum pname, GLint* @params);
        internal delegate void GenerateMipmapEXT(GL.Enums.GLenum target);
        internal unsafe delegate void StringMarkerGREMEDY(GLsizei len, void* @string);
        internal delegate void StencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag);
        internal delegate void BlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GL.Enums.ClearBufferMask mask, GL.Enums.GLenum filter);
        internal delegate void RenderbufferStorageMultisampleEXT(GL.Enums.GLenum target, GLsizei samples, GL.Enums.GLenum internalformat, GLsizei width, GLsizei height);
        internal unsafe delegate void GetQueryObjecti64vEXT(GLuint id, GL.Enums.GLenum pname, GLint64EXT* @params);
        internal unsafe delegate void GetQueryObjectui64vEXT(GLuint id, GL.Enums.GLenum pname, GLuint64EXT* @params);
        internal unsafe delegate void ProgramEnvParameters4fvEXT(GL.Enums.EXT_gpu_program_parameters target, GLuint index, GLsizei count, GLfloat* @params);
        internal unsafe delegate void ProgramLocalParameters4fvEXT(GL.Enums.EXT_gpu_program_parameters target, GLuint index, GLsizei count, GLfloat* @params);
        internal delegate void BufferParameteriAPPLE(GL.Enums.GLenum target, GL.Enums.GLenum pname, GLint param);
        internal delegate void FlushMappedBufferRangeAPPLE(GL.Enums.GLenum target, GLintptr offset, GLsizeiptr size);
        internal delegate void ProgramLocalParameterI4iNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLint x, GLint y, GLint z, GLint w);
        internal unsafe delegate void ProgramLocalParameterI4ivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLint* @params);
        internal unsafe delegate void ProgramLocalParametersI4ivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLsizei count, GLint* @params);
        internal delegate void ProgramLocalParameterI4uiNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
        internal unsafe delegate void ProgramLocalParameterI4uivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLuint* @params);
        internal unsafe delegate void ProgramLocalParametersI4uivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLsizei count, GLuint* @params);
        internal delegate void ProgramEnvParameterI4iNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLint x, GLint y, GLint z, GLint w);
        internal unsafe delegate void ProgramEnvParameterI4ivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLint* @params);
        internal unsafe delegate void ProgramEnvParametersI4ivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLsizei count, GLint* @params);
        internal delegate void ProgramEnvParameterI4uiNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
        internal unsafe delegate void ProgramEnvParameterI4uivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLuint* @params);
        internal unsafe delegate void ProgramEnvParametersI4uivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLsizei count, GLuint* @params);
        internal unsafe delegate void GetProgramLocalParameterIivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLint* @params);
        internal unsafe delegate void GetProgramLocalParameterIuivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLuint* @params);
        internal unsafe delegate void GetProgramEnvParameterIivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLint* @params);
        internal unsafe delegate void GetProgramEnvParameterIuivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLuint* @params);
        internal delegate void ProgramVertexLimitNV(GL.Enums.NV_geometry_program4 target, GLint limit);
        internal delegate void FramebufferTextureEXT(GL.Enums.NV_geometry_program4 target, GL.Enums.NV_geometry_program4 attachment, GLuint texture, GLint level);
        internal delegate void FramebufferTextureLayerEXT(GL.Enums.NV_geometry_program4 target, GL.Enums.NV_geometry_program4 attachment, GLuint texture, GLint level, GLint layer);
        internal delegate void FramebufferTextureFaceEXT(GL.Enums.NV_geometry_program4 target, GL.Enums.NV_geometry_program4 attachment, GLuint texture, GLint level, GL.Enums.TextureTarget face);
        internal delegate void ProgramParameteriEXT(GLuint program, GL.Enums.EXT_geometry_shader4 pname, GLint value);
        internal delegate void VertexAttribI1iEXT(GLuint index, GLint x);
        internal delegate void VertexAttribI2iEXT(GLuint index, GLint x, GLint y);
        internal delegate void VertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z);
        internal delegate void VertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w);
        internal delegate void VertexAttribI1uiEXT(GLuint index, GLuint x);
        internal delegate void VertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y);
        internal delegate void VertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z);
        internal delegate void VertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
        internal unsafe delegate void VertexAttribI1ivEXT(GLuint index, GLint* v);
        internal unsafe delegate void VertexAttribI2ivEXT(GLuint index, GLint* v);
        internal unsafe delegate void VertexAttribI3ivEXT(GLuint index, GLint* v);
        internal unsafe delegate void VertexAttribI4ivEXT(GLuint index, GLint* v);
        internal unsafe delegate void VertexAttribI1uivEXT(GLuint index, GLuint* v);
        internal unsafe delegate void VertexAttribI2uivEXT(GLuint index, GLuint* v);
        internal unsafe delegate void VertexAttribI3uivEXT(GLuint index, GLuint* v);
        internal unsafe delegate void VertexAttribI4uivEXT(GLuint index, GLuint* v);
        internal unsafe delegate void VertexAttribI4bvEXT(GLuint index, GLbyte* v);
        internal unsafe delegate void VertexAttribI4svEXT(GLuint index, GLshort* v);
        internal unsafe delegate void VertexAttribI4ubvEXT(GLuint index, GLubyte* v);
        internal unsafe delegate void VertexAttribI4usvEXT(GLuint index, GLushort* v);
        internal unsafe delegate void VertexAttribIPointerEXT(GLuint index, GLint size, GL.Enums.NV_vertex_program4 type, GLsizei stride, void* pointer);
        internal unsafe delegate void GetVertexAttribIivEXT(GLuint index, GL.Enums.NV_vertex_program4 pname, GLint* @params);
        internal unsafe delegate void GetVertexAttribIuivEXT(GLuint index, GL.Enums.NV_vertex_program4 pname, GLuint* @params);
        internal unsafe delegate void GetUniformuivEXT(GLuint program, GLint location, GLuint* @params);
        internal unsafe delegate void BindFragDataLocationEXT(GLuint program, GLuint color, System.String name);
        internal unsafe delegate GLint GetFragDataLocationEXT(GLuint program, System.String name);
        internal delegate void Uniform1uiEXT(GLint location, GLuint v0);
        internal delegate void Uniform2uiEXT(GLint location, GLuint v0, GLuint v1);
        internal delegate void Uniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2);
        internal delegate void Uniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
        internal unsafe delegate void Uniform1uivEXT(GLint location, GLsizei count, GLuint* value);
        internal unsafe delegate void Uniform2uivEXT(GLint location, GLsizei count, GLuint* value);
        internal unsafe delegate void Uniform3uivEXT(GLint location, GLsizei count, GLuint* value);
        internal unsafe delegate void Uniform4uivEXT(GLint location, GLsizei count, GLuint* value);
        internal delegate void DrawArraysInstancedEXT(GL.Enums.BeginMode mode, GLint start, GLsizei count, GLsizei primcount);
        internal unsafe delegate void DrawElementsInstancedEXT(GL.Enums.BeginMode mode, GLsizei count, GL.Enums.EXT_draw_instanced type, void* indices, GLsizei primcount);
        internal delegate void TexBufferEXT(GL.Enums.TextureTarget target, GL.Enums.GLenum internalformat, GLuint buffer);
        internal delegate void DepthRangedNV(GLdouble zNear, GLdouble zFar);
        internal delegate void ClearDepthdNV(GLdouble depth);
        internal delegate void DepthBoundsdNV(GLdouble zmin, GLdouble zmax);
        internal delegate void RenderbufferStorageMultisampleCoverageNV(GL.Enums.NV_framebuffer_multisample_coverage target, GLsizei coverageSamples, GLsizei colorSamples, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height);
        internal unsafe delegate void ProgramBufferParametersfvNV(GL.Enums.NV_parameter_buffer_object target, GLuint buffer, GLuint index, GLsizei count, GLfloat* @params);
        internal unsafe delegate void ProgramBufferParametersIivNV(GL.Enums.NV_parameter_buffer_object target, GLuint buffer, GLuint index, GLsizei count, GLint* @params);
        internal unsafe delegate void ProgramBufferParametersIuivNV(GL.Enums.NV_parameter_buffer_object target, GLuint buffer, GLuint index, GLsizei count, GLuint* @params);
        internal delegate void ColorMaskIndexedEXT(GLuint index, GL.Enums.Boolean r, GL.Enums.Boolean g, GL.Enums.Boolean b, GL.Enums.Boolean a);
        internal unsafe delegate void GetBooleanIndexedvEXT(GL.Enums.GLenum target, GLuint index, GL.Enums.Boolean* data);
        internal unsafe delegate void GetIntegerIndexedvEXT(GL.Enums.GLenum target, GLuint index, GLint* data);
        internal delegate void EnableIndexedEXT(GL.Enums.GLenum target, GLuint index);
        internal delegate void DisableIndexedEXT(GL.Enums.GLenum target, GLuint index);
        internal delegate GLboolean IsEnabledIndexedEXT(GL.Enums.GLenum target, GLuint index);
        internal delegate void BeginTransformFeedbackNV(GL.Enums.GLenum primitiveMode);
        internal delegate void EndTransformFeedbackNV();
        internal unsafe delegate void TransformFeedbackAttribsNV(GLuint count, GLint* attribs, GL.Enums.GLenum bufferMode);
        internal delegate void BindBufferRangeNV(GL.Enums.GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
        internal delegate void BindBufferOffsetNV(GL.Enums.GLenum target, GLuint index, GLuint buffer, GLintptr offset);
        internal delegate void BindBufferBaseNV(GL.Enums.GLenum target, GLuint index, GLuint buffer);
        internal unsafe delegate void TransformFeedbackVaryingsNV(GLuint program, GLsizei count, GLint* locations, GL.Enums.GLenum bufferMode);
        internal unsafe delegate void ActiveVaryingNV(GLuint program, System.String name);
        internal unsafe delegate GLint GetVaryingLocationNV(GLuint program, System.String name);
        internal unsafe delegate void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GL.Enums.GLenum* type, System.Text.StringBuilder name);
        internal unsafe delegate void GetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint* location);
        internal delegate void UniformBufferEXT(GLuint program, GLint location, GLuint buffer);
        internal delegate GLint GetUniformBufferSizeEXT(GLuint program, GLint location);
        internal delegate GLintptr GetUniformOffsetEXT(GLuint program, GLint location);
        internal unsafe delegate void TexParameterIivEXT(GL.Enums.TextureTarget target, GL.Enums.TextureParameterName pname, GLint* @params);
        internal unsafe delegate void TexParameterIuivEXT(GL.Enums.TextureTarget target, GL.Enums.TextureParameterName pname, GLuint* @params);
        internal unsafe delegate void GetTexParameterIivEXT(GL.Enums.TextureTarget target, GL.Enums.GetTextureParameter pname, GLint* @params);
        internal unsafe delegate void GetTexParameterIuivEXT(GL.Enums.TextureTarget target, GL.Enums.GetTextureParameter pname, GLuint* @params);
        internal delegate void ClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha);
        internal delegate void ClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha);
    }
}
