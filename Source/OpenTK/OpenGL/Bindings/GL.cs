namespace OpenTK.OpenGL
{
    using GLsizei = System.Int32;
    using GLsizeiptr = System.IntPtr;
    using GLintptr = System.IntPtr;
    using GLboolean = System.Boolean;
    using GLbitfield = System.Int32;
    using GLchar = System.Char;
    using GLbyte = System.Byte;
    using GLubyte = System.Byte;
    using GLshort = System.Int16;
    using GLushort = System.Int16;
    using GLint = System.Int32;
    using GLuint = System.Int32;
    using GLfloat = System.Single;
    using GLclampf = System.Single;
    using GLdouble = System.Double;
    using GLclampd = System.Double;
    using GLstring = System.String;
    using GLsizeiptrARB = System.IntPtr;
    using GLintptrARB = System.IntPtr;
    using GLhandleARB = System.Int32;
    using GLhalfARB = System.Int16;
    using GLhalfNV = System.Int16;
    using GLcharARB = System.Char;
    using GLint64EXT = System.Int64;
    using GLuint64EXT = System.Int64;
    using GLint64 = System.Int64;
    using GLuint64 = System.Int64;

    public static partial class GL
    {
        static GL() { }

        public static 
        void NewList(GLuint list, GL.Enums.ListMode mode)
        {
            Delegates.glNewList(list, mode);
        }
        
        public static 
        void EndList()
        {
            Delegates.glEndList();
        }
        
        public static 
        void CallList(GLuint list)
        {
            Delegates.glCallList(list);
        }
        
        public static 
        unsafe void CallLists(GLsizei n, GL.Enums.ListNameType type, void* lists)
        {
            Delegates.glCallLists(n, type, lists);
        }
        
        public static 
        void CallLists(GLsizei n, GL.Enums.ListNameType type, object lists)
        {
            System.Runtime.InteropServices.GCHandle lists_ptr = System.Runtime.InteropServices.GCHandle.Alloc(lists, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glCallLists(n, type, (void*)lists_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    lists_ptr.Free();
                }
            }
        }
        
        public static 
        void DeleteLists(GLuint list, GLsizei range)
        {
            Delegates.glDeleteLists(list, range);
        }
        
        public static 
        GLuint GenLists(GLsizei range)
        {
            return Delegates.glGenLists(range);
        }
        
        public static 
        void ListBase(GLuint @base)
        {
            Delegates.glListBase(@base);
        }
        
        public static 
        void Begin(GL.Enums.BeginMode mode)
        {
            Delegates.glBegin(mode);
        }
        
        public static 
        unsafe void Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, GLubyte* bitmap)
        {
            Delegates.glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
        }
        
        public static 
        void Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, GLubyte[] bitmap)
        {
            unsafe
            {
                fixed (GLubyte* bitmap_ptr = bitmap)
                {
                    Delegates.glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap_ptr);
                }
            }
        }
        
        public static 
        void Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, ref GLubyte bitmap)
        {
            unsafe
            {
                fixed (GLubyte* bitmap_ptr = &bitmap)
                {
                    Delegates.glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap_ptr);
                }
            }
        }
        
        public static 
        void Color3b(GLbyte red, GLbyte green, GLbyte blue)
        {
            Delegates.glColor3b(red, green, blue);
        }
        
        public static 
        unsafe void Color3bv(GLbyte* v)
        {
            Delegates.glColor3bv(v);
        }
        
        public static 
        void Color3bv(GLbyte[] v)
        {
            unsafe
            {
                fixed (GLbyte* v_ptr = v)
                {
                    Delegates.glColor3bv(v_ptr);
                }
            }
        }
        
        public static 
        void Color3bv(ref GLbyte v)
        {
            unsafe
            {
                fixed (GLbyte* v_ptr = &v)
                {
                    Delegates.glColor3bv(v_ptr);
                }
            }
        }
        
        public static 
        void Color3d(GLdouble red, GLdouble green, GLdouble blue)
        {
            Delegates.glColor3d(red, green, blue);
        }
        
        public static 
        unsafe void Color3dv(GLdouble* v)
        {
            Delegates.glColor3dv(v);
        }
        
        public static 
        void Color3dv(GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glColor3dv(v_ptr);
                }
            }
        }
        
        public static 
        void Color3dv(ref GLdouble v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glColor3dv(v_ptr);
                }
            }
        }
        
        public static 
        void Color3f(GLfloat red, GLfloat green, GLfloat blue)
        {
            Delegates.glColor3f(red, green, blue);
        }
        
        public static 
        unsafe void Color3fv(GLfloat* v)
        {
            Delegates.glColor3fv(v);
        }
        
        public static 
        void Color3fv(GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glColor3fv(v_ptr);
                }
            }
        }
        
        public static 
        void Color3fv(ref GLfloat v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glColor3fv(v_ptr);
                }
            }
        }
        
        public static 
        void Color3i(GLint red, GLint green, GLint blue)
        {
            Delegates.glColor3i(red, green, blue);
        }
        
        public static 
        unsafe void Color3iv(GLint* v)
        {
            Delegates.glColor3iv(v);
        }
        
        public static 
        void Color3iv(GLint[] v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = v)
                {
                    Delegates.glColor3iv(v_ptr);
                }
            }
        }
        
        public static 
        void Color3iv(ref GLint v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = &v)
                {
                    Delegates.glColor3iv(v_ptr);
                }
            }
        }
        
        public static 
        void Color3s(GLshort red, GLshort green, GLshort blue)
        {
            Delegates.glColor3s(red, green, blue);
        }
        
        public static 
        unsafe void Color3sv(GLshort* v)
        {
            Delegates.glColor3sv(v);
        }
        
        public static 
        void Color3sv(GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glColor3sv(v_ptr);
                }
            }
        }
        
        public static 
        void Color3sv(ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glColor3sv(v_ptr);
                }
            }
        }
        
        public static 
        void Color3ub(GLubyte red, GLubyte green, GLubyte blue)
        {
            Delegates.glColor3ub(red, green, blue);
        }
        
        public static 
        unsafe void Color3ubv(GLubyte* v)
        {
            Delegates.glColor3ubv(v);
        }
        
        public static 
        void Color3ubv(GLubyte[] v)
        {
            unsafe
            {
                fixed (GLubyte* v_ptr = v)
                {
                    Delegates.glColor3ubv(v_ptr);
                }
            }
        }
        
        public static 
        void Color3ubv(ref GLubyte v)
        {
            unsafe
            {
                fixed (GLubyte* v_ptr = &v)
                {
                    Delegates.glColor3ubv(v_ptr);
                }
            }
        }
        
        public static 
        void Color3ui(GLuint red, GLuint green, GLuint blue)
        {
            Delegates.glColor3ui(red, green, blue);
        }
        
        public static 
        unsafe void Color3uiv(GLuint* v)
        {
            Delegates.glColor3uiv(v);
        }
        
        public static 
        void Color3uiv(GLuint[] v)
        {
            unsafe
            {
                fixed (GLuint* v_ptr = v)
                {
                    Delegates.glColor3uiv(v_ptr);
                }
            }
        }
        
        public static 
        void Color3uiv(ref GLuint v)
        {
            unsafe
            {
                fixed (GLuint* v_ptr = &v)
                {
                    Delegates.glColor3uiv(v_ptr);
                }
            }
        }
        
        public static 
        void Color3us(GLushort red, GLushort green, GLushort blue)
        {
            Delegates.glColor3us(red, green, blue);
        }
        
        public static 
        unsafe void Color3usv(GLushort* v)
        {
            Delegates.glColor3usv(v);
        }
        
        public static 
        void Color3usv(GLushort[] v)
        {
            unsafe
            {
                fixed (GLushort* v_ptr = v)
                {
                    Delegates.glColor3usv(v_ptr);
                }
            }
        }
        
        public static 
        void Color3usv(ref GLushort v)
        {
            unsafe
            {
                fixed (GLushort* v_ptr = &v)
                {
                    Delegates.glColor3usv(v_ptr);
                }
            }
        }
        
        public static 
        void Color4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
        {
            Delegates.glColor4b(red, green, blue, alpha);
        }
        
        public static 
        unsafe void Color4bv(GLbyte* v)
        {
            Delegates.glColor4bv(v);
        }
        
        public static 
        void Color4bv(GLbyte[] v)
        {
            unsafe
            {
                fixed (GLbyte* v_ptr = v)
                {
                    Delegates.glColor4bv(v_ptr);
                }
            }
        }
        
        public static 
        void Color4bv(ref GLbyte v)
        {
            unsafe
            {
                fixed (GLbyte* v_ptr = &v)
                {
                    Delegates.glColor4bv(v_ptr);
                }
            }
        }
        
        public static 
        void Color4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
        {
            Delegates.glColor4d(red, green, blue, alpha);
        }
        
        public static 
        unsafe void Color4dv(GLdouble* v)
        {
            Delegates.glColor4dv(v);
        }
        
        public static 
        void Color4dv(GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glColor4dv(v_ptr);
                }
            }
        }
        
        public static 
        void Color4dv(ref GLdouble v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glColor4dv(v_ptr);
                }
            }
        }
        
        public static 
        void Color4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
        {
            Delegates.glColor4f(red, green, blue, alpha);
        }
        
        public static 
        unsafe void Color4fv(GLfloat* v)
        {
            Delegates.glColor4fv(v);
        }
        
        public static 
        void Color4fv(GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glColor4fv(v_ptr);
                }
            }
        }
        
        public static 
        void Color4fv(ref GLfloat v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glColor4fv(v_ptr);
                }
            }
        }
        
        public static 
        void Color4i(GLint red, GLint green, GLint blue, GLint alpha)
        {
            Delegates.glColor4i(red, green, blue, alpha);
        }
        
        public static 
        unsafe void Color4iv(GLint* v)
        {
            Delegates.glColor4iv(v);
        }
        
        public static 
        void Color4iv(GLint[] v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = v)
                {
                    Delegates.glColor4iv(v_ptr);
                }
            }
        }
        
        public static 
        void Color4iv(ref GLint v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = &v)
                {
                    Delegates.glColor4iv(v_ptr);
                }
            }
        }
        
        public static 
        void Color4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)
        {
            Delegates.glColor4s(red, green, blue, alpha);
        }
        
        public static 
        unsafe void Color4sv(GLshort* v)
        {
            Delegates.glColor4sv(v);
        }
        
        public static 
        void Color4sv(GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glColor4sv(v_ptr);
                }
            }
        }
        
        public static 
        void Color4sv(ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glColor4sv(v_ptr);
                }
            }
        }
        
        public static 
        void Color4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
        {
            Delegates.glColor4ub(red, green, blue, alpha);
        }
        
        public static 
        unsafe void Color4ubv(GLubyte* v)
        {
            Delegates.glColor4ubv(v);
        }
        
        public static 
        void Color4ubv(GLubyte[] v)
        {
            unsafe
            {
                fixed (GLubyte* v_ptr = v)
                {
                    Delegates.glColor4ubv(v_ptr);
                }
            }
        }
        
        public static 
        void Color4ubv(ref GLubyte v)
        {
            unsafe
            {
                fixed (GLubyte* v_ptr = &v)
                {
                    Delegates.glColor4ubv(v_ptr);
                }
            }
        }
        
        public static 
        void Color4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)
        {
            Delegates.glColor4ui(red, green, blue, alpha);
        }
        
        public static 
        unsafe void Color4uiv(GLuint* v)
        {
            Delegates.glColor4uiv(v);
        }
        
        public static 
        void Color4uiv(GLuint[] v)
        {
            unsafe
            {
                fixed (GLuint* v_ptr = v)
                {
                    Delegates.glColor4uiv(v_ptr);
                }
            }
        }
        
        public static 
        void Color4uiv(ref GLuint v)
        {
            unsafe
            {
                fixed (GLuint* v_ptr = &v)
                {
                    Delegates.glColor4uiv(v_ptr);
                }
            }
        }
        
        public static 
        void Color4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)
        {
            Delegates.glColor4us(red, green, blue, alpha);
        }
        
        public static 
        unsafe void Color4usv(GLushort* v)
        {
            Delegates.glColor4usv(v);
        }
        
        public static 
        void Color4usv(GLushort[] v)
        {
            unsafe
            {
                fixed (GLushort* v_ptr = v)
                {
                    Delegates.glColor4usv(v_ptr);
                }
            }
        }
        
        public static 
        void Color4usv(ref GLushort v)
        {
            unsafe
            {
                fixed (GLushort* v_ptr = &v)
                {
                    Delegates.glColor4usv(v_ptr);
                }
            }
        }
        
        public static 
        unsafe void EdgeFlagv(GL.Enums.Boolean* flag)
        {
            Delegates.glEdgeFlagv(flag);
        }
        
        public static 
        void End()
        {
            Delegates.glEnd();
        }
        
        public static 
        void Indexd(GLdouble c)
        {
            Delegates.glIndexd(c);
        }
        
        public static 
        unsafe void Indexdv(GLdouble* c)
        {
            Delegates.glIndexdv(c);
        }
        
        public static 
        void Indexdv(GLdouble[] c)
        {
            unsafe
            {
                fixed (GLdouble* c_ptr = c)
                {
                    Delegates.glIndexdv(c_ptr);
                }
            }
        }
        
        public static 
        void Indexdv(ref GLdouble c)
        {
            unsafe
            {
                fixed (GLdouble* c_ptr = &c)
                {
                    Delegates.glIndexdv(c_ptr);
                }
            }
        }
        
        public static 
        void Indexf(GLfloat c)
        {
            Delegates.glIndexf(c);
        }
        
        public static 
        unsafe void Indexfv(GLfloat* c)
        {
            Delegates.glIndexfv(c);
        }
        
        public static 
        void Indexfv(GLfloat[] c)
        {
            unsafe
            {
                fixed (GLfloat* c_ptr = c)
                {
                    Delegates.glIndexfv(c_ptr);
                }
            }
        }
        
        public static 
        void Indexfv(ref GLfloat c)
        {
            unsafe
            {
                fixed (GLfloat* c_ptr = &c)
                {
                    Delegates.glIndexfv(c_ptr);
                }
            }
        }
        
        public static 
        void Indexi(GLint c)
        {
            Delegates.glIndexi(c);
        }
        
        public static 
        unsafe void Indexiv(GLint* c)
        {
            Delegates.glIndexiv(c);
        }
        
        public static 
        void Indexiv(GLint[] c)
        {
            unsafe
            {
                fixed (GLint* c_ptr = c)
                {
                    Delegates.glIndexiv(c_ptr);
                }
            }
        }
        
        public static 
        void Indexiv(ref GLint c)
        {
            unsafe
            {
                fixed (GLint* c_ptr = &c)
                {
                    Delegates.glIndexiv(c_ptr);
                }
            }
        }
        
        public static 
        void Indexs(GLshort c)
        {
            Delegates.glIndexs(c);
        }
        
        public static 
        unsafe void Indexsv(GLshort* c)
        {
            Delegates.glIndexsv(c);
        }
        
        public static 
        void Indexsv(GLshort[] c)
        {
            unsafe
            {
                fixed (GLshort* c_ptr = c)
                {
                    Delegates.glIndexsv(c_ptr);
                }
            }
        }
        
        public static 
        void Indexsv(ref GLshort c)
        {
            unsafe
            {
                fixed (GLshort* c_ptr = &c)
                {
                    Delegates.glIndexsv(c_ptr);
                }
            }
        }
        
        public static 
        void Normal3b(GLbyte nx, GLbyte ny, GLbyte nz)
        {
            Delegates.glNormal3b(nx, ny, nz);
        }
        
        public static 
        unsafe void Normal3bv(GLbyte* v)
        {
            Delegates.glNormal3bv(v);
        }
        
        public static 
        void Normal3bv(GLbyte[] v)
        {
            unsafe
            {
                fixed (GLbyte* v_ptr = v)
                {
                    Delegates.glNormal3bv(v_ptr);
                }
            }
        }
        
        public static 
        void Normal3bv(ref GLbyte v)
        {
            unsafe
            {
                fixed (GLbyte* v_ptr = &v)
                {
                    Delegates.glNormal3bv(v_ptr);
                }
            }
        }
        
        public static 
        void Normal3d(GLdouble nx, GLdouble ny, GLdouble nz)
        {
            Delegates.glNormal3d(nx, ny, nz);
        }
        
        public static 
        unsafe void Normal3dv(GLdouble* v)
        {
            Delegates.glNormal3dv(v);
        }
        
        public static 
        void Normal3dv(GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glNormal3dv(v_ptr);
                }
            }
        }
        
        public static 
        void Normal3dv(ref GLdouble v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glNormal3dv(v_ptr);
                }
            }
        }
        
        public static 
        void Normal3f(GLfloat nx, GLfloat ny, GLfloat nz)
        {
            Delegates.glNormal3f(nx, ny, nz);
        }
        
        public static 
        unsafe void Normal3fv(GLfloat* v)
        {
            Delegates.glNormal3fv(v);
        }
        
        public static 
        void Normal3fv(GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glNormal3fv(v_ptr);
                }
            }
        }
        
        public static 
        void Normal3fv(ref GLfloat v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glNormal3fv(v_ptr);
                }
            }
        }
        
        public static 
        void Normal3i(GLint nx, GLint ny, GLint nz)
        {
            Delegates.glNormal3i(nx, ny, nz);
        }
        
        public static 
        unsafe void Normal3iv(GLint* v)
        {
            Delegates.glNormal3iv(v);
        }
        
        public static 
        void Normal3iv(GLint[] v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = v)
                {
                    Delegates.glNormal3iv(v_ptr);
                }
            }
        }
        
        public static 
        void Normal3iv(ref GLint v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = &v)
                {
                    Delegates.glNormal3iv(v_ptr);
                }
            }
        }
        
        public static 
        void Normal3s(GLshort nx, GLshort ny, GLshort nz)
        {
            Delegates.glNormal3s(nx, ny, nz);
        }
        
        public static 
        unsafe void Normal3sv(GLshort* v)
        {
            Delegates.glNormal3sv(v);
        }
        
        public static 
        void Normal3sv(GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glNormal3sv(v_ptr);
                }
            }
        }
        
        public static 
        void Normal3sv(ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glNormal3sv(v_ptr);
                }
            }
        }
        
        public static 
        void RasterPos2d(GLdouble x, GLdouble y)
        {
            Delegates.glRasterPos2d(x, y);
        }
        
        public static 
        unsafe void RasterPos2dv(GLdouble* v)
        {
            Delegates.glRasterPos2dv(v);
        }
        
        public static 
        void RasterPos2dv(GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glRasterPos2dv(v_ptr);
                }
            }
        }
        
        public static 
        void RasterPos2dv(ref GLdouble v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glRasterPos2dv(v_ptr);
                }
            }
        }
        
        public static 
        void RasterPos2f(GLfloat x, GLfloat y)
        {
            Delegates.glRasterPos2f(x, y);
        }
        
        public static 
        unsafe void RasterPos2fv(GLfloat* v)
        {
            Delegates.glRasterPos2fv(v);
        }
        
        public static 
        void RasterPos2fv(GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glRasterPos2fv(v_ptr);
                }
            }
        }
        
        public static 
        void RasterPos2fv(ref GLfloat v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glRasterPos2fv(v_ptr);
                }
            }
        }
        
        public static 
        void RasterPos2i(GLint x, GLint y)
        {
            Delegates.glRasterPos2i(x, y);
        }
        
        public static 
        unsafe void RasterPos2iv(GLint* v)
        {
            Delegates.glRasterPos2iv(v);
        }
        
        public static 
        void RasterPos2iv(GLint[] v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = v)
                {
                    Delegates.glRasterPos2iv(v_ptr);
                }
            }
        }
        
        public static 
        void RasterPos2iv(ref GLint v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = &v)
                {
                    Delegates.glRasterPos2iv(v_ptr);
                }
            }
        }
        
        public static 
        void RasterPos2s(GLshort x, GLshort y)
        {
            Delegates.glRasterPos2s(x, y);
        }
        
        public static 
        unsafe void RasterPos2sv(GLshort* v)
        {
            Delegates.glRasterPos2sv(v);
        }
        
        public static 
        void RasterPos2sv(GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glRasterPos2sv(v_ptr);
                }
            }
        }
        
        public static 
        void RasterPos2sv(ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glRasterPos2sv(v_ptr);
                }
            }
        }
        
        public static 
        void RasterPos3d(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glRasterPos3d(x, y, z);
        }
        
        public static 
        unsafe void RasterPos3dv(GLdouble* v)
        {
            Delegates.glRasterPos3dv(v);
        }
        
        public static 
        void RasterPos3dv(GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glRasterPos3dv(v_ptr);
                }
            }
        }
        
        public static 
        void RasterPos3dv(ref GLdouble v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glRasterPos3dv(v_ptr);
                }
            }
        }
        
        public static 
        void RasterPos3f(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glRasterPos3f(x, y, z);
        }
        
        public static 
        unsafe void RasterPos3fv(GLfloat* v)
        {
            Delegates.glRasterPos3fv(v);
        }
        
        public static 
        void RasterPos3fv(GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glRasterPos3fv(v_ptr);
                }
            }
        }
        
        public static 
        void RasterPos3fv(ref GLfloat v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glRasterPos3fv(v_ptr);
                }
            }
        }
        
        public static 
        void RasterPos3i(GLint x, GLint y, GLint z)
        {
            Delegates.glRasterPos3i(x, y, z);
        }
        
        public static 
        unsafe void RasterPos3iv(GLint* v)
        {
            Delegates.glRasterPos3iv(v);
        }
        
        public static 
        void RasterPos3iv(GLint[] v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = v)
                {
                    Delegates.glRasterPos3iv(v_ptr);
                }
            }
        }
        
        public static 
        void RasterPos3iv(ref GLint v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = &v)
                {
                    Delegates.glRasterPos3iv(v_ptr);
                }
            }
        }
        
        public static 
        void RasterPos3s(GLshort x, GLshort y, GLshort z)
        {
            Delegates.glRasterPos3s(x, y, z);
        }
        
        public static 
        unsafe void RasterPos3sv(GLshort* v)
        {
            Delegates.glRasterPos3sv(v);
        }
        
        public static 
        void RasterPos3sv(GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glRasterPos3sv(v_ptr);
                }
            }
        }
        
        public static 
        void RasterPos3sv(ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glRasterPos3sv(v_ptr);
                }
            }
        }
        
        public static 
        void RasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glRasterPos4d(x, y, z, w);
        }
        
        public static 
        unsafe void RasterPos4dv(GLdouble* v)
        {
            Delegates.glRasterPos4dv(v);
        }
        
        public static 
        void RasterPos4dv(GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glRasterPos4dv(v_ptr);
                }
            }
        }
        
        public static 
        void RasterPos4dv(ref GLdouble v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glRasterPos4dv(v_ptr);
                }
            }
        }
        
        public static 
        void RasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glRasterPos4f(x, y, z, w);
        }
        
        public static 
        unsafe void RasterPos4fv(GLfloat* v)
        {
            Delegates.glRasterPos4fv(v);
        }
        
        public static 
        void RasterPos4fv(GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glRasterPos4fv(v_ptr);
                }
            }
        }
        
        public static 
        void RasterPos4fv(ref GLfloat v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glRasterPos4fv(v_ptr);
                }
            }
        }
        
        public static 
        void RasterPos4i(GLint x, GLint y, GLint z, GLint w)
        {
            Delegates.glRasterPos4i(x, y, z, w);
        }
        
        public static 
        unsafe void RasterPos4iv(GLint* v)
        {
            Delegates.glRasterPos4iv(v);
        }
        
        public static 
        void RasterPos4iv(GLint[] v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = v)
                {
                    Delegates.glRasterPos4iv(v_ptr);
                }
            }
        }
        
        public static 
        void RasterPos4iv(ref GLint v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = &v)
                {
                    Delegates.glRasterPos4iv(v_ptr);
                }
            }
        }
        
        public static 
        void RasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)
        {
            Delegates.glRasterPos4s(x, y, z, w);
        }
        
        public static 
        unsafe void RasterPos4sv(GLshort* v)
        {
            Delegates.glRasterPos4sv(v);
        }
        
        public static 
        void RasterPos4sv(GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glRasterPos4sv(v_ptr);
                }
            }
        }
        
        public static 
        void RasterPos4sv(ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glRasterPos4sv(v_ptr);
                }
            }
        }
        
        public static 
        void Rectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
        {
            Delegates.glRectd(x1, y1, x2, y2);
        }
        
        public static 
        unsafe void Rectdv(GLdouble* v1, GLdouble* v2)
        {
            Delegates.glRectdv(v1, v2);
        }
        
        public static 
        unsafe void Rectdv(GLdouble* v1, GLdouble[] v2)
        {
                fixed (GLdouble* v2_ptr = v2)
                {
                    Delegates.glRectdv(v1, v2_ptr);
                }
        }
        
        public static 
        unsafe void Rectdv(GLdouble* v1, ref GLdouble v2)
        {
                fixed (GLdouble* v2_ptr = &v2)
                {
                    Delegates.glRectdv(v1, v2_ptr);
                }
        }
        
        public static 
        unsafe void Rectdv(GLdouble[] v1, GLdouble* v2)
        {
                fixed (GLdouble* v1_ptr = v1)
                {
                    Delegates.glRectdv(v1_ptr, v2);
                }
        }
        
        public static 
        void Rectdv(GLdouble[] v1, GLdouble[] v2)
        {
            unsafe
            {
                fixed (GLdouble* v1_ptr = v1)
                fixed (GLdouble* v2_ptr = v2)
                {
                    Delegates.glRectdv(v1_ptr, v2_ptr);
                }
            }
        }
        
        public static 
        void Rectdv(GLdouble[] v1, ref GLdouble v2)
        {
            unsafe
            {
                fixed (GLdouble* v1_ptr = v1)
                fixed (GLdouble* v2_ptr = &v2)
                {
                    Delegates.glRectdv(v1_ptr, v2_ptr);
                }
            }
        }
        
        public static 
        unsafe void Rectdv(ref GLdouble v1, GLdouble* v2)
        {
                fixed (GLdouble* v1_ptr = &v1)
                {
                    Delegates.glRectdv(v1_ptr, v2);
                }
        }
        
        public static 
        void Rectdv(ref GLdouble v1, GLdouble[] v2)
        {
            unsafe
            {
                fixed (GLdouble* v1_ptr = &v1)
                fixed (GLdouble* v2_ptr = v2)
                {
                    Delegates.glRectdv(v1_ptr, v2_ptr);
                }
            }
        }
        
        public static 
        void Rectdv(ref GLdouble v1, ref GLdouble v2)
        {
            unsafe
            {
                fixed (GLdouble* v1_ptr = &v1)
                fixed (GLdouble* v2_ptr = &v2)
                {
                    Delegates.glRectdv(v1_ptr, v2_ptr);
                }
            }
        }
        
        public static 
        void Rectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
        {
            Delegates.glRectf(x1, y1, x2, y2);
        }
        
        public static 
        unsafe void Rectfv(GLfloat* v1, GLfloat* v2)
        {
            Delegates.glRectfv(v1, v2);
        }
        
        public static 
        unsafe void Rectfv(GLfloat* v1, GLfloat[] v2)
        {
                fixed (GLfloat* v2_ptr = v2)
                {
                    Delegates.glRectfv(v1, v2_ptr);
                }
        }
        
        public static 
        unsafe void Rectfv(GLfloat* v1, ref GLfloat v2)
        {
                fixed (GLfloat* v2_ptr = &v2)
                {
                    Delegates.glRectfv(v1, v2_ptr);
                }
        }
        
        public static 
        unsafe void Rectfv(GLfloat[] v1, GLfloat* v2)
        {
                fixed (GLfloat* v1_ptr = v1)
                {
                    Delegates.glRectfv(v1_ptr, v2);
                }
        }
        
        public static 
        void Rectfv(GLfloat[] v1, GLfloat[] v2)
        {
            unsafe
            {
                fixed (GLfloat* v1_ptr = v1)
                fixed (GLfloat* v2_ptr = v2)
                {
                    Delegates.glRectfv(v1_ptr, v2_ptr);
                }
            }
        }
        
        public static 
        void Rectfv(GLfloat[] v1, ref GLfloat v2)
        {
            unsafe
            {
                fixed (GLfloat* v1_ptr = v1)
                fixed (GLfloat* v2_ptr = &v2)
                {
                    Delegates.glRectfv(v1_ptr, v2_ptr);
                }
            }
        }
        
        public static 
        unsafe void Rectfv(ref GLfloat v1, GLfloat* v2)
        {
                fixed (GLfloat* v1_ptr = &v1)
                {
                    Delegates.glRectfv(v1_ptr, v2);
                }
        }
        
        public static 
        void Rectfv(ref GLfloat v1, GLfloat[] v2)
        {
            unsafe
            {
                fixed (GLfloat* v1_ptr = &v1)
                fixed (GLfloat* v2_ptr = v2)
                {
                    Delegates.glRectfv(v1_ptr, v2_ptr);
                }
            }
        }
        
        public static 
        void Rectfv(ref GLfloat v1, ref GLfloat v2)
        {
            unsafe
            {
                fixed (GLfloat* v1_ptr = &v1)
                fixed (GLfloat* v2_ptr = &v2)
                {
                    Delegates.glRectfv(v1_ptr, v2_ptr);
                }
            }
        }
        
        public static 
        void Recti(GLint x1, GLint y1, GLint x2, GLint y2)
        {
            Delegates.glRecti(x1, y1, x2, y2);
        }
        
        public static 
        unsafe void Rectiv(GLint* v1, GLint* v2)
        {
            Delegates.glRectiv(v1, v2);
        }
        
        public static 
        unsafe void Rectiv(GLint* v1, GLint[] v2)
        {
                fixed (GLint* v2_ptr = v2)
                {
                    Delegates.glRectiv(v1, v2_ptr);
                }
        }
        
        public static 
        unsafe void Rectiv(GLint* v1, ref GLint v2)
        {
                fixed (GLint* v2_ptr = &v2)
                {
                    Delegates.glRectiv(v1, v2_ptr);
                }
        }
        
        public static 
        unsafe void Rectiv(GLint[] v1, GLint* v2)
        {
                fixed (GLint* v1_ptr = v1)
                {
                    Delegates.glRectiv(v1_ptr, v2);
                }
        }
        
        public static 
        void Rectiv(GLint[] v1, GLint[] v2)
        {
            unsafe
            {
                fixed (GLint* v1_ptr = v1)
                fixed (GLint* v2_ptr = v2)
                {
                    Delegates.glRectiv(v1_ptr, v2_ptr);
                }
            }
        }
        
        public static 
        void Rectiv(GLint[] v1, ref GLint v2)
        {
            unsafe
            {
                fixed (GLint* v1_ptr = v1)
                fixed (GLint* v2_ptr = &v2)
                {
                    Delegates.glRectiv(v1_ptr, v2_ptr);
                }
            }
        }
        
        public static 
        unsafe void Rectiv(ref GLint v1, GLint* v2)
        {
                fixed (GLint* v1_ptr = &v1)
                {
                    Delegates.glRectiv(v1_ptr, v2);
                }
        }
        
        public static 
        void Rectiv(ref GLint v1, GLint[] v2)
        {
            unsafe
            {
                fixed (GLint* v1_ptr = &v1)
                fixed (GLint* v2_ptr = v2)
                {
                    Delegates.glRectiv(v1_ptr, v2_ptr);
                }
            }
        }
        
        public static 
        void Rectiv(ref GLint v1, ref GLint v2)
        {
            unsafe
            {
                fixed (GLint* v1_ptr = &v1)
                fixed (GLint* v2_ptr = &v2)
                {
                    Delegates.glRectiv(v1_ptr, v2_ptr);
                }
            }
        }
        
        public static 
        void Rects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
        {
            Delegates.glRects(x1, y1, x2, y2);
        }
        
        public static 
        unsafe void Rectsv(GLshort* v1, GLshort* v2)
        {
            Delegates.glRectsv(v1, v2);
        }
        
        public static 
        unsafe void Rectsv(GLshort* v1, GLshort[] v2)
        {
                fixed (GLshort* v2_ptr = v2)
                {
                    Delegates.glRectsv(v1, v2_ptr);
                }
        }
        
        public static 
        unsafe void Rectsv(GLshort* v1, ref GLshort v2)
        {
                fixed (GLshort* v2_ptr = &v2)
                {
                    Delegates.glRectsv(v1, v2_ptr);
                }
        }
        
        public static 
        unsafe void Rectsv(GLshort[] v1, GLshort* v2)
        {
                fixed (GLshort* v1_ptr = v1)
                {
                    Delegates.glRectsv(v1_ptr, v2);
                }
        }
        
        public static 
        void Rectsv(GLshort[] v1, GLshort[] v2)
        {
            unsafe
            {
                fixed (GLshort* v1_ptr = v1)
                fixed (GLshort* v2_ptr = v2)
                {
                    Delegates.glRectsv(v1_ptr, v2_ptr);
                }
            }
        }
        
        public static 
        void Rectsv(GLshort[] v1, ref GLshort v2)
        {
            unsafe
            {
                fixed (GLshort* v1_ptr = v1)
                fixed (GLshort* v2_ptr = &v2)
                {
                    Delegates.glRectsv(v1_ptr, v2_ptr);
                }
            }
        }
        
        public static 
        unsafe void Rectsv(ref GLshort v1, GLshort* v2)
        {
                fixed (GLshort* v1_ptr = &v1)
                {
                    Delegates.glRectsv(v1_ptr, v2);
                }
        }
        
        public static 
        void Rectsv(ref GLshort v1, GLshort[] v2)
        {
            unsafe
            {
                fixed (GLshort* v1_ptr = &v1)
                fixed (GLshort* v2_ptr = v2)
                {
                    Delegates.glRectsv(v1_ptr, v2_ptr);
                }
            }
        }
        
        public static 
        void Rectsv(ref GLshort v1, ref GLshort v2)
        {
            unsafe
            {
                fixed (GLshort* v1_ptr = &v1)
                fixed (GLshort* v2_ptr = &v2)
                {
                    Delegates.glRectsv(v1_ptr, v2_ptr);
                }
            }
        }
        
        public static 
        void TexCoord1d(GLdouble s)
        {
            Delegates.glTexCoord1d(s);
        }
        
        public static 
        unsafe void TexCoord1dv(GLdouble* v)
        {
            Delegates.glTexCoord1dv(v);
        }
        
        public static 
        void TexCoord1dv(GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glTexCoord1dv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord1dv(ref GLdouble v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glTexCoord1dv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord1f(GLfloat s)
        {
            Delegates.glTexCoord1f(s);
        }
        
        public static 
        unsafe void TexCoord1fv(GLfloat* v)
        {
            Delegates.glTexCoord1fv(v);
        }
        
        public static 
        void TexCoord1fv(GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glTexCoord1fv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord1fv(ref GLfloat v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glTexCoord1fv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord1i(GLint s)
        {
            Delegates.glTexCoord1i(s);
        }
        
        public static 
        unsafe void TexCoord1iv(GLint* v)
        {
            Delegates.glTexCoord1iv(v);
        }
        
        public static 
        void TexCoord1iv(GLint[] v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = v)
                {
                    Delegates.glTexCoord1iv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord1iv(ref GLint v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = &v)
                {
                    Delegates.glTexCoord1iv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord1s(GLshort s)
        {
            Delegates.glTexCoord1s(s);
        }
        
        public static 
        unsafe void TexCoord1sv(GLshort* v)
        {
            Delegates.glTexCoord1sv(v);
        }
        
        public static 
        void TexCoord1sv(GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glTexCoord1sv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord1sv(ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glTexCoord1sv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord2d(GLdouble s, GLdouble t)
        {
            Delegates.glTexCoord2d(s, t);
        }
        
        public static 
        unsafe void TexCoord2dv(GLdouble* v)
        {
            Delegates.glTexCoord2dv(v);
        }
        
        public static 
        void TexCoord2dv(GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glTexCoord2dv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord2dv(ref GLdouble v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glTexCoord2dv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord2f(GLfloat s, GLfloat t)
        {
            Delegates.glTexCoord2f(s, t);
        }
        
        public static 
        unsafe void TexCoord2fv(GLfloat* v)
        {
            Delegates.glTexCoord2fv(v);
        }
        
        public static 
        void TexCoord2fv(GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glTexCoord2fv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord2fv(ref GLfloat v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glTexCoord2fv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord2i(GLint s, GLint t)
        {
            Delegates.glTexCoord2i(s, t);
        }
        
        public static 
        unsafe void TexCoord2iv(GLint* v)
        {
            Delegates.glTexCoord2iv(v);
        }
        
        public static 
        void TexCoord2iv(GLint[] v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = v)
                {
                    Delegates.glTexCoord2iv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord2iv(ref GLint v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = &v)
                {
                    Delegates.glTexCoord2iv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord2s(GLshort s, GLshort t)
        {
            Delegates.glTexCoord2s(s, t);
        }
        
        public static 
        unsafe void TexCoord2sv(GLshort* v)
        {
            Delegates.glTexCoord2sv(v);
        }
        
        public static 
        void TexCoord2sv(GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glTexCoord2sv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord2sv(ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glTexCoord2sv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord3d(GLdouble s, GLdouble t, GLdouble r)
        {
            Delegates.glTexCoord3d(s, t, r);
        }
        
        public static 
        unsafe void TexCoord3dv(GLdouble* v)
        {
            Delegates.glTexCoord3dv(v);
        }
        
        public static 
        void TexCoord3dv(GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glTexCoord3dv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord3dv(ref GLdouble v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glTexCoord3dv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord3f(GLfloat s, GLfloat t, GLfloat r)
        {
            Delegates.glTexCoord3f(s, t, r);
        }
        
        public static 
        unsafe void TexCoord3fv(GLfloat* v)
        {
            Delegates.glTexCoord3fv(v);
        }
        
        public static 
        void TexCoord3fv(GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glTexCoord3fv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord3fv(ref GLfloat v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glTexCoord3fv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord3i(GLint s, GLint t, GLint r)
        {
            Delegates.glTexCoord3i(s, t, r);
        }
        
        public static 
        unsafe void TexCoord3iv(GLint* v)
        {
            Delegates.glTexCoord3iv(v);
        }
        
        public static 
        void TexCoord3iv(GLint[] v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = v)
                {
                    Delegates.glTexCoord3iv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord3iv(ref GLint v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = &v)
                {
                    Delegates.glTexCoord3iv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord3s(GLshort s, GLshort t, GLshort r)
        {
            Delegates.glTexCoord3s(s, t, r);
        }
        
        public static 
        unsafe void TexCoord3sv(GLshort* v)
        {
            Delegates.glTexCoord3sv(v);
        }
        
        public static 
        void TexCoord3sv(GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glTexCoord3sv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord3sv(ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glTexCoord3sv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
        {
            Delegates.glTexCoord4d(s, t, r, q);
        }
        
        public static 
        unsafe void TexCoord4dv(GLdouble* v)
        {
            Delegates.glTexCoord4dv(v);
        }
        
        public static 
        void TexCoord4dv(GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glTexCoord4dv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord4dv(ref GLdouble v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glTexCoord4dv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
        {
            Delegates.glTexCoord4f(s, t, r, q);
        }
        
        public static 
        unsafe void TexCoord4fv(GLfloat* v)
        {
            Delegates.glTexCoord4fv(v);
        }
        
        public static 
        void TexCoord4fv(GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glTexCoord4fv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord4fv(ref GLfloat v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glTexCoord4fv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord4i(GLint s, GLint t, GLint r, GLint q)
        {
            Delegates.glTexCoord4i(s, t, r, q);
        }
        
        public static 
        unsafe void TexCoord4iv(GLint* v)
        {
            Delegates.glTexCoord4iv(v);
        }
        
        public static 
        void TexCoord4iv(GLint[] v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = v)
                {
                    Delegates.glTexCoord4iv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord4iv(ref GLint v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = &v)
                {
                    Delegates.glTexCoord4iv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)
        {
            Delegates.glTexCoord4s(s, t, r, q);
        }
        
        public static 
        unsafe void TexCoord4sv(GLshort* v)
        {
            Delegates.glTexCoord4sv(v);
        }
        
        public static 
        void TexCoord4sv(GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glTexCoord4sv(v_ptr);
                }
            }
        }
        
        public static 
        void TexCoord4sv(ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glTexCoord4sv(v_ptr);
                }
            }
        }
        
        public static 
        void Vertex2d(GLdouble x, GLdouble y)
        {
            Delegates.glVertex2d(x, y);
        }
        
        public static 
        unsafe void Vertex2dv(GLdouble* v)
        {
            Delegates.glVertex2dv(v);
        }
        
        public static 
        void Vertex2dv(GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glVertex2dv(v_ptr);
                }
            }
        }
        
        public static 
        void Vertex2dv(ref GLdouble v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glVertex2dv(v_ptr);
                }
            }
        }
        
        public static 
        void Vertex2f(GLfloat x, GLfloat y)
        {
            Delegates.glVertex2f(x, y);
        }
        
        public static 
        unsafe void Vertex2fv(GLfloat* v)
        {
            Delegates.glVertex2fv(v);
        }
        
        public static 
        void Vertex2fv(GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glVertex2fv(v_ptr);
                }
            }
        }
        
        public static 
        void Vertex2fv(ref GLfloat v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glVertex2fv(v_ptr);
                }
            }
        }
        
        public static 
        void Vertex2i(GLint x, GLint y)
        {
            Delegates.glVertex2i(x, y);
        }
        
        public static 
        unsafe void Vertex2iv(GLint* v)
        {
            Delegates.glVertex2iv(v);
        }
        
        public static 
        void Vertex2iv(GLint[] v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = v)
                {
                    Delegates.glVertex2iv(v_ptr);
                }
            }
        }
        
        public static 
        void Vertex2iv(ref GLint v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = &v)
                {
                    Delegates.glVertex2iv(v_ptr);
                }
            }
        }
        
        public static 
        void Vertex2s(GLshort x, GLshort y)
        {
            Delegates.glVertex2s(x, y);
        }
        
        public static 
        unsafe void Vertex2sv(GLshort* v)
        {
            Delegates.glVertex2sv(v);
        }
        
        public static 
        void Vertex2sv(GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glVertex2sv(v_ptr);
                }
            }
        }
        
        public static 
        void Vertex2sv(ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glVertex2sv(v_ptr);
                }
            }
        }
        
        public static 
        void Vertex3d(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glVertex3d(x, y, z);
        }
        
        public static 
        unsafe void Vertex3dv(GLdouble* v)
        {
            Delegates.glVertex3dv(v);
        }
        
        public static 
        void Vertex3dv(GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glVertex3dv(v_ptr);
                }
            }
        }
        
        public static 
        void Vertex3dv(ref GLdouble v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glVertex3dv(v_ptr);
                }
            }
        }
        
        public static 
        void Vertex3f(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glVertex3f(x, y, z);
        }
        
        public static 
        unsafe void Vertex3fv(GLfloat* v)
        {
            Delegates.glVertex3fv(v);
        }
        
        public static 
        void Vertex3fv(GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glVertex3fv(v_ptr);
                }
            }
        }
        
        public static 
        void Vertex3fv(ref GLfloat v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glVertex3fv(v_ptr);
                }
            }
        }
        
        public static 
        void Vertex3i(GLint x, GLint y, GLint z)
        {
            Delegates.glVertex3i(x, y, z);
        }
        
        public static 
        unsafe void Vertex3iv(GLint* v)
        {
            Delegates.glVertex3iv(v);
        }
        
        public static 
        void Vertex3iv(GLint[] v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = v)
                {
                    Delegates.glVertex3iv(v_ptr);
                }
            }
        }
        
        public static 
        void Vertex3iv(ref GLint v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = &v)
                {
                    Delegates.glVertex3iv(v_ptr);
                }
            }
        }
        
        public static 
        void Vertex3s(GLshort x, GLshort y, GLshort z)
        {
            Delegates.glVertex3s(x, y, z);
        }
        
        public static 
        unsafe void Vertex3sv(GLshort* v)
        {
            Delegates.glVertex3sv(v);
        }
        
        public static 
        void Vertex3sv(GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glVertex3sv(v_ptr);
                }
            }
        }
        
        public static 
        void Vertex3sv(ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glVertex3sv(v_ptr);
                }
            }
        }
        
        public static 
        void Vertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glVertex4d(x, y, z, w);
        }
        
        public static 
        unsafe void Vertex4dv(GLdouble* v)
        {
            Delegates.glVertex4dv(v);
        }
        
        public static 
        void Vertex4dv(GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glVertex4dv(v_ptr);
                }
            }
        }
        
        public static 
        void Vertex4dv(ref GLdouble v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glVertex4dv(v_ptr);
                }
            }
        }
        
        public static 
        void Vertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glVertex4f(x, y, z, w);
        }
        
        public static 
        unsafe void Vertex4fv(GLfloat* v)
        {
            Delegates.glVertex4fv(v);
        }
        
        public static 
        void Vertex4fv(GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glVertex4fv(v_ptr);
                }
            }
        }
        
        public static 
        void Vertex4fv(ref GLfloat v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glVertex4fv(v_ptr);
                }
            }
        }
        
        public static 
        void Vertex4i(GLint x, GLint y, GLint z, GLint w)
        {
            Delegates.glVertex4i(x, y, z, w);
        }
        
        public static 
        unsafe void Vertex4iv(GLint* v)
        {
            Delegates.glVertex4iv(v);
        }
        
        public static 
        void Vertex4iv(GLint[] v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = v)
                {
                    Delegates.glVertex4iv(v_ptr);
                }
            }
        }
        
        public static 
        void Vertex4iv(ref GLint v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = &v)
                {
                    Delegates.glVertex4iv(v_ptr);
                }
            }
        }
        
        public static 
        void Vertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
        {
            Delegates.glVertex4s(x, y, z, w);
        }
        
        public static 
        unsafe void Vertex4sv(GLshort* v)
        {
            Delegates.glVertex4sv(v);
        }
        
        public static 
        void Vertex4sv(GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glVertex4sv(v_ptr);
                }
            }
        }
        
        public static 
        void Vertex4sv(ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glVertex4sv(v_ptr);
                }
            }
        }
        
        public static 
        unsafe void ClipPlane(GL.Enums.ClipPlaneName plane, GLdouble* equation)
        {
            Delegates.glClipPlane(plane, equation);
        }
        
        public static 
        void ClipPlane(GL.Enums.ClipPlaneName plane, GLdouble[] equation)
        {
            unsafe
            {
                fixed (GLdouble* equation_ptr = equation)
                {
                    Delegates.glClipPlane(plane, equation_ptr);
                }
            }
        }
        
        public static 
        void ClipPlane(GL.Enums.ClipPlaneName plane, ref GLdouble equation)
        {
            unsafe
            {
                fixed (GLdouble* equation_ptr = &equation)
                {
                    Delegates.glClipPlane(plane, equation_ptr);
                }
            }
        }
        
        public static 
        void ColorMaterial(GL.Enums.MaterialFace face, GL.Enums.ColorMaterialParameter mode)
        {
            Delegates.glColorMaterial(face, mode);
        }
        
        public static 
        void CullFace(GL.Enums.CullFaceMode mode)
        {
            Delegates.glCullFace(mode);
        }
        
        public static 
        void Fogf(GL.Enums.FogParameter pname, GLfloat param)
        {
            Delegates.glFogf(pname, param);
        }
        
        public static 
        unsafe void Fogfv(GL.Enums.FogParameter pname, GLfloat* @params)
        {
            Delegates.glFogfv(pname, @params);
        }
        
        public static 
        void Fogfv(GL.Enums.FogParameter pname, GLfloat[] @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = @params)
                {
                    Delegates.glFogfv(pname, @params_ptr);
                }
            }
        }
        
        public static 
        void Fogfv(GL.Enums.FogParameter pname, ref GLfloat @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = &@params)
                {
                    Delegates.glFogfv(pname, @params_ptr);
                }
            }
        }
        
        public static 
        void Fogi(GL.Enums.FogParameter pname, GLint param)
        {
            Delegates.glFogi(pname, param);
        }
        
        public static 
        unsafe void Fogiv(GL.Enums.FogParameter pname, GLint* @params)
        {
            Delegates.glFogiv(pname, @params);
        }
        
        public static 
        void Fogiv(GL.Enums.FogParameter pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glFogiv(pname, @params_ptr);
                }
            }
        }
        
        public static 
        void Fogiv(GL.Enums.FogParameter pname, ref GLint @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glFogiv(pname, @params_ptr);
                }
            }
        }
        
        public static 
        void FrontFace(GL.Enums.FrontFaceDirection mode)
        {
            Delegates.glFrontFace(mode);
        }
        
        public static 
        void Hint(GL.Enums.HintTarget target, GL.Enums.HintMode mode)
        {
            Delegates.glHint(target, mode);
        }
        
        public static 
        void Lightf(GL.Enums.LightName light, GL.Enums.LightParameter pname, GLfloat param)
        {
            Delegates.glLightf(light, pname, param);
        }
        
        public static 
        unsafe void Lightfv(GL.Enums.LightName light, GL.Enums.LightParameter pname, GLfloat* @params)
        {
            Delegates.glLightfv(light, pname, @params);
        }
        
        public static 
        void Lightfv(GL.Enums.LightName light, GL.Enums.LightParameter pname, GLfloat[] @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = @params)
                {
                    Delegates.glLightfv(light, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void Lightfv(GL.Enums.LightName light, GL.Enums.LightParameter pname, ref GLfloat @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = &@params)
                {
                    Delegates.glLightfv(light, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void Lighti(GL.Enums.LightName light, GL.Enums.LightParameter pname, GLint param)
        {
            Delegates.glLighti(light, pname, param);
        }
        
        public static 
        unsafe void Lightiv(GL.Enums.LightName light, GL.Enums.LightParameter pname, GLint* @params)
        {
            Delegates.glLightiv(light, pname, @params);
        }
        
        public static 
        void Lightiv(GL.Enums.LightName light, GL.Enums.LightParameter pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glLightiv(light, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void Lightiv(GL.Enums.LightName light, GL.Enums.LightParameter pname, ref GLint @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glLightiv(light, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void LightModelf(GL.Enums.LightModelParameter pname, GLfloat param)
        {
            Delegates.glLightModelf(pname, param);
        }
        
        public static 
        unsafe void LightModelfv(GL.Enums.LightModelParameter pname, GLfloat* @params)
        {
            Delegates.glLightModelfv(pname, @params);
        }
        
        public static 
        void LightModelfv(GL.Enums.LightModelParameter pname, GLfloat[] @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = @params)
                {
                    Delegates.glLightModelfv(pname, @params_ptr);
                }
            }
        }
        
        public static 
        void LightModelfv(GL.Enums.LightModelParameter pname, ref GLfloat @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = &@params)
                {
                    Delegates.glLightModelfv(pname, @params_ptr);
                }
            }
        }
        
        public static 
        void LightModeli(GL.Enums.LightModelParameter pname, GLint param)
        {
            Delegates.glLightModeli(pname, param);
        }
        
        public static 
        unsafe void LightModeliv(GL.Enums.LightModelParameter pname, GLint* @params)
        {
            Delegates.glLightModeliv(pname, @params);
        }
        
        public static 
        void LightModeliv(GL.Enums.LightModelParameter pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glLightModeliv(pname, @params_ptr);
                }
            }
        }
        
        public static 
        void LightModeliv(GL.Enums.LightModelParameter pname, ref GLint @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glLightModeliv(pname, @params_ptr);
                }
            }
        }
        
        public static 
        void LineWidth(GLfloat width)
        {
            Delegates.glLineWidth(width);
        }
        
        public static 
        void Materialf(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLfloat param)
        {
            Delegates.glMaterialf(face, pname, param);
        }
        
        public static 
        unsafe void Materialfv(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLfloat* @params)
        {
            Delegates.glMaterialfv(face, pname, @params);
        }
        
        public static 
        void Materialfv(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLfloat[] @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = @params)
                {
                    Delegates.glMaterialfv(face, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void Materialfv(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, ref GLfloat @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = &@params)
                {
                    Delegates.glMaterialfv(face, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void Materiali(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLint param)
        {
            Delegates.glMateriali(face, pname, param);
        }
        
        public static 
        unsafe void Materialiv(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLint* @params)
        {
            Delegates.glMaterialiv(face, pname, @params);
        }
        
        public static 
        void Materialiv(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glMaterialiv(face, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void Materialiv(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, ref GLint @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glMaterialiv(face, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void PointSize(GLfloat size)
        {
            Delegates.glPointSize(size);
        }
        
        public static 
        void PolygonMode(GL.Enums.MaterialFace face, GL.Enums.PolygonMode mode)
        {
            Delegates.glPolygonMode(face, mode);
        }
        
        public static 
        unsafe void PolygonStipple(GLubyte* mask)
        {
            Delegates.glPolygonStipple(mask);
        }
        
        public static 
        void PolygonStipple(GLubyte[] mask)
        {
            unsafe
            {
                fixed (GLubyte* mask_ptr = mask)
                {
                    Delegates.glPolygonStipple(mask_ptr);
                }
            }
        }
        
        public static 
        void PolygonStipple(ref GLubyte mask)
        {
            unsafe
            {
                fixed (GLubyte* mask_ptr = &mask)
                {
                    Delegates.glPolygonStipple(mask_ptr);
                }
            }
        }
        
        public static 
        void Scissor(GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glScissor(x, y, width, height);
        }
        
        public static 
        void ShadeModel(GL.Enums.ShadingModel mode)
        {
            Delegates.glShadeModel(mode);
        }
        
        public static 
        void TexParameterf(GL.Enums.TextureTarget target, GL.Enums.TextureParameterName pname, GLfloat param)
        {
            Delegates.glTexParameterf(target, pname, param);
        }
        
        public static 
        unsafe void TexParameterfv(GL.Enums.TextureTarget target, GL.Enums.TextureParameterName pname, GLfloat* @params)
        {
            Delegates.glTexParameterfv(target, pname, @params);
        }
        
        public static 
        void TexParameterfv(GL.Enums.TextureTarget target, GL.Enums.TextureParameterName pname, GLfloat[] @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = @params)
                {
                    Delegates.glTexParameterfv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void TexParameterfv(GL.Enums.TextureTarget target, GL.Enums.TextureParameterName pname, ref GLfloat @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = &@params)
                {
                    Delegates.glTexParameterfv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void TexParameteri(GL.Enums.TextureTarget target, GL.Enums.TextureParameterName pname, GLint param)
        {
            Delegates.glTexParameteri(target, pname, param);
        }
        
        public static 
        unsafe void TexParameteriv(GL.Enums.TextureTarget target, GL.Enums.TextureParameterName pname, GLint* @params)
        {
            Delegates.glTexParameteriv(target, pname, @params);
        }
        
        public static 
        void TexParameteriv(GL.Enums.TextureTarget target, GL.Enums.TextureParameterName pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glTexParameteriv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void TexParameteriv(GL.Enums.TextureTarget target, GL.Enums.TextureParameterName pname, ref GLint @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glTexParameteriv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        unsafe void TexImage1D(GL.Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLint border, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels)
        {
            Delegates.glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
        }
        
        public static 
        void TexImage1D(GL.Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLint border, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object pixels)
        {
            System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glTexImage1D(target, level, internalformat, width, border, format, type, (void*)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void TexImage2D(GL.Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels)
        {
            Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
        }
        
        public static 
        void TexImage2D(GL.Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object pixels)
        {
            System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, (void*)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }
        
        public static 
        void TexEnvf(GL.Enums.TextureEnvTarget target, GL.Enums.TextureEnvParameter pname, GLfloat param)
        {
            Delegates.glTexEnvf(target, pname, param);
        }
        
        public static 
        unsafe void TexEnvfv(GL.Enums.TextureEnvTarget target, GL.Enums.TextureEnvParameter pname, GLfloat* @params)
        {
            Delegates.glTexEnvfv(target, pname, @params);
        }
        
        public static 
        void TexEnvfv(GL.Enums.TextureEnvTarget target, GL.Enums.TextureEnvParameter pname, GLfloat[] @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = @params)
                {
                    Delegates.glTexEnvfv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void TexEnvfv(GL.Enums.TextureEnvTarget target, GL.Enums.TextureEnvParameter pname, ref GLfloat @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = &@params)
                {
                    Delegates.glTexEnvfv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void TexEnvi(GL.Enums.TextureEnvTarget target, GL.Enums.TextureEnvParameter pname, GLint param)
        {
            Delegates.glTexEnvi(target, pname, param);
        }
        
        public static 
        unsafe void TexEnviv(GL.Enums.TextureEnvTarget target, GL.Enums.TextureEnvParameter pname, GLint* @params)
        {
            Delegates.glTexEnviv(target, pname, @params);
        }
        
        public static 
        void TexEnviv(GL.Enums.TextureEnvTarget target, GL.Enums.TextureEnvParameter pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glTexEnviv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void TexEnviv(GL.Enums.TextureEnvTarget target, GL.Enums.TextureEnvParameter pname, ref GLint @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glTexEnviv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void TexGend(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, GLdouble param)
        {
            Delegates.glTexGend(coord, pname, param);
        }
        
        public static 
        unsafe void TexGendv(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, GLdouble* @params)
        {
            Delegates.glTexGendv(coord, pname, @params);
        }
        
        public static 
        void TexGendv(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, GLdouble[] @params)
        {
            unsafe
            {
                fixed (GLdouble* @params_ptr = @params)
                {
                    Delegates.glTexGendv(coord, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void TexGendv(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, ref GLdouble @params)
        {
            unsafe
            {
                fixed (GLdouble* @params_ptr = &@params)
                {
                    Delegates.glTexGendv(coord, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void TexGenf(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, GLfloat param)
        {
            Delegates.glTexGenf(coord, pname, param);
        }
        
        public static 
        unsafe void TexGenfv(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, GLfloat* @params)
        {
            Delegates.glTexGenfv(coord, pname, @params);
        }
        
        public static 
        void TexGenfv(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, GLfloat[] @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = @params)
                {
                    Delegates.glTexGenfv(coord, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void TexGenfv(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, ref GLfloat @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = &@params)
                {
                    Delegates.glTexGenfv(coord, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void TexGeni(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, GLint param)
        {
            Delegates.glTexGeni(coord, pname, param);
        }
        
        public static 
        unsafe void TexGeniv(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, GLint* @params)
        {
            Delegates.glTexGeniv(coord, pname, @params);
        }
        
        public static 
        void TexGeniv(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glTexGeniv(coord, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void TexGeniv(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, ref GLint @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glTexGeniv(coord, pname, @params_ptr);
                }
            }
        }
        
        public static 
        unsafe void FeedbackBuffer(GLsizei size, GL.Enums.FeedbackType type, GLfloat* buffer)
        {
            Delegates.glFeedbackBuffer(size, type, buffer);
        }
        
        public static 
        void FeedbackBuffer(GLsizei size, GL.Enums.FeedbackType type, GLfloat[] buffer)
        {
            unsafe
            {
                fixed (GLfloat* buffer_ptr = buffer)
                {
                    Delegates.glFeedbackBuffer(size, type, buffer_ptr);
                }
            }
        }
        
        public static 
        void FeedbackBuffer(GLsizei size, GL.Enums.FeedbackType type, out GLfloat buffer)
        {
            buffer = default(GLfloat);
            unsafe
            {
                fixed (GLfloat* buffer_ptr = &buffer)
                {
                    Delegates.glFeedbackBuffer(size, type, buffer_ptr);
                    buffer = *buffer_ptr;
                }
            }
        }
        
        public static 
        unsafe void SelectBuffer(GLsizei size, GLuint* buffer)
        {
            Delegates.glSelectBuffer(size, buffer);
        }
        
        public static 
        void SelectBuffer(GLsizei size, GLuint[] buffer)
        {
            unsafe
            {
                fixed (GLuint* buffer_ptr = buffer)
                {
                    Delegates.glSelectBuffer(size, buffer_ptr);
                }
            }
        }
        
        public static 
        void SelectBuffer(GLsizei size, out GLuint buffer)
        {
            buffer = default(GLuint);
            unsafe
            {
                fixed (GLuint* buffer_ptr = &buffer)
                {
                    Delegates.glSelectBuffer(size, buffer_ptr);
                    buffer = *buffer_ptr;
                }
            }
        }
        
        public static 
        GLint RenderMode(GL.Enums.RenderingMode mode)
        {
            return Delegates.glRenderMode(mode);
        }
        
        public static 
        void InitNames()
        {
            Delegates.glInitNames();
        }
        
        public static 
        void LoadName(GLuint name)
        {
            Delegates.glLoadName(name);
        }
        
        public static 
        void PassThrough(GLfloat token)
        {
            Delegates.glPassThrough(token);
        }
        
        public static 
        void PopName()
        {
            Delegates.glPopName();
        }
        
        public static 
        void PushName(GLuint name)
        {
            Delegates.glPushName(name);
        }
        
        public static 
        void DrawBuffer(GL.Enums.DrawBufferMode mode)
        {
            Delegates.glDrawBuffer(mode);
        }
        
        public static 
        void Clear(GL.Enums.ClearBufferMask mask)
        {
            Delegates.glClear(mask);
        }
        
        public static 
        void ClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
        {
            Delegates.glClearAccum(red, green, blue, alpha);
        }
        
        public static 
        void ClearIndex(GLfloat c)
        {
            Delegates.glClearIndex(c);
        }
        
        public static 
        void ClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
        {
            Delegates.glClearColor(red, green, blue, alpha);
        }
        
        public static 
        void ClearStencil(GLint s)
        {
            Delegates.glClearStencil(s);
        }
        
        public static 
        void ClearDepth(GLclampd depth)
        {
            Delegates.glClearDepth(depth);
        }
        
        public static 
        void StencilMask(GLuint mask)
        {
            Delegates.glStencilMask(mask);
        }
        
        public static 
        void IndexMask(GLuint mask)
        {
            Delegates.glIndexMask(mask);
        }
        
        public static 
        void Accum(GL.Enums.AccumOp op, GLfloat value)
        {
            Delegates.glAccum(op, value);
        }
        
        public static 
        void Disable(GL.Enums.EnableCap cap)
        {
            Delegates.glDisable(cap);
        }
        
        public static 
        void Enable(GL.Enums.EnableCap cap)
        {
            Delegates.glEnable(cap);
        }
        
        public static 
        void Finish()
        {
            Delegates.glFinish();
        }
        
        public static 
        void Flush()
        {
            Delegates.glFlush();
        }
        
        public static 
        void PopAttrib()
        {
            Delegates.glPopAttrib();
        }
        
        public static 
        void PushAttrib(GL.Enums.AttribMask mask)
        {
            Delegates.glPushAttrib(mask);
        }
        
        public static 
        unsafe void Map1d(GL.Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint stride, GLint order, GLdouble* points)
        {
            Delegates.glMap1d(target, u1, u2, stride, order, points);
        }
        
        public static 
        void Map1d(GL.Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint stride, GLint order, GLdouble[] points)
        {
            unsafe
            {
                fixed (GLdouble* points_ptr = points)
                {
                    Delegates.glMap1d(target, u1, u2, stride, order, points_ptr);
                }
            }
        }
        
        public static 
        void Map1d(GL.Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint stride, GLint order, ref GLdouble points)
        {
            unsafe
            {
                fixed (GLdouble* points_ptr = &points)
                {
                    Delegates.glMap1d(target, u1, u2, stride, order, points_ptr);
                }
            }
        }
        
        public static 
        unsafe void Map1f(GL.Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint stride, GLint order, GLfloat* points)
        {
            Delegates.glMap1f(target, u1, u2, stride, order, points);
        }
        
        public static 
        void Map1f(GL.Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint stride, GLint order, GLfloat[] points)
        {
            unsafe
            {
                fixed (GLfloat* points_ptr = points)
                {
                    Delegates.glMap1f(target, u1, u2, stride, order, points_ptr);
                }
            }
        }
        
        public static 
        void Map1f(GL.Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint stride, GLint order, ref GLfloat points)
        {
            unsafe
            {
                fixed (GLfloat* points_ptr = &points)
                {
                    Delegates.glMap1f(target, u1, u2, stride, order, points_ptr);
                }
            }
        }
        
        public static 
        unsafe void Map2d(GL.Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble* points)
        {
            Delegates.glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        
        public static 
        void Map2d(GL.Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble[] points)
        {
            unsafe
            {
                fixed (GLdouble* points_ptr = points)
                {
                    Delegates.glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
                }
            }
        }
        
        public static 
        void Map2d(GL.Enums.MapTarget target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, ref GLdouble points)
        {
            unsafe
            {
                fixed (GLdouble* points_ptr = &points)
                {
                    Delegates.glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
                }
            }
        }
        
        public static 
        unsafe void Map2f(GL.Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat* points)
        {
            Delegates.glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        
        public static 
        void Map2f(GL.Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat[] points)
        {
            unsafe
            {
                fixed (GLfloat* points_ptr = points)
                {
                    Delegates.glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
                }
            }
        }
        
        public static 
        void Map2f(GL.Enums.MapTarget target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, ref GLfloat points)
        {
            unsafe
            {
                fixed (GLfloat* points_ptr = &points)
                {
                    Delegates.glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points_ptr);
                }
            }
        }
        
        public static 
        void MapGrid1d(GLint un, GLdouble u1, GLdouble u2)
        {
            Delegates.glMapGrid1d(un, u1, u2);
        }
        
        public static 
        void MapGrid1f(GLint un, GLfloat u1, GLfloat u2)
        {
            Delegates.glMapGrid1f(un, u1, u2);
        }
        
        public static 
        void MapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
        {
            Delegates.glMapGrid2d(un, u1, u2, vn, v1, v2);
        }
        
        public static 
        void MapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
        {
            Delegates.glMapGrid2f(un, u1, u2, vn, v1, v2);
        }
        
        public static 
        void EvalCoord1d(GLdouble u)
        {
            Delegates.glEvalCoord1d(u);
        }
        
        public static 
        unsafe void EvalCoord1dv(GLdouble* u)
        {
            Delegates.glEvalCoord1dv(u);
        }
        
        public static 
        void EvalCoord1dv(GLdouble[] u)
        {
            unsafe
            {
                fixed (GLdouble* u_ptr = u)
                {
                    Delegates.glEvalCoord1dv(u_ptr);
                }
            }
        }
        
        public static 
        void EvalCoord1dv(ref GLdouble u)
        {
            unsafe
            {
                fixed (GLdouble* u_ptr = &u)
                {
                    Delegates.glEvalCoord1dv(u_ptr);
                }
            }
        }
        
        public static 
        void EvalCoord1f(GLfloat u)
        {
            Delegates.glEvalCoord1f(u);
        }
        
        public static 
        unsafe void EvalCoord1fv(GLfloat* u)
        {
            Delegates.glEvalCoord1fv(u);
        }
        
        public static 
        void EvalCoord1fv(GLfloat[] u)
        {
            unsafe
            {
                fixed (GLfloat* u_ptr = u)
                {
                    Delegates.glEvalCoord1fv(u_ptr);
                }
            }
        }
        
        public static 
        void EvalCoord1fv(ref GLfloat u)
        {
            unsafe
            {
                fixed (GLfloat* u_ptr = &u)
                {
                    Delegates.glEvalCoord1fv(u_ptr);
                }
            }
        }
        
        public static 
        void EvalCoord2d(GLdouble u, GLdouble v)
        {
            Delegates.glEvalCoord2d(u, v);
        }
        
        public static 
        unsafe void EvalCoord2dv(GLdouble* u)
        {
            Delegates.glEvalCoord2dv(u);
        }
        
        public static 
        void EvalCoord2dv(GLdouble[] u)
        {
            unsafe
            {
                fixed (GLdouble* u_ptr = u)
                {
                    Delegates.glEvalCoord2dv(u_ptr);
                }
            }
        }
        
        public static 
        void EvalCoord2dv(ref GLdouble u)
        {
            unsafe
            {
                fixed (GLdouble* u_ptr = &u)
                {
                    Delegates.glEvalCoord2dv(u_ptr);
                }
            }
        }
        
        public static 
        void EvalCoord2f(GLfloat u, GLfloat v)
        {
            Delegates.glEvalCoord2f(u, v);
        }
        
        public static 
        unsafe void EvalCoord2fv(GLfloat* u)
        {
            Delegates.glEvalCoord2fv(u);
        }
        
        public static 
        void EvalCoord2fv(GLfloat[] u)
        {
            unsafe
            {
                fixed (GLfloat* u_ptr = u)
                {
                    Delegates.glEvalCoord2fv(u_ptr);
                }
            }
        }
        
        public static 
        void EvalCoord2fv(ref GLfloat u)
        {
            unsafe
            {
                fixed (GLfloat* u_ptr = &u)
                {
                    Delegates.glEvalCoord2fv(u_ptr);
                }
            }
        }
        
        public static 
        void EvalMesh1(GL.Enums.MeshMode1 mode, GLint i1, GLint i2)
        {
            Delegates.glEvalMesh1(mode, i1, i2);
        }
        
        public static 
        void EvalPoint1(GLint i)
        {
            Delegates.glEvalPoint1(i);
        }
        
        public static 
        void EvalMesh2(GL.Enums.MeshMode2 mode, GLint i1, GLint i2, GLint j1, GLint j2)
        {
            Delegates.glEvalMesh2(mode, i1, i2, j1, j2);
        }
        
        public static 
        void EvalPoint2(GLint i, GLint j)
        {
            Delegates.glEvalPoint2(i, j);
        }
        
        public static 
        void AlphaFunc(GL.Enums.AlphaFunction func, GLclampf @ref)
        {
            Delegates.glAlphaFunc(func, @ref);
        }
        
        public static 
        void BlendFunc(GL.Enums.BlendingFactorSrc sfactor, GL.Enums.BlendingFactorDest dfactor)
        {
            Delegates.glBlendFunc(sfactor, dfactor);
        }
        
        public static 
        void LogicOp(GL.Enums.LogicOp opcode)
        {
            Delegates.glLogicOp(opcode);
        }
        
        public static 
        void StencilFunc(GL.Enums.StencilFunction func, GLint @ref, GLuint mask)
        {
            Delegates.glStencilFunc(func, @ref, mask);
        }
        
        public static 
        void StencilOp(GL.Enums.StencilOp fail, GL.Enums.StencilOp zfail, GL.Enums.StencilOp zpass)
        {
            Delegates.glStencilOp(fail, zfail, zpass);
        }
        
        public static 
        void DepthFunc(GL.Enums.DepthFunction func)
        {
            Delegates.glDepthFunc(func);
        }
        
        public static 
        void PixelZoom(GLfloat xfactor, GLfloat yfactor)
        {
            Delegates.glPixelZoom(xfactor, yfactor);
        }
        
        public static 
        void PixelTransferf(GL.Enums.PixelTransferParameter pname, GLfloat param)
        {
            Delegates.glPixelTransferf(pname, param);
        }
        
        public static 
        void PixelTransferi(GL.Enums.PixelTransferParameter pname, GLint param)
        {
            Delegates.glPixelTransferi(pname, param);
        }
        
        public static 
        void PixelStoref(GL.Enums.PixelStoreParameter pname, GLfloat param)
        {
            Delegates.glPixelStoref(pname, param);
        }
        
        public static 
        void PixelStorei(GL.Enums.PixelStoreParameter pname, GLint param)
        {
            Delegates.glPixelStorei(pname, param);
        }
        
        public static 
        unsafe void PixelMapfv(GL.Enums.PixelMap map, GLint mapsize, GLfloat* values)
        {
            Delegates.glPixelMapfv(map, mapsize, values);
        }
        
        public static 
        void PixelMapfv(GL.Enums.PixelMap map, GLint mapsize, GLfloat[] values)
        {
            unsafe
            {
                fixed (GLfloat* values_ptr = values)
                {
                    Delegates.glPixelMapfv(map, mapsize, values_ptr);
                }
            }
        }
        
        public static 
        void PixelMapfv(GL.Enums.PixelMap map, GLint mapsize, ref GLfloat values)
        {
            unsafe
            {
                fixed (GLfloat* values_ptr = &values)
                {
                    Delegates.glPixelMapfv(map, mapsize, values_ptr);
                }
            }
        }
        
        public static 
        unsafe void PixelMapuiv(GL.Enums.PixelMap map, GLint mapsize, GLuint* values)
        {
            Delegates.glPixelMapuiv(map, mapsize, values);
        }
        
        public static 
        void PixelMapuiv(GL.Enums.PixelMap map, GLint mapsize, GLuint[] values)
        {
            unsafe
            {
                fixed (GLuint* values_ptr = values)
                {
                    Delegates.glPixelMapuiv(map, mapsize, values_ptr);
                }
            }
        }
        
        public static 
        void PixelMapuiv(GL.Enums.PixelMap map, GLint mapsize, ref GLuint values)
        {
            unsafe
            {
                fixed (GLuint* values_ptr = &values)
                {
                    Delegates.glPixelMapuiv(map, mapsize, values_ptr);
                }
            }
        }
        
        public static 
        unsafe void PixelMapusv(GL.Enums.PixelMap map, GLint mapsize, GLushort* values)
        {
            Delegates.glPixelMapusv(map, mapsize, values);
        }
        
        public static 
        void PixelMapusv(GL.Enums.PixelMap map, GLint mapsize, GLushort[] values)
        {
            unsafe
            {
                fixed (GLushort* values_ptr = values)
                {
                    Delegates.glPixelMapusv(map, mapsize, values_ptr);
                }
            }
        }
        
        public static 
        void PixelMapusv(GL.Enums.PixelMap map, GLint mapsize, ref GLushort values)
        {
            unsafe
            {
                fixed (GLushort* values_ptr = &values)
                {
                    Delegates.glPixelMapusv(map, mapsize, values_ptr);
                }
            }
        }
        
        public static 
        void ReadBuffer(GL.Enums.ReadBufferMode mode)
        {
            Delegates.glReadBuffer(mode);
        }
        
        public static 
        void CopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GL.Enums.PixelCopyType type)
        {
            Delegates.glCopyPixels(x, y, width, height, type);
        }
        
        public static 
        unsafe void ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels)
        {
            Delegates.glReadPixels(x, y, width, height, format, type, pixels);
        }
        
        public static 
        void ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object pixels)
        {
            System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glReadPixels(x, y, width, height, format, type, (void*)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void DrawPixels(GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels)
        {
            Delegates.glDrawPixels(width, height, format, type, pixels);
        }
        
        public static 
        void DrawPixels(GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object pixels)
        {
            System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glDrawPixels(width, height, format, type, (void*)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void GetBooleanv(GL.Enums.GetPName pname, GL.Enums.Boolean* @params)
        {
            Delegates.glGetBooleanv(pname, @params);
        }
        
        public static 
        unsafe void GetClipPlane(GL.Enums.ClipPlaneName plane, GLdouble* equation)
        {
            Delegates.glGetClipPlane(plane, equation);
        }
        
        public static 
        void GetClipPlane(GL.Enums.ClipPlaneName plane, GLdouble[] equation)
        {
            unsafe
            {
                fixed (GLdouble* equation_ptr = equation)
                {
                    Delegates.glGetClipPlane(plane, equation_ptr);
                }
            }
        }
        
        public static 
        void GetClipPlane(GL.Enums.ClipPlaneName plane, out GLdouble equation)
        {
            equation = default(GLdouble);
            unsafe
            {
                fixed (GLdouble* equation_ptr = &equation)
                {
                    Delegates.glGetClipPlane(plane, equation_ptr);
                    equation = *equation_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetDoublev(GL.Enums.GetPName pname, GLdouble* @params)
        {
            Delegates.glGetDoublev(pname, @params);
        }
        
        public static 
        void GetDoublev(GL.Enums.GetPName pname, GLdouble[] @params)
        {
            unsafe
            {
                fixed (GLdouble* @params_ptr = @params)
                {
                    Delegates.glGetDoublev(pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetDoublev(GL.Enums.GetPName pname, out GLdouble @params)
        {
            @params = default(GLdouble);
            unsafe
            {
                fixed (GLdouble* @params_ptr = &@params)
                {
                    Delegates.glGetDoublev(pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        GL.Enums.GLenum GetError()
        {
            return Delegates.glGetError();
        }
        
        public static 
        unsafe void GetFloatv(GL.Enums.GetPName pname, GLfloat* @params)
        {
            Delegates.glGetFloatv(pname, @params);
        }
        
        public static 
        void GetFloatv(GL.Enums.GetPName pname, GLfloat[] @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = @params)
                {
                    Delegates.glGetFloatv(pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetFloatv(GL.Enums.GetPName pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            unsafe
            {
                fixed (GLfloat* @params_ptr = &@params)
                {
                    Delegates.glGetFloatv(pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetIntegerv(GL.Enums.GetPName pname, GLint* @params)
        {
            Delegates.glGetIntegerv(pname, @params);
        }
        
        public static 
        void GetIntegerv(GL.Enums.GetPName pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glGetIntegerv(pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetIntegerv(GL.Enums.GetPName pname, out GLint @params)
        {
            @params = default(GLint);
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glGetIntegerv(pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetLightfv(GL.Enums.LightName light, GL.Enums.LightParameter pname, GLfloat* @params)
        {
            Delegates.glGetLightfv(light, pname, @params);
        }
        
        public static 
        void GetLightfv(GL.Enums.LightName light, GL.Enums.LightParameter pname, GLfloat[] @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = @params)
                {
                    Delegates.glGetLightfv(light, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetLightfv(GL.Enums.LightName light, GL.Enums.LightParameter pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            unsafe
            {
                fixed (GLfloat* @params_ptr = &@params)
                {
                    Delegates.glGetLightfv(light, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetLightiv(GL.Enums.LightName light, GL.Enums.LightParameter pname, GLint* @params)
        {
            Delegates.glGetLightiv(light, pname, @params);
        }
        
        public static 
        void GetLightiv(GL.Enums.LightName light, GL.Enums.LightParameter pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glGetLightiv(light, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetLightiv(GL.Enums.LightName light, GL.Enums.LightParameter pname, out GLint @params)
        {
            @params = default(GLint);
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glGetLightiv(light, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetMapdv(GL.Enums.MapTarget target, GL.Enums.GetMapQuery query, GLdouble* v)
        {
            Delegates.glGetMapdv(target, query, v);
        }
        
        public static 
        void GetMapdv(GL.Enums.MapTarget target, GL.Enums.GetMapQuery query, GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glGetMapdv(target, query, v_ptr);
                }
            }
        }
        
        public static 
        void GetMapdv(GL.Enums.MapTarget target, GL.Enums.GetMapQuery query, out GLdouble v)
        {
            v = default(GLdouble);
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glGetMapdv(target, query, v_ptr);
                    v = *v_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetMapfv(GL.Enums.MapTarget target, GL.Enums.GetMapQuery query, GLfloat* v)
        {
            Delegates.glGetMapfv(target, query, v);
        }
        
        public static 
        void GetMapfv(GL.Enums.MapTarget target, GL.Enums.GetMapQuery query, GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glGetMapfv(target, query, v_ptr);
                }
            }
        }
        
        public static 
        void GetMapfv(GL.Enums.MapTarget target, GL.Enums.GetMapQuery query, out GLfloat v)
        {
            v = default(GLfloat);
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glGetMapfv(target, query, v_ptr);
                    v = *v_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetMapiv(GL.Enums.MapTarget target, GL.Enums.GetMapQuery query, GLint* v)
        {
            Delegates.glGetMapiv(target, query, v);
        }
        
        public static 
        void GetMapiv(GL.Enums.MapTarget target, GL.Enums.GetMapQuery query, GLint[] v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = v)
                {
                    Delegates.glGetMapiv(target, query, v_ptr);
                }
            }
        }
        
        public static 
        void GetMapiv(GL.Enums.MapTarget target, GL.Enums.GetMapQuery query, out GLint v)
        {
            v = default(GLint);
            unsafe
            {
                fixed (GLint* v_ptr = &v)
                {
                    Delegates.glGetMapiv(target, query, v_ptr);
                    v = *v_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetMaterialfv(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLfloat* @params)
        {
            Delegates.glGetMaterialfv(face, pname, @params);
        }
        
        public static 
        void GetMaterialfv(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLfloat[] @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = @params)
                {
                    Delegates.glGetMaterialfv(face, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetMaterialfv(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            unsafe
            {
                fixed (GLfloat* @params_ptr = &@params)
                {
                    Delegates.glGetMaterialfv(face, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetMaterialiv(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLint* @params)
        {
            Delegates.glGetMaterialiv(face, pname, @params);
        }
        
        public static 
        void GetMaterialiv(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glGetMaterialiv(face, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetMaterialiv(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, out GLint @params)
        {
            @params = default(GLint);
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glGetMaterialiv(face, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetPixelMapfv(GL.Enums.PixelMap map, GLfloat* values)
        {
            Delegates.glGetPixelMapfv(map, values);
        }
        
        public static 
        void GetPixelMapfv(GL.Enums.PixelMap map, GLfloat[] values)
        {
            unsafe
            {
                fixed (GLfloat* values_ptr = values)
                {
                    Delegates.glGetPixelMapfv(map, values_ptr);
                }
            }
        }
        
        public static 
        void GetPixelMapfv(GL.Enums.PixelMap map, out GLfloat values)
        {
            values = default(GLfloat);
            unsafe
            {
                fixed (GLfloat* values_ptr = &values)
                {
                    Delegates.glGetPixelMapfv(map, values_ptr);
                    values = *values_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetPixelMapuiv(GL.Enums.PixelMap map, GLuint* values)
        {
            Delegates.glGetPixelMapuiv(map, values);
        }
        
        public static 
        void GetPixelMapuiv(GL.Enums.PixelMap map, GLuint[] values)
        {
            unsafe
            {
                fixed (GLuint* values_ptr = values)
                {
                    Delegates.glGetPixelMapuiv(map, values_ptr);
                }
            }
        }
        
        public static 
        void GetPixelMapuiv(GL.Enums.PixelMap map, out GLuint values)
        {
            values = default(GLuint);
            unsafe
            {
                fixed (GLuint* values_ptr = &values)
                {
                    Delegates.glGetPixelMapuiv(map, values_ptr);
                    values = *values_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetPixelMapusv(GL.Enums.PixelMap map, GLushort* values)
        {
            Delegates.glGetPixelMapusv(map, values);
        }
        
        public static 
        void GetPixelMapusv(GL.Enums.PixelMap map, GLushort[] values)
        {
            unsafe
            {
                fixed (GLushort* values_ptr = values)
                {
                    Delegates.glGetPixelMapusv(map, values_ptr);
                }
            }
        }
        
        public static 
        void GetPixelMapusv(GL.Enums.PixelMap map, out GLushort values)
        {
            values = default(GLushort);
            unsafe
            {
                fixed (GLushort* values_ptr = &values)
                {
                    Delegates.glGetPixelMapusv(map, values_ptr);
                    values = *values_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetPolygonStipple(GLubyte* mask)
        {
            Delegates.glGetPolygonStipple(mask);
        }
        
        public static 
        void GetPolygonStipple(GLubyte[] mask)
        {
            unsafe
            {
                fixed (GLubyte* mask_ptr = mask)
                {
                    Delegates.glGetPolygonStipple(mask_ptr);
                }
            }
        }
        
        public static 
        void GetPolygonStipple(out GLubyte mask)
        {
            mask = default(GLubyte);
            unsafe
            {
                fixed (GLubyte* mask_ptr = &mask)
                {
                    Delegates.glGetPolygonStipple(mask_ptr);
                    mask = *mask_ptr;
                }
            }
        }
        
        public static 
        System.String GetString(GL.Enums.StringName name)
        {
            return System.Runtime.InteropServices.Marshal.PtrToStringAnsi(Delegates.glGetString(name));
        }
        
        public static 
        unsafe void GetTexEnvfv(GL.Enums.TextureEnvTarget target, GL.Enums.TextureEnvParameter pname, GLfloat* @params)
        {
            Delegates.glGetTexEnvfv(target, pname, @params);
        }
        
        public static 
        void GetTexEnvfv(GL.Enums.TextureEnvTarget target, GL.Enums.TextureEnvParameter pname, GLfloat[] @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = @params)
                {
                    Delegates.glGetTexEnvfv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetTexEnvfv(GL.Enums.TextureEnvTarget target, GL.Enums.TextureEnvParameter pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            unsafe
            {
                fixed (GLfloat* @params_ptr = &@params)
                {
                    Delegates.glGetTexEnvfv(target, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetTexEnviv(GL.Enums.TextureEnvTarget target, GL.Enums.TextureEnvParameter pname, GLint* @params)
        {
            Delegates.glGetTexEnviv(target, pname, @params);
        }
        
        public static 
        void GetTexEnviv(GL.Enums.TextureEnvTarget target, GL.Enums.TextureEnvParameter pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glGetTexEnviv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetTexEnviv(GL.Enums.TextureEnvTarget target, GL.Enums.TextureEnvParameter pname, out GLint @params)
        {
            @params = default(GLint);
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glGetTexEnviv(target, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetTexGendv(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, GLdouble* @params)
        {
            Delegates.glGetTexGendv(coord, pname, @params);
        }
        
        public static 
        void GetTexGendv(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, GLdouble[] @params)
        {
            unsafe
            {
                fixed (GLdouble* @params_ptr = @params)
                {
                    Delegates.glGetTexGendv(coord, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetTexGendv(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, out GLdouble @params)
        {
            @params = default(GLdouble);
            unsafe
            {
                fixed (GLdouble* @params_ptr = &@params)
                {
                    Delegates.glGetTexGendv(coord, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetTexGenfv(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, GLfloat* @params)
        {
            Delegates.glGetTexGenfv(coord, pname, @params);
        }
        
        public static 
        void GetTexGenfv(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, GLfloat[] @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = @params)
                {
                    Delegates.glGetTexGenfv(coord, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetTexGenfv(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            unsafe
            {
                fixed (GLfloat* @params_ptr = &@params)
                {
                    Delegates.glGetTexGenfv(coord, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetTexGeniv(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, GLint* @params)
        {
            Delegates.glGetTexGeniv(coord, pname, @params);
        }
        
        public static 
        void GetTexGeniv(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glGetTexGeniv(coord, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetTexGeniv(GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter pname, out GLint @params)
        {
            @params = default(GLint);
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glGetTexGeniv(coord, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetTexImage(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels)
        {
            Delegates.glGetTexImage(target, level, format, type, pixels);
        }
        
        public static 
        void GetTexImage(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object pixels)
        {
            System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glGetTexImage(target, level, format, type, (void*)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void GetTexParameterfv(GL.Enums.TextureTarget target, GL.Enums.GetTextureParameter pname, GLfloat* @params)
        {
            Delegates.glGetTexParameterfv(target, pname, @params);
        }
        
        public static 
        void GetTexParameterfv(GL.Enums.TextureTarget target, GL.Enums.GetTextureParameter pname, GLfloat[] @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = @params)
                {
                    Delegates.glGetTexParameterfv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetTexParameterfv(GL.Enums.TextureTarget target, GL.Enums.GetTextureParameter pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            unsafe
            {
                fixed (GLfloat* @params_ptr = &@params)
                {
                    Delegates.glGetTexParameterfv(target, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetTexParameteriv(GL.Enums.TextureTarget target, GL.Enums.GetTextureParameter pname, GLint* @params)
        {
            Delegates.glGetTexParameteriv(target, pname, @params);
        }
        
        public static 
        void GetTexParameteriv(GL.Enums.TextureTarget target, GL.Enums.GetTextureParameter pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glGetTexParameteriv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetTexParameteriv(GL.Enums.TextureTarget target, GL.Enums.GetTextureParameter pname, out GLint @params)
        {
            @params = default(GLint);
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glGetTexParameteriv(target, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetTexLevelParameterfv(GL.Enums.TextureTarget target, GLint level, GL.Enums.GetTextureParameter pname, GLfloat* @params)
        {
            Delegates.glGetTexLevelParameterfv(target, level, pname, @params);
        }
        
        public static 
        void GetTexLevelParameterfv(GL.Enums.TextureTarget target, GLint level, GL.Enums.GetTextureParameter pname, GLfloat[] @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = @params)
                {
                    Delegates.glGetTexLevelParameterfv(target, level, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetTexLevelParameterfv(GL.Enums.TextureTarget target, GLint level, GL.Enums.GetTextureParameter pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            unsafe
            {
                fixed (GLfloat* @params_ptr = &@params)
                {
                    Delegates.glGetTexLevelParameterfv(target, level, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetTexLevelParameteriv(GL.Enums.TextureTarget target, GLint level, GL.Enums.GetTextureParameter pname, GLint* @params)
        {
            Delegates.glGetTexLevelParameteriv(target, level, pname, @params);
        }
        
        public static 
        void GetTexLevelParameteriv(GL.Enums.TextureTarget target, GLint level, GL.Enums.GetTextureParameter pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glGetTexLevelParameteriv(target, level, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetTexLevelParameteriv(GL.Enums.TextureTarget target, GLint level, GL.Enums.GetTextureParameter pname, out GLint @params)
        {
            @params = default(GLint);
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glGetTexLevelParameteriv(target, level, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        GLboolean IsEnabled(GL.Enums.EnableCap cap)
        {
            return Delegates.glIsEnabled(cap);
        }
        
        public static 
        GLboolean IsList(GLuint list)
        {
            return Delegates.glIsList(list);
        }
        
        public static 
        void DepthRange(GLclampd near, GLclampd far)
        {
            Delegates.glDepthRange(near, far);
        }
        
        public static 
        void Frustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
        {
            Delegates.glFrustum(left, right, bottom, top, zNear, zFar);
        }
        
        public static 
        void LoadIdentity()
        {
            Delegates.glLoadIdentity();
        }
        
        public static 
        unsafe void LoadMatrixf(GLfloat* m)
        {
            Delegates.glLoadMatrixf(m);
        }
        
        public static 
        void LoadMatrixf(GLfloat[] m)
        {
            unsafe
            {
                fixed (GLfloat* m_ptr = m)
                {
                    Delegates.glLoadMatrixf(m_ptr);
                }
            }
        }
        
        public static 
        void LoadMatrixf(ref GLfloat m)
        {
            unsafe
            {
                fixed (GLfloat* m_ptr = &m)
                {
                    Delegates.glLoadMatrixf(m_ptr);
                }
            }
        }
        
        public static 
        unsafe void LoadMatrixd(GLdouble* m)
        {
            Delegates.glLoadMatrixd(m);
        }
        
        public static 
        void LoadMatrixd(GLdouble[] m)
        {
            unsafe
            {
                fixed (GLdouble* m_ptr = m)
                {
                    Delegates.glLoadMatrixd(m_ptr);
                }
            }
        }
        
        public static 
        void LoadMatrixd(ref GLdouble m)
        {
            unsafe
            {
                fixed (GLdouble* m_ptr = &m)
                {
                    Delegates.glLoadMatrixd(m_ptr);
                }
            }
        }
        
        public static 
        void MatrixMode(GL.Enums.MatrixMode mode)
        {
            Delegates.glMatrixMode(mode);
        }
        
        public static 
        unsafe void MultMatrixf(GLfloat* m)
        {
            Delegates.glMultMatrixf(m);
        }
        
        public static 
        void MultMatrixf(GLfloat[] m)
        {
            unsafe
            {
                fixed (GLfloat* m_ptr = m)
                {
                    Delegates.glMultMatrixf(m_ptr);
                }
            }
        }
        
        public static 
        void MultMatrixf(ref GLfloat m)
        {
            unsafe
            {
                fixed (GLfloat* m_ptr = &m)
                {
                    Delegates.glMultMatrixf(m_ptr);
                }
            }
        }
        
        public static 
        unsafe void MultMatrixd(GLdouble* m)
        {
            Delegates.glMultMatrixd(m);
        }
        
        public static 
        void MultMatrixd(GLdouble[] m)
        {
            unsafe
            {
                fixed (GLdouble* m_ptr = m)
                {
                    Delegates.glMultMatrixd(m_ptr);
                }
            }
        }
        
        public static 
        void MultMatrixd(ref GLdouble m)
        {
            unsafe
            {
                fixed (GLdouble* m_ptr = &m)
                {
                    Delegates.glMultMatrixd(m_ptr);
                }
            }
        }
        
        public static 
        void Ortho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
        {
            Delegates.glOrtho(left, right, bottom, top, zNear, zFar);
        }
        
        public static 
        void PopMatrix()
        {
            Delegates.glPopMatrix();
        }
        
        public static 
        void PushMatrix()
        {
            Delegates.glPushMatrix();
        }
        
        public static 
        void Rotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glRotated(angle, x, y, z);
        }
        
        public static 
        void Rotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glRotatef(angle, x, y, z);
        }
        
        public static 
        void Scaled(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glScaled(x, y, z);
        }
        
        public static 
        void Scalef(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glScalef(x, y, z);
        }
        
        public static 
        void Translated(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glTranslated(x, y, z);
        }
        
        public static 
        void Translatef(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glTranslatef(x, y, z);
        }
        
        public static 
        void Viewport(GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glViewport(x, y, width, height);
        }
        
        public static 
        void ArrayElement(GLint i)
        {
            Delegates.glArrayElement(i);
        }
        
        public static 
        unsafe void ColorPointer(GLint size, GL.Enums.ColorPointerType type, GLsizei stride, void* pointer)
        {
            Delegates.glColorPointer(size, type, stride, pointer);
        }
        
        public static 
        void ColorPointer(GLint size, GL.Enums.ColorPointerType type, GLsizei stride, object pointer)
        {
            System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glColorPointer(size, type, stride, (void*)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }
        
        public static 
        void DisableClientState(GL.Enums.EnableCap array)
        {
            Delegates.glDisableClientState(array);
        }
        
        public static 
        void DrawArrays(GL.Enums.BeginMode mode, GLint first, GLsizei count)
        {
            Delegates.glDrawArrays(mode, first, count);
        }
        
        public static 
        unsafe void DrawElements(GL.Enums.BeginMode mode, GLsizei count, GL.Enums.GLenum type, void* indices)
        {
            Delegates.glDrawElements(mode, count, type, indices);
        }
        
        public static 
        void DrawElements(GL.Enums.BeginMode mode, GLsizei count, GL.Enums.GLenum type, object indices)
        {
            System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glDrawElements(mode, count, type, (void*)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void EdgeFlagPointer(GLsizei stride, void* pointer)
        {
            Delegates.glEdgeFlagPointer(stride, pointer);
        }
        
        public static 
        void EdgeFlagPointer(GLsizei stride, object pointer)
        {
            System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glEdgeFlagPointer(stride, (void*)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }
        
        public static 
        void EnableClientState(GL.Enums.EnableCap array)
        {
            Delegates.glEnableClientState(array);
        }
        
        public static 
        unsafe void GetPointerv(GL.Enums.GetPointervPName pname, void* @params)
        {
            Delegates.glGetPointerv(pname, @params);
        }
        
        public static 
        void GetPointerv(GL.Enums.GetPointervPName pname, object @params)
        {
            System.Runtime.InteropServices.GCHandle @params_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@params, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glGetPointerv(pname, (void*)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void IndexPointer(GL.Enums.IndexPointerType type, GLsizei stride, void* pointer)
        {
            Delegates.glIndexPointer(type, stride, pointer);
        }
        
        public static 
        void IndexPointer(GL.Enums.IndexPointerType type, GLsizei stride, object pointer)
        {
            System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glIndexPointer(type, stride, (void*)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void InterleavedArrays(GL.Enums.InterleavedArrayFormat format, GLsizei stride, void* pointer)
        {
            Delegates.glInterleavedArrays(format, stride, pointer);
        }
        
        public static 
        void InterleavedArrays(GL.Enums.InterleavedArrayFormat format, GLsizei stride, object pointer)
        {
            System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glInterleavedArrays(format, stride, (void*)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void NormalPointer(GL.Enums.NormalPointerType type, GLsizei stride, void* pointer)
        {
            Delegates.glNormalPointer(type, stride, pointer);
        }
        
        public static 
        void NormalPointer(GL.Enums.NormalPointerType type, GLsizei stride, object pointer)
        {
            System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glNormalPointer(type, stride, (void*)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void TexCoordPointer(GLint size, GL.Enums.TexCoordPointerType type, GLsizei stride, void* pointer)
        {
            Delegates.glTexCoordPointer(size, type, stride, pointer);
        }
        
        public static 
        void TexCoordPointer(GLint size, GL.Enums.TexCoordPointerType type, GLsizei stride, object pointer)
        {
            System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glTexCoordPointer(size, type, stride, (void*)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void VertexPointer(GLint size, GL.Enums.VertexPointerType type, GLsizei stride, void* pointer)
        {
            Delegates.glVertexPointer(size, type, stride, pointer);
        }
        
        public static 
        void VertexPointer(GLint size, GL.Enums.VertexPointerType type, GLsizei stride, object pointer)
        {
            System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glVertexPointer(size, type, stride, (void*)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }
        
        public static 
        void PolygonOffset(GLfloat factor, GLfloat units)
        {
            Delegates.glPolygonOffset(factor, units);
        }
        
        public static 
        void CopyTexImage1D(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLint border)
        {
            Delegates.glCopyTexImage1D(target, level, internalformat, x, y, width, border);
        }
        
        public static 
        void CopyTexImage2D(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
        {
            Delegates.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
        }
        
        public static 
        void CopyTexSubImage1D(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyTexSubImage1D(target, level, xoffset, x, y, width);
        }
        
        public static 
        void CopyTexSubImage2D(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
        }
        
        public static 
        unsafe void TexSubImage1D(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels)
        {
            Delegates.glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
        }
        
        public static 
        void TexSubImage1D(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object pixels)
        {
            System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glTexSubImage1D(target, level, xoffset, width, format, type, (void*)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void TexSubImage2D(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels)
        {
            Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        
        public static 
        void TexSubImage2D(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object pixels)
        {
            System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, (void*)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe GLboolean AreTexturesResident(GLsizei n, GLuint* textures, GL.Enums.Boolean* residences)
        {
            return Delegates.glAreTexturesResident(n, textures, residences);
        }
        
        public static 
        unsafe GLboolean AreTexturesResident(GLsizei n, GLuint[] textures, GL.Enums.Boolean* residences)
        {
            residences = default(GL.Enums.Boolean*);
                fixed (GLuint* textures_ptr = textures)
                {
                    GLboolean retval = Delegates.glAreTexturesResident(n, textures_ptr, residences);
                    return retval;
                }
        }
        
        public static 
        unsafe GLboolean AreTexturesResident(GLsizei n, ref GLuint textures, GL.Enums.Boolean* residences)
        {
            residences = default(GL.Enums.Boolean*);
                fixed (GLuint* textures_ptr = &textures)
                {
                    GLboolean retval = Delegates.glAreTexturesResident(n, textures_ptr, residences);
                    return retval;
                }
        }
        
        public static 
        void BindTexture(GL.Enums.TextureTarget target, GLuint texture)
        {
            Delegates.glBindTexture(target, texture);
        }
        
        public static 
        unsafe void DeleteTextures(GLsizei n, GLuint* textures)
        {
            Delegates.glDeleteTextures(n, textures);
        }
        
        public static 
        void DeleteTextures(GLsizei n, GLuint[] textures)
        {
            unsafe
            {
                fixed (GLuint* textures_ptr = textures)
                {
                    Delegates.glDeleteTextures(n, textures_ptr);
                }
            }
        }
        
        public static 
        void DeleteTextures(GLsizei n, ref GLuint textures)
        {
            unsafe
            {
                fixed (GLuint* textures_ptr = &textures)
                {
                    Delegates.glDeleteTextures(n, textures_ptr);
                }
            }
        }
        
        public static 
        unsafe void GenTextures(GLsizei n, GLuint* textures)
        {
            Delegates.glGenTextures(n, textures);
        }
        
        public static 
        void GenTextures(GLsizei n, GLuint[] textures)
        {
            unsafe
            {
                fixed (GLuint* textures_ptr = textures)
                {
                    Delegates.glGenTextures(n, textures_ptr);
                }
            }
        }
        
        public static 
        void GenTextures(GLsizei n, out GLuint textures)
        {
            textures = default(GLuint);
            unsafe
            {
                fixed (GLuint* textures_ptr = &textures)
                {
                    Delegates.glGenTextures(n, textures_ptr);
                    textures = *textures_ptr;
                }
            }
        }
        
        public static 
        GLboolean IsTexture(GLuint texture)
        {
            return Delegates.glIsTexture(texture);
        }
        
        public static 
        unsafe void PrioritizeTextures(GLsizei n, GLuint* textures, GLclampf* priorities)
        {
            Delegates.glPrioritizeTextures(n, textures, priorities);
        }
        
        public static 
        unsafe void PrioritizeTextures(GLsizei n, GLuint* textures, GLclampf[] priorities)
        {
                fixed (GLclampf* priorities_ptr = priorities)
                {
                    Delegates.glPrioritizeTextures(n, textures, priorities_ptr);
                }
        }
        
        public static 
        unsafe void PrioritizeTextures(GLsizei n, GLuint* textures, ref GLclampf priorities)
        {
                fixed (GLclampf* priorities_ptr = &priorities)
                {
                    Delegates.glPrioritizeTextures(n, textures, priorities_ptr);
                }
        }
        
        public static 
        unsafe void PrioritizeTextures(GLsizei n, GLuint[] textures, GLclampf* priorities)
        {
                fixed (GLuint* textures_ptr = textures)
                {
                    Delegates.glPrioritizeTextures(n, textures_ptr, priorities);
                }
        }
        
        public static 
        void PrioritizeTextures(GLsizei n, GLuint[] textures, GLclampf[] priorities)
        {
            unsafe
            {
                fixed (GLuint* textures_ptr = textures)
                fixed (GLclampf* priorities_ptr = priorities)
                {
                    Delegates.glPrioritizeTextures(n, textures_ptr, priorities_ptr);
                }
            }
        }
        
        public static 
        void PrioritizeTextures(GLsizei n, GLuint[] textures, ref GLclampf priorities)
        {
            unsafe
            {
                fixed (GLuint* textures_ptr = textures)
                fixed (GLclampf* priorities_ptr = &priorities)
                {
                    Delegates.glPrioritizeTextures(n, textures_ptr, priorities_ptr);
                }
            }
        }
        
        public static 
        unsafe void PrioritizeTextures(GLsizei n, ref GLuint textures, GLclampf* priorities)
        {
                fixed (GLuint* textures_ptr = &textures)
                {
                    Delegates.glPrioritizeTextures(n, textures_ptr, priorities);
                }
        }
        
        public static 
        void PrioritizeTextures(GLsizei n, ref GLuint textures, GLclampf[] priorities)
        {
            unsafe
            {
                fixed (GLuint* textures_ptr = &textures)
                fixed (GLclampf* priorities_ptr = priorities)
                {
                    Delegates.glPrioritizeTextures(n, textures_ptr, priorities_ptr);
                }
            }
        }
        
        public static 
        void PrioritizeTextures(GLsizei n, ref GLuint textures, ref GLclampf priorities)
        {
            unsafe
            {
                fixed (GLuint* textures_ptr = &textures)
                fixed (GLclampf* priorities_ptr = &priorities)
                {
                    Delegates.glPrioritizeTextures(n, textures_ptr, priorities_ptr);
                }
            }
        }
        
        public static 
        void Indexub(GLubyte c)
        {
            Delegates.glIndexub(c);
        }
        
        public static 
        unsafe void Indexubv(GLubyte* c)
        {
            Delegates.glIndexubv(c);
        }
        
        public static 
        void Indexubv(GLubyte[] c)
        {
            unsafe
            {
                fixed (GLubyte* c_ptr = c)
                {
                    Delegates.glIndexubv(c_ptr);
                }
            }
        }
        
        public static 
        void Indexubv(ref GLubyte c)
        {
            unsafe
            {
                fixed (GLubyte* c_ptr = &c)
                {
                    Delegates.glIndexubv(c_ptr);
                }
            }
        }
        
        public static 
        void PopClientAttrib()
        {
            Delegates.glPopClientAttrib();
        }
        
        public static 
        void PushClientAttrib(GL.Enums.ClientAttribMask mask)
        {
            Delegates.glPushClientAttrib(mask);
        }
        
        public static 
        void BlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
        {
            Delegates.glBlendColor(red, green, blue, alpha);
        }
        
        public static 
        void BlendEquation(GL.Enums.VERSION_1_2 mode)
        {
            Delegates.glBlendEquation(mode);
        }
        
        public static 
        unsafe void DrawRangeElements(GL.Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count, GL.Enums.VERSION_1_2 type, void* indices)
        {
            Delegates.glDrawRangeElements(mode, start, end, count, type, indices);
        }
        
        public static 
        void DrawRangeElements(GL.Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count, GL.Enums.VERSION_1_2 type, object indices)
        {
            System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glDrawRangeElements(mode, start, end, count, type, (void*)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void ColorTable(GL.Enums.VERSION_1_2 target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* table)
        {
            Delegates.glColorTable(target, internalformat, width, format, type, table);
        }
        
        public static 
        void ColorTable(GL.Enums.VERSION_1_2 target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object table)
        {
            System.Runtime.InteropServices.GCHandle table_ptr = System.Runtime.InteropServices.GCHandle.Alloc(table, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glColorTable(target, internalformat, width, format, type, (void*)table_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    table_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void ColorTableParameterfv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLfloat* @params)
        {
            Delegates.glColorTableParameterfv(target, pname, @params);
        }
        
        public static 
        void ColorTableParameterfv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLfloat[] @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = @params)
                {
                    Delegates.glColorTableParameterfv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void ColorTableParameterfv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, ref GLfloat @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = &@params)
                {
                    Delegates.glColorTableParameterfv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        unsafe void ColorTableParameteriv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLint* @params)
        {
            Delegates.glColorTableParameteriv(target, pname, @params);
        }
        
        public static 
        void ColorTableParameteriv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glColorTableParameteriv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void ColorTableParameteriv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, ref GLint @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glColorTableParameteriv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void CopyColorTable(GL.Enums.VERSION_1_2 target, GL.Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyColorTable(target, internalformat, x, y, width);
        }
        
        public static 
        unsafe void GetColorTable(GL.Enums.VERSION_1_2 target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* table)
        {
            Delegates.glGetColorTable(target, format, type, table);
        }
        
        public static 
        void GetColorTable(GL.Enums.VERSION_1_2 target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object table)
        {
            System.Runtime.InteropServices.GCHandle table_ptr = System.Runtime.InteropServices.GCHandle.Alloc(table, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glGetColorTable(target, format, type, (void*)table_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    table_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void GetColorTableParameterfv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLfloat* @params)
        {
            Delegates.glGetColorTableParameterfv(target, pname, @params);
        }
        
        public static 
        void GetColorTableParameterfv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLfloat[] @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = @params)
                {
                    Delegates.glGetColorTableParameterfv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetColorTableParameterfv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            unsafe
            {
                fixed (GLfloat* @params_ptr = &@params)
                {
                    Delegates.glGetColorTableParameterfv(target, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetColorTableParameteriv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLint* @params)
        {
            Delegates.glGetColorTableParameteriv(target, pname, @params);
        }
        
        public static 
        void GetColorTableParameteriv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glGetColorTableParameteriv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetColorTableParameteriv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, out GLint @params)
        {
            @params = default(GLint);
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glGetColorTableParameteriv(target, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void ColorSubTable(GL.Enums.VERSION_1_2 target, GLsizei start, GLsizei count, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* data)
        {
            Delegates.glColorSubTable(target, start, count, format, type, data);
        }
        
        public static 
        void ColorSubTable(GL.Enums.VERSION_1_2 target, GLsizei start, GLsizei count, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object data)
        {
            System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glColorSubTable(target, start, count, format, type, (void*)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }
        
        public static 
        void CopyColorSubTable(GL.Enums.VERSION_1_2 target, GLsizei start, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyColorSubTable(target, start, x, y, width);
        }
        
        public static 
        unsafe void ConvolutionFilter1D(GL.Enums.VERSION_1_2 target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* image)
        {
            Delegates.glConvolutionFilter1D(target, internalformat, width, format, type, image);
        }
        
        public static 
        void ConvolutionFilter1D(GL.Enums.VERSION_1_2 target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object image)
        {
            System.Runtime.InteropServices.GCHandle image_ptr = System.Runtime.InteropServices.GCHandle.Alloc(image, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glConvolutionFilter1D(target, internalformat, width, format, type, (void*)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void ConvolutionFilter2D(GL.Enums.VERSION_1_2 target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* image)
        {
            Delegates.glConvolutionFilter2D(target, internalformat, width, height, format, type, image);
        }
        
        public static 
        void ConvolutionFilter2D(GL.Enums.VERSION_1_2 target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object image)
        {
            System.Runtime.InteropServices.GCHandle image_ptr = System.Runtime.InteropServices.GCHandle.Alloc(image, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glConvolutionFilter2D(target, internalformat, width, height, format, type, (void*)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }
        }
        
        public static 
        void ConvolutionParameterf(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLfloat @params)
        {
            Delegates.glConvolutionParameterf(target, pname, @params);
        }
        
        public static 
        unsafe void ConvolutionParameterfv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLfloat* @params)
        {
            Delegates.glConvolutionParameterfv(target, pname, @params);
        }
        
        public static 
        void ConvolutionParameterfv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLfloat[] @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = @params)
                {
                    Delegates.glConvolutionParameterfv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void ConvolutionParameterfv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, ref GLfloat @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = &@params)
                {
                    Delegates.glConvolutionParameterfv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void ConvolutionParameteri(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLint @params)
        {
            Delegates.glConvolutionParameteri(target, pname, @params);
        }
        
        public static 
        unsafe void ConvolutionParameteriv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLint* @params)
        {
            Delegates.glConvolutionParameteriv(target, pname, @params);
        }
        
        public static 
        void ConvolutionParameteriv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glConvolutionParameteriv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void ConvolutionParameteriv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, ref GLint @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glConvolutionParameteriv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void CopyConvolutionFilter1D(GL.Enums.VERSION_1_2 target, GL.Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyConvolutionFilter1D(target, internalformat, x, y, width);
        }
        
        public static 
        void CopyConvolutionFilter2D(GL.Enums.VERSION_1_2 target, GL.Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glCopyConvolutionFilter2D(target, internalformat, x, y, width, height);
        }
        
        public static 
        unsafe void GetConvolutionFilter(GL.Enums.VERSION_1_2 target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* image)
        {
            Delegates.glGetConvolutionFilter(target, format, type, image);
        }
        
        public static 
        void GetConvolutionFilter(GL.Enums.VERSION_1_2 target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object image)
        {
            System.Runtime.InteropServices.GCHandle image_ptr = System.Runtime.InteropServices.GCHandle.Alloc(image, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glGetConvolutionFilter(target, format, type, (void*)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void GetConvolutionParameterfv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLfloat* @params)
        {
            Delegates.glGetConvolutionParameterfv(target, pname, @params);
        }
        
        public static 
        void GetConvolutionParameterfv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLfloat[] @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = @params)
                {
                    Delegates.glGetConvolutionParameterfv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetConvolutionParameterfv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            unsafe
            {
                fixed (GLfloat* @params_ptr = &@params)
                {
                    Delegates.glGetConvolutionParameterfv(target, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetConvolutionParameteriv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLint* @params)
        {
            Delegates.glGetConvolutionParameteriv(target, pname, @params);
        }
        
        public static 
        void GetConvolutionParameteriv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glGetConvolutionParameteriv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetConvolutionParameteriv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, out GLint @params)
        {
            @params = default(GLint);
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glGetConvolutionParameteriv(target, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetSeparableFilter(GL.Enums.VERSION_1_2 target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* row, void* column, void* span)
        {
            Delegates.glGetSeparableFilter(target, format, type, row, column, span);
        }
        
        public static 
        unsafe void GetSeparableFilter(GL.Enums.VERSION_1_2 target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* row, void* column, object span)
        {
            row = default(void*);
            column = default(void*);
            System.Runtime.InteropServices.GCHandle span_ptr = System.Runtime.InteropServices.GCHandle.Alloc(span, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilter(target, format, type, row, column, (void*)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    span_ptr.Free();
                }
        }
        
        public static 
        unsafe void GetSeparableFilter(GL.Enums.VERSION_1_2 target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* row, object column, void* span)
        {
            row = default(void*);
            span = default(void*);
            System.Runtime.InteropServices.GCHandle column_ptr = System.Runtime.InteropServices.GCHandle.Alloc(column, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilter(target, format, type, row, (void*)column_ptr.AddrOfPinnedObject(), span);
                }
                finally
                {
                    column_ptr.Free();
                }
        }
        
        public static 
        unsafe void GetSeparableFilter(GL.Enums.VERSION_1_2 target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* row, object column, object span)
        {
            row = default(void*);
            System.Runtime.InteropServices.GCHandle span_ptr = System.Runtime.InteropServices.GCHandle.Alloc(span, System.Runtime.InteropServices.GCHandleType.Pinned);
            System.Runtime.InteropServices.GCHandle column_ptr = System.Runtime.InteropServices.GCHandle.Alloc(column, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilter(target, format, type, row, (void*)column_ptr.AddrOfPinnedObject(), (void*)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    column_ptr.Free();
                    span_ptr.Free();
                }
        }
        
        public static 
        unsafe void GetSeparableFilter(GL.Enums.VERSION_1_2 target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object row, void* column, void* span)
        {
            column = default(void*);
            span = default(void*);
            System.Runtime.InteropServices.GCHandle row_ptr = System.Runtime.InteropServices.GCHandle.Alloc(row, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilter(target, format, type, (void*)row_ptr.AddrOfPinnedObject(), column, span);
                }
                finally
                {
                    row_ptr.Free();
                }
        }
        
        public static 
        unsafe void GetSeparableFilter(GL.Enums.VERSION_1_2 target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object row, void* column, object span)
        {
            column = default(void*);
            System.Runtime.InteropServices.GCHandle span_ptr = System.Runtime.InteropServices.GCHandle.Alloc(span, System.Runtime.InteropServices.GCHandleType.Pinned);
            System.Runtime.InteropServices.GCHandle row_ptr = System.Runtime.InteropServices.GCHandle.Alloc(row, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilter(target, format, type, (void*)row_ptr.AddrOfPinnedObject(), column, (void*)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    span_ptr.Free();
                }
        }
        
        public static 
        unsafe void GetSeparableFilter(GL.Enums.VERSION_1_2 target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object row, object column, void* span)
        {
            span = default(void*);
            System.Runtime.InteropServices.GCHandle column_ptr = System.Runtime.InteropServices.GCHandle.Alloc(column, System.Runtime.InteropServices.GCHandleType.Pinned);
            System.Runtime.InteropServices.GCHandle row_ptr = System.Runtime.InteropServices.GCHandle.Alloc(row, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilter(target, format, type, (void*)row_ptr.AddrOfPinnedObject(), (void*)column_ptr.AddrOfPinnedObject(), span);
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                }
        }
        
        public static 
        void GetSeparableFilter(GL.Enums.VERSION_1_2 target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object row, object column, object span)
        {
            System.Runtime.InteropServices.GCHandle span_ptr = System.Runtime.InteropServices.GCHandle.Alloc(span, System.Runtime.InteropServices.GCHandleType.Pinned);
            System.Runtime.InteropServices.GCHandle column_ptr = System.Runtime.InteropServices.GCHandle.Alloc(column, System.Runtime.InteropServices.GCHandleType.Pinned);
            System.Runtime.InteropServices.GCHandle row_ptr = System.Runtime.InteropServices.GCHandle.Alloc(row, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glGetSeparableFilter(target, format, type, (void*)row_ptr.AddrOfPinnedObject(), (void*)column_ptr.AddrOfPinnedObject(), (void*)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void SeparableFilter2D(GL.Enums.VERSION_1_2 target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* row, void* column)
        {
            Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, row, column);
        }
        
        public static 
        unsafe void SeparableFilter2D(GL.Enums.VERSION_1_2 target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* row, object column)
        {
            System.Runtime.InteropServices.GCHandle column_ptr = System.Runtime.InteropServices.GCHandle.Alloc(column, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, row, (void*)column_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    column_ptr.Free();
                }
        }
        
        public static 
        unsafe void SeparableFilter2D(GL.Enums.VERSION_1_2 target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object row, void* column)
        {
            System.Runtime.InteropServices.GCHandle row_ptr = System.Runtime.InteropServices.GCHandle.Alloc(row, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, (void*)row_ptr.AddrOfPinnedObject(), column);
                }
                finally
                {
                    row_ptr.Free();
                }
        }
        
        public static 
        void SeparableFilter2D(GL.Enums.VERSION_1_2 target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object row, object column)
        {
            System.Runtime.InteropServices.GCHandle column_ptr = System.Runtime.InteropServices.GCHandle.Alloc(column, System.Runtime.InteropServices.GCHandleType.Pinned);
            System.Runtime.InteropServices.GCHandle row_ptr = System.Runtime.InteropServices.GCHandle.Alloc(row, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, (void*)row_ptr.AddrOfPinnedObject(), (void*)column_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void GetHistogram(GL.Enums.VERSION_1_2 target, GL.Enums.Boolean reset, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* values)
        {
            Delegates.glGetHistogram(target, reset, format, type, values);
        }
        
        public static 
        void GetHistogram(GL.Enums.VERSION_1_2 target, GL.Enums.Boolean reset, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object values)
        {
            System.Runtime.InteropServices.GCHandle values_ptr = System.Runtime.InteropServices.GCHandle.Alloc(values, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glGetHistogram(target, reset, format, type, (void*)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void GetHistogramParameterfv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLfloat* @params)
        {
            Delegates.glGetHistogramParameterfv(target, pname, @params);
        }
        
        public static 
        void GetHistogramParameterfv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLfloat[] @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = @params)
                {
                    Delegates.glGetHistogramParameterfv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetHistogramParameterfv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            unsafe
            {
                fixed (GLfloat* @params_ptr = &@params)
                {
                    Delegates.glGetHistogramParameterfv(target, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetHistogramParameteriv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLint* @params)
        {
            Delegates.glGetHistogramParameteriv(target, pname, @params);
        }
        
        public static 
        void GetHistogramParameteriv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glGetHistogramParameteriv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetHistogramParameteriv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, out GLint @params)
        {
            @params = default(GLint);
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glGetHistogramParameteriv(target, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetMinmax(GL.Enums.VERSION_1_2 target, GL.Enums.Boolean reset, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* values)
        {
            Delegates.glGetMinmax(target, reset, format, type, values);
        }
        
        public static 
        void GetMinmax(GL.Enums.VERSION_1_2 target, GL.Enums.Boolean reset, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object values)
        {
            System.Runtime.InteropServices.GCHandle values_ptr = System.Runtime.InteropServices.GCHandle.Alloc(values, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glGetMinmax(target, reset, format, type, (void*)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void GetMinmaxParameterfv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLfloat* @params)
        {
            Delegates.glGetMinmaxParameterfv(target, pname, @params);
        }
        
        public static 
        void GetMinmaxParameterfv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLfloat[] @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = @params)
                {
                    Delegates.glGetMinmaxParameterfv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetMinmaxParameterfv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            unsafe
            {
                fixed (GLfloat* @params_ptr = &@params)
                {
                    Delegates.glGetMinmaxParameterfv(target, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetMinmaxParameteriv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLint* @params)
        {
            Delegates.glGetMinmaxParameteriv(target, pname, @params);
        }
        
        public static 
        void GetMinmaxParameteriv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glGetMinmaxParameteriv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetMinmaxParameteriv(GL.Enums.VERSION_1_2 target, GL.Enums.VERSION_1_2 pname, out GLint @params)
        {
            @params = default(GLint);
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glGetMinmaxParameteriv(target, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        void ResetHistogram(GL.Enums.VERSION_1_2 target)
        {
            Delegates.glResetHistogram(target);
        }
        
        public static 
        void ResetMinmax(GL.Enums.VERSION_1_2 target)
        {
            Delegates.glResetMinmax(target);
        }
        
        public static 
        unsafe void TexImage3D(GL.Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels)
        {
            Delegates.glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        
        public static 
        void TexImage3D(GL.Enums.TextureTarget target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object pixels)
        {
            System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, (void*)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void TexSubImage3D(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels)
        {
            Delegates.glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        
        public static 
        void TexSubImage3D(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object pixels)
        {
            System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, (void*)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
        }
        
        public static 
        void CopyTexSubImage3D(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        public static 
        void ActiveTexture(GL.Enums.VERSION_1_3 texture)
        {
            Delegates.glActiveTexture(texture);
        }
        
        public static 
        void ClientActiveTexture(GL.Enums.VERSION_1_3 texture)
        {
            Delegates.glClientActiveTexture(texture);
        }
        
        public static 
        void MultiTexCoord1d(GL.Enums.VERSION_1_3 target, GLdouble s)
        {
            Delegates.glMultiTexCoord1d(target, s);
        }
        
        public static 
        unsafe void MultiTexCoord1dv(GL.Enums.VERSION_1_3 target, GLdouble* v)
        {
            Delegates.glMultiTexCoord1dv(target, v);
        }
        
        public static 
        void MultiTexCoord1dv(GL.Enums.VERSION_1_3 target, GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glMultiTexCoord1dv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord1dv(GL.Enums.VERSION_1_3 target, ref GLdouble v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord1dv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord1f(GL.Enums.VERSION_1_3 target, GLfloat s)
        {
            Delegates.glMultiTexCoord1f(target, s);
        }
        
        public static 
        unsafe void MultiTexCoord1fv(GL.Enums.VERSION_1_3 target, GLfloat* v)
        {
            Delegates.glMultiTexCoord1fv(target, v);
        }
        
        public static 
        void MultiTexCoord1fv(GL.Enums.VERSION_1_3 target, GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glMultiTexCoord1fv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord1fv(GL.Enums.VERSION_1_3 target, ref GLfloat v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord1fv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord1i(GL.Enums.VERSION_1_3 target, GLint s)
        {
            Delegates.glMultiTexCoord1i(target, s);
        }
        
        public static 
        unsafe void MultiTexCoord1iv(GL.Enums.VERSION_1_3 target, GLint* v)
        {
            Delegates.glMultiTexCoord1iv(target, v);
        }
        
        public static 
        void MultiTexCoord1iv(GL.Enums.VERSION_1_3 target, GLint[] v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = v)
                {
                    Delegates.glMultiTexCoord1iv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord1iv(GL.Enums.VERSION_1_3 target, ref GLint v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord1iv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord1s(GL.Enums.VERSION_1_3 target, GLshort s)
        {
            Delegates.glMultiTexCoord1s(target, s);
        }
        
        public static 
        unsafe void MultiTexCoord1sv(GL.Enums.VERSION_1_3 target, GLshort* v)
        {
            Delegates.glMultiTexCoord1sv(target, v);
        }
        
        public static 
        void MultiTexCoord1sv(GL.Enums.VERSION_1_3 target, GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glMultiTexCoord1sv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord1sv(GL.Enums.VERSION_1_3 target, ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord1sv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord2d(GL.Enums.VERSION_1_3 target, GLdouble s, GLdouble t)
        {
            Delegates.glMultiTexCoord2d(target, s, t);
        }
        
        public static 
        unsafe void MultiTexCoord2dv(GL.Enums.VERSION_1_3 target, GLdouble* v)
        {
            Delegates.glMultiTexCoord2dv(target, v);
        }
        
        public static 
        void MultiTexCoord2dv(GL.Enums.VERSION_1_3 target, GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glMultiTexCoord2dv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord2dv(GL.Enums.VERSION_1_3 target, ref GLdouble v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord2dv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord2f(GL.Enums.VERSION_1_3 target, GLfloat s, GLfloat t)
        {
            Delegates.glMultiTexCoord2f(target, s, t);
        }
        
        public static 
        unsafe void MultiTexCoord2fv(GL.Enums.VERSION_1_3 target, GLfloat* v)
        {
            Delegates.glMultiTexCoord2fv(target, v);
        }
        
        public static 
        void MultiTexCoord2fv(GL.Enums.VERSION_1_3 target, GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glMultiTexCoord2fv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord2fv(GL.Enums.VERSION_1_3 target, ref GLfloat v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord2fv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord2i(GL.Enums.VERSION_1_3 target, GLint s, GLint t)
        {
            Delegates.glMultiTexCoord2i(target, s, t);
        }
        
        public static 
        unsafe void MultiTexCoord2iv(GL.Enums.VERSION_1_3 target, GLint* v)
        {
            Delegates.glMultiTexCoord2iv(target, v);
        }
        
        public static 
        void MultiTexCoord2iv(GL.Enums.VERSION_1_3 target, GLint[] v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = v)
                {
                    Delegates.glMultiTexCoord2iv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord2iv(GL.Enums.VERSION_1_3 target, ref GLint v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord2iv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord2s(GL.Enums.VERSION_1_3 target, GLshort s, GLshort t)
        {
            Delegates.glMultiTexCoord2s(target, s, t);
        }
        
        public static 
        unsafe void MultiTexCoord2sv(GL.Enums.VERSION_1_3 target, GLshort* v)
        {
            Delegates.glMultiTexCoord2sv(target, v);
        }
        
        public static 
        void MultiTexCoord2sv(GL.Enums.VERSION_1_3 target, GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glMultiTexCoord2sv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord2sv(GL.Enums.VERSION_1_3 target, ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord2sv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord3d(GL.Enums.VERSION_1_3 target, GLdouble s, GLdouble t, GLdouble r)
        {
            Delegates.glMultiTexCoord3d(target, s, t, r);
        }
        
        public static 
        unsafe void MultiTexCoord3dv(GL.Enums.VERSION_1_3 target, GLdouble* v)
        {
            Delegates.glMultiTexCoord3dv(target, v);
        }
        
        public static 
        void MultiTexCoord3dv(GL.Enums.VERSION_1_3 target, GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glMultiTexCoord3dv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord3dv(GL.Enums.VERSION_1_3 target, ref GLdouble v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord3dv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord3f(GL.Enums.VERSION_1_3 target, GLfloat s, GLfloat t, GLfloat r)
        {
            Delegates.glMultiTexCoord3f(target, s, t, r);
        }
        
        public static 
        unsafe void MultiTexCoord3fv(GL.Enums.VERSION_1_3 target, GLfloat* v)
        {
            Delegates.glMultiTexCoord3fv(target, v);
        }
        
        public static 
        void MultiTexCoord3fv(GL.Enums.VERSION_1_3 target, GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glMultiTexCoord3fv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord3fv(GL.Enums.VERSION_1_3 target, ref GLfloat v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord3fv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord3i(GL.Enums.VERSION_1_3 target, GLint s, GLint t, GLint r)
        {
            Delegates.glMultiTexCoord3i(target, s, t, r);
        }
        
        public static 
        unsafe void MultiTexCoord3iv(GL.Enums.VERSION_1_3 target, GLint* v)
        {
            Delegates.glMultiTexCoord3iv(target, v);
        }
        
        public static 
        void MultiTexCoord3iv(GL.Enums.VERSION_1_3 target, GLint[] v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = v)
                {
                    Delegates.glMultiTexCoord3iv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord3iv(GL.Enums.VERSION_1_3 target, ref GLint v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord3iv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord3s(GL.Enums.VERSION_1_3 target, GLshort s, GLshort t, GLshort r)
        {
            Delegates.glMultiTexCoord3s(target, s, t, r);
        }
        
        public static 
        unsafe void MultiTexCoord3sv(GL.Enums.VERSION_1_3 target, GLshort* v)
        {
            Delegates.glMultiTexCoord3sv(target, v);
        }
        
        public static 
        void MultiTexCoord3sv(GL.Enums.VERSION_1_3 target, GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glMultiTexCoord3sv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord3sv(GL.Enums.VERSION_1_3 target, ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord3sv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord4d(GL.Enums.VERSION_1_3 target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
        {
            Delegates.glMultiTexCoord4d(target, s, t, r, q);
        }
        
        public static 
        unsafe void MultiTexCoord4dv(GL.Enums.VERSION_1_3 target, GLdouble* v)
        {
            Delegates.glMultiTexCoord4dv(target, v);
        }
        
        public static 
        void MultiTexCoord4dv(GL.Enums.VERSION_1_3 target, GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glMultiTexCoord4dv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord4dv(GL.Enums.VERSION_1_3 target, ref GLdouble v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord4dv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord4f(GL.Enums.VERSION_1_3 target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
        {
            Delegates.glMultiTexCoord4f(target, s, t, r, q);
        }
        
        public static 
        unsafe void MultiTexCoord4fv(GL.Enums.VERSION_1_3 target, GLfloat* v)
        {
            Delegates.glMultiTexCoord4fv(target, v);
        }
        
        public static 
        void MultiTexCoord4fv(GL.Enums.VERSION_1_3 target, GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glMultiTexCoord4fv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord4fv(GL.Enums.VERSION_1_3 target, ref GLfloat v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord4fv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord4i(GL.Enums.VERSION_1_3 target, GLint s, GLint t, GLint r, GLint q)
        {
            Delegates.glMultiTexCoord4i(target, s, t, r, q);
        }
        
        public static 
        unsafe void MultiTexCoord4iv(GL.Enums.VERSION_1_3 target, GLint* v)
        {
            Delegates.glMultiTexCoord4iv(target, v);
        }
        
        public static 
        void MultiTexCoord4iv(GL.Enums.VERSION_1_3 target, GLint[] v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = v)
                {
                    Delegates.glMultiTexCoord4iv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord4iv(GL.Enums.VERSION_1_3 target, ref GLint v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord4iv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord4s(GL.Enums.VERSION_1_3 target, GLshort s, GLshort t, GLshort r, GLshort q)
        {
            Delegates.glMultiTexCoord4s(target, s, t, r, q);
        }
        
        public static 
        unsafe void MultiTexCoord4sv(GL.Enums.VERSION_1_3 target, GLshort* v)
        {
            Delegates.glMultiTexCoord4sv(target, v);
        }
        
        public static 
        void MultiTexCoord4sv(GL.Enums.VERSION_1_3 target, GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glMultiTexCoord4sv(target, v_ptr);
                }
            }
        }
        
        public static 
        void MultiTexCoord4sv(GL.Enums.VERSION_1_3 target, ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord4sv(target, v_ptr);
                }
            }
        }
        
        public static 
        unsafe void LoadTransposeMatrixf(GLfloat* m)
        {
            Delegates.glLoadTransposeMatrixf(m);
        }
        
        public static 
        void LoadTransposeMatrixf(GLfloat[] m)
        {
            unsafe
            {
                fixed (GLfloat* m_ptr = m)
                {
                    Delegates.glLoadTransposeMatrixf(m_ptr);
                }
            }
        }
        
        public static 
        void LoadTransposeMatrixf(ref GLfloat m)
        {
            unsafe
            {
                fixed (GLfloat* m_ptr = &m)
                {
                    Delegates.glLoadTransposeMatrixf(m_ptr);
                }
            }
        }
        
        public static 
        unsafe void LoadTransposeMatrixd(GLdouble* m)
        {
            Delegates.glLoadTransposeMatrixd(m);
        }
        
        public static 
        void LoadTransposeMatrixd(GLdouble[] m)
        {
            unsafe
            {
                fixed (GLdouble* m_ptr = m)
                {
                    Delegates.glLoadTransposeMatrixd(m_ptr);
                }
            }
        }
        
        public static 
        void LoadTransposeMatrixd(ref GLdouble m)
        {
            unsafe
            {
                fixed (GLdouble* m_ptr = &m)
                {
                    Delegates.glLoadTransposeMatrixd(m_ptr);
                }
            }
        }
        
        public static 
        unsafe void MultTransposeMatrixf(GLfloat* m)
        {
            Delegates.glMultTransposeMatrixf(m);
        }
        
        public static 
        void MultTransposeMatrixf(GLfloat[] m)
        {
            unsafe
            {
                fixed (GLfloat* m_ptr = m)
                {
                    Delegates.glMultTransposeMatrixf(m_ptr);
                }
            }
        }
        
        public static 
        void MultTransposeMatrixf(ref GLfloat m)
        {
            unsafe
            {
                fixed (GLfloat* m_ptr = &m)
                {
                    Delegates.glMultTransposeMatrixf(m_ptr);
                }
            }
        }
        
        public static 
        unsafe void MultTransposeMatrixd(GLdouble* m)
        {
            Delegates.glMultTransposeMatrixd(m);
        }
        
        public static 
        void MultTransposeMatrixd(GLdouble[] m)
        {
            unsafe
            {
                fixed (GLdouble* m_ptr = m)
                {
                    Delegates.glMultTransposeMatrixd(m_ptr);
                }
            }
        }
        
        public static 
        void MultTransposeMatrixd(ref GLdouble m)
        {
            unsafe
            {
                fixed (GLdouble* m_ptr = &m)
                {
                    Delegates.glMultTransposeMatrixd(m_ptr);
                }
            }
        }
        
        public static 
        unsafe void CompressedTexImage3D(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, void* data)
        {
            Delegates.glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
        }
        
        public static 
        void CompressedTexImage3D(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, object data)
        {
            System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, (void*)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void CompressedTexImage2D(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, void* data)
        {
            Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
        }
        
        public static 
        void CompressedTexImage2D(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, object data)
        {
            System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, (void*)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void CompressedTexImage1D(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, void* data)
        {
            Delegates.glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
        }
        
        public static 
        void CompressedTexImage1D(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, object data)
        {
            System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, (void*)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void CompressedTexSubImage3D(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL.Enums.PixelFormat format, GLsizei imageSize, void* data)
        {
            Delegates.glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }
        
        public static 
        void CompressedTexSubImage3D(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL.Enums.PixelFormat format, GLsizei imageSize, object data)
        {
            System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, (void*)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void CompressedTexSubImage2D(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GLsizei imageSize, void* data)
        {
            Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }
        
        public static 
        void CompressedTexSubImage2D(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GLsizei imageSize, object data)
        {
            System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, (void*)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void CompressedTexSubImage1D(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, GL.Enums.PixelFormat format, GLsizei imageSize, void* data)
        {
            Delegates.glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
        }
        
        public static 
        void CompressedTexSubImage1D(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, GL.Enums.PixelFormat format, GLsizei imageSize, object data)
        {
            System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, (void*)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void GetCompressedTexImage(GL.Enums.TextureTarget target, GLint level, void* img)
        {
            Delegates.glGetCompressedTexImage(target, level, img);
        }
        
        public static 
        void GetCompressedTexImage(GL.Enums.TextureTarget target, GLint level, object img)
        {
            System.Runtime.InteropServices.GCHandle img_ptr = System.Runtime.InteropServices.GCHandle.Alloc(img, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glGetCompressedTexImage(target, level, (void*)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }
        }
        
        public static 
        void BlendFuncSeparate(GL.Enums.VERSION_1_4 sfactorRGB, GL.Enums.VERSION_1_4 dfactorRGB, GL.Enums.VERSION_1_4 sfactorAlpha, GL.Enums.VERSION_1_4 dfactorAlpha)
        {
            Delegates.glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        
        public static 
        void FogCoordf(GLfloat coord)
        {
            Delegates.glFogCoordf(coord);
        }
        
        public static 
        unsafe void FogCoordfv(GLfloat* coord)
        {
            Delegates.glFogCoordfv(coord);
        }
        
        public static 
        void FogCoordfv(GLfloat[] coord)
        {
            unsafe
            {
                fixed (GLfloat* coord_ptr = coord)
                {
                    Delegates.glFogCoordfv(coord_ptr);
                }
            }
        }
        
        public static 
        void FogCoordfv(ref GLfloat coord)
        {
            unsafe
            {
                fixed (GLfloat* coord_ptr = &coord)
                {
                    Delegates.glFogCoordfv(coord_ptr);
                }
            }
        }
        
        public static 
        void FogCoordd(GLdouble coord)
        {
            Delegates.glFogCoordd(coord);
        }
        
        public static 
        unsafe void FogCoorddv(GLdouble* coord)
        {
            Delegates.glFogCoorddv(coord);
        }
        
        public static 
        void FogCoorddv(GLdouble[] coord)
        {
            unsafe
            {
                fixed (GLdouble* coord_ptr = coord)
                {
                    Delegates.glFogCoorddv(coord_ptr);
                }
            }
        }
        
        public static 
        void FogCoorddv(ref GLdouble coord)
        {
            unsafe
            {
                fixed (GLdouble* coord_ptr = &coord)
                {
                    Delegates.glFogCoorddv(coord_ptr);
                }
            }
        }
        
        public static 
        unsafe void FogCoordPointer(GL.Enums.VERSION_1_4 type, GLsizei stride, void* pointer)
        {
            Delegates.glFogCoordPointer(type, stride, pointer);
        }
        
        public static 
        void FogCoordPointer(GL.Enums.VERSION_1_4 type, GLsizei stride, object pointer)
        {
            System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glFogCoordPointer(type, stride, (void*)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void MultiDrawArrays(GL.Enums.BeginMode mode, GLint* first, GLsizei* count, GLsizei primcount)
        {
            Delegates.glMultiDrawArrays(mode, first, count, primcount);
        }
        
        public static 
        unsafe void MultiDrawArrays(GL.Enums.BeginMode mode, GLint* first, GLsizei[] count, GLsizei primcount)
        {
            first = default(GLint*);
                fixed (GLsizei* count_ptr = count)
                {
                    Delegates.glMultiDrawArrays(mode, first, count_ptr, primcount);
                }
        }
        
        public static 
        unsafe void MultiDrawArrays(GL.Enums.BeginMode mode, GLint* first, out GLsizei count, GLsizei primcount)
        {
            first = default(GLint*);
            count = default(GLsizei);
                fixed (GLsizei* count_ptr = &count)
                {
                    Delegates.glMultiDrawArrays(mode, first, count_ptr, primcount);
                    count = *count_ptr;
                }
        }
        
        public static 
        unsafe void MultiDrawArrays(GL.Enums.BeginMode mode, GLint[] first, GLsizei* count, GLsizei primcount)
        {
            count = default(GLsizei*);
                fixed (GLint* first_ptr = first)
                {
                    Delegates.glMultiDrawArrays(mode, first_ptr, count, primcount);
                }
        }
        
        public static 
        void MultiDrawArrays(GL.Enums.BeginMode mode, GLint[] first, GLsizei[] count, GLsizei primcount)
        {
            unsafe
            {
                fixed (GLint* first_ptr = first)
                fixed (GLsizei* count_ptr = count)
                {
                    Delegates.glMultiDrawArrays(mode, first_ptr, count_ptr, primcount);
                }
            }
        }
        
        public static 
        void MultiDrawArrays(GL.Enums.BeginMode mode, GLint[] first, out GLsizei count, GLsizei primcount)
        {
            count = default(GLsizei);
            unsafe
            {
                fixed (GLint* first_ptr = first)
                fixed (GLsizei* count_ptr = &count)
                {
                    Delegates.glMultiDrawArrays(mode, first_ptr, count_ptr, primcount);
                    count = *count_ptr;
                }
            }
        }
        
        public static 
        unsafe void MultiDrawArrays(GL.Enums.BeginMode mode, out GLint first, GLsizei* count, GLsizei primcount)
        {
            first = default(GLint);
            count = default(GLsizei*);
                fixed (GLint* first_ptr = &first)
                {
                    Delegates.glMultiDrawArrays(mode, first_ptr, count, primcount);
                    first = *first_ptr;
                }
        }
        
        public static 
        void MultiDrawArrays(GL.Enums.BeginMode mode, out GLint first, GLsizei[] count, GLsizei primcount)
        {
            first = default(GLint);
            unsafe
            {
                fixed (GLint* first_ptr = &first)
                fixed (GLsizei* count_ptr = count)
                {
                    Delegates.glMultiDrawArrays(mode, first_ptr, count_ptr, primcount);
                    first = *first_ptr;
                }
            }
        }
        
        public static 
        void MultiDrawArrays(GL.Enums.BeginMode mode, out GLint first, out GLsizei count, GLsizei primcount)
        {
            first = default(GLint);
            count = default(GLsizei);
            unsafe
            {
                fixed (GLint* first_ptr = &first)
                fixed (GLsizei* count_ptr = &count)
                {
                    Delegates.glMultiDrawArrays(mode, first_ptr, count_ptr, primcount);
                    first = *first_ptr;
                    count = *count_ptr;
                }
            }
        }
        
        public static 
        unsafe void MultiDrawElements(GL.Enums.BeginMode mode, GLsizei* count, GL.Enums.VERSION_1_4 type, void* indices, GLsizei primcount)
        {
            Delegates.glMultiDrawElements(mode, count, type, indices, primcount);
        }
        
        public static 
        unsafe void MultiDrawElements(GL.Enums.BeginMode mode, GLsizei* count, GL.Enums.VERSION_1_4 type, object indices, GLsizei primcount)
        {
            System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiDrawElements(mode, count, type, (void*)indices_ptr.AddrOfPinnedObject(), primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
        }
        
        public static 
        unsafe void MultiDrawElements(GL.Enums.BeginMode mode, GLsizei[] count, GL.Enums.VERSION_1_4 type, void* indices, GLsizei primcount)
        {
                fixed (GLsizei* count_ptr = count)
                {
                    Delegates.glMultiDrawElements(mode, count_ptr, type, indices, primcount);
                }
        }
        
        public static 
        void MultiDrawElements(GL.Enums.BeginMode mode, GLsizei[] count, GL.Enums.VERSION_1_4 type, object indices, GLsizei primcount)
        {
            System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                fixed (GLsizei* count_ptr = count)
                try
                {
                    Delegates.glMultiDrawElements(mode, count_ptr, type, (void*)indices_ptr.AddrOfPinnedObject(), primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void MultiDrawElements(GL.Enums.BeginMode mode, ref GLsizei count, GL.Enums.VERSION_1_4 type, void* indices, GLsizei primcount)
        {
                fixed (GLsizei* count_ptr = &count)
                {
                    Delegates.glMultiDrawElements(mode, count_ptr, type, indices, primcount);
                }
        }
        
        public static 
        void MultiDrawElements(GL.Enums.BeginMode mode, ref GLsizei count, GL.Enums.VERSION_1_4 type, object indices, GLsizei primcount)
        {
            System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                fixed (GLsizei* count_ptr = &count)
                try
                {
                    Delegates.glMultiDrawElements(mode, count_ptr, type, (void*)indices_ptr.AddrOfPinnedObject(), primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
        }
        
        public static 
        void PointParameterf(GL.Enums.VERSION_1_4 pname, GLfloat param)
        {
            Delegates.glPointParameterf(pname, param);
        }
        
        public static 
        unsafe void PointParameterfv(GL.Enums.VERSION_1_4 pname, GLfloat* @params)
        {
            Delegates.glPointParameterfv(pname, @params);
        }
        
        public static 
        void PointParameterfv(GL.Enums.VERSION_1_4 pname, GLfloat[] @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = @params)
                {
                    Delegates.glPointParameterfv(pname, @params_ptr);
                }
            }
        }
        
        public static 
        void PointParameterfv(GL.Enums.VERSION_1_4 pname, ref GLfloat @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = &@params)
                {
                    Delegates.glPointParameterfv(pname, @params_ptr);
                }
            }
        }
        
        public static 
        void PointParameteri(GL.Enums.VERSION_1_4 pname, GLint param)
        {
            Delegates.glPointParameteri(pname, param);
        }
        
        public static 
        unsafe void PointParameteriv(GL.Enums.VERSION_1_4 pname, GLint* @params)
        {
            Delegates.glPointParameteriv(pname, @params);
        }
        
        public static 
        void PointParameteriv(GL.Enums.VERSION_1_4 pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glPointParameteriv(pname, @params_ptr);
                }
            }
        }
        
        public static 
        void PointParameteriv(GL.Enums.VERSION_1_4 pname, ref GLint @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glPointParameteriv(pname, @params_ptr);
                }
            }
        }
        
        public static 
        void SecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)
        {
            Delegates.glSecondaryColor3b(red, green, blue);
        }
        
        public static 
        unsafe void SecondaryColor3bv(GLbyte* v)
        {
            Delegates.glSecondaryColor3bv(v);
        }
        
        public static 
        void SecondaryColor3bv(GLbyte[] v)
        {
            unsafe
            {
                fixed (GLbyte* v_ptr = v)
                {
                    Delegates.glSecondaryColor3bv(v_ptr);
                }
            }
        }
        
        public static 
        void SecondaryColor3bv(ref GLbyte v)
        {
            unsafe
            {
                fixed (GLbyte* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3bv(v_ptr);
                }
            }
        }
        
        public static 
        void SecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)
        {
            Delegates.glSecondaryColor3d(red, green, blue);
        }
        
        public static 
        unsafe void SecondaryColor3dv(GLdouble* v)
        {
            Delegates.glSecondaryColor3dv(v);
        }
        
        public static 
        void SecondaryColor3dv(GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glSecondaryColor3dv(v_ptr);
                }
            }
        }
        
        public static 
        void SecondaryColor3dv(ref GLdouble v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3dv(v_ptr);
                }
            }
        }
        
        public static 
        void SecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)
        {
            Delegates.glSecondaryColor3f(red, green, blue);
        }
        
        public static 
        unsafe void SecondaryColor3fv(GLfloat* v)
        {
            Delegates.glSecondaryColor3fv(v);
        }
        
        public static 
        void SecondaryColor3fv(GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glSecondaryColor3fv(v_ptr);
                }
            }
        }
        
        public static 
        void SecondaryColor3fv(ref GLfloat v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3fv(v_ptr);
                }
            }
        }
        
        public static 
        void SecondaryColor3i(GLint red, GLint green, GLint blue)
        {
            Delegates.glSecondaryColor3i(red, green, blue);
        }
        
        public static 
        unsafe void SecondaryColor3iv(GLint* v)
        {
            Delegates.glSecondaryColor3iv(v);
        }
        
        public static 
        void SecondaryColor3iv(GLint[] v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = v)
                {
                    Delegates.glSecondaryColor3iv(v_ptr);
                }
            }
        }
        
        public static 
        void SecondaryColor3iv(ref GLint v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3iv(v_ptr);
                }
            }
        }
        
        public static 
        void SecondaryColor3s(GLshort red, GLshort green, GLshort blue)
        {
            Delegates.glSecondaryColor3s(red, green, blue);
        }
        
        public static 
        unsafe void SecondaryColor3sv(GLshort* v)
        {
            Delegates.glSecondaryColor3sv(v);
        }
        
        public static 
        void SecondaryColor3sv(GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glSecondaryColor3sv(v_ptr);
                }
            }
        }
        
        public static 
        void SecondaryColor3sv(ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3sv(v_ptr);
                }
            }
        }
        
        public static 
        void SecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)
        {
            Delegates.glSecondaryColor3ub(red, green, blue);
        }
        
        public static 
        unsafe void SecondaryColor3ubv(GLubyte* v)
        {
            Delegates.glSecondaryColor3ubv(v);
        }
        
        public static 
        void SecondaryColor3ubv(GLubyte[] v)
        {
            unsafe
            {
                fixed (GLubyte* v_ptr = v)
                {
                    Delegates.glSecondaryColor3ubv(v_ptr);
                }
            }
        }
        
        public static 
        void SecondaryColor3ubv(ref GLubyte v)
        {
            unsafe
            {
                fixed (GLubyte* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3ubv(v_ptr);
                }
            }
        }
        
        public static 
        void SecondaryColor3ui(GLuint red, GLuint green, GLuint blue)
        {
            Delegates.glSecondaryColor3ui(red, green, blue);
        }
        
        public static 
        unsafe void SecondaryColor3uiv(GLuint* v)
        {
            Delegates.glSecondaryColor3uiv(v);
        }
        
        public static 
        void SecondaryColor3uiv(GLuint[] v)
        {
            unsafe
            {
                fixed (GLuint* v_ptr = v)
                {
                    Delegates.glSecondaryColor3uiv(v_ptr);
                }
            }
        }
        
        public static 
        void SecondaryColor3uiv(ref GLuint v)
        {
            unsafe
            {
                fixed (GLuint* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3uiv(v_ptr);
                }
            }
        }
        
        public static 
        void SecondaryColor3us(GLushort red, GLushort green, GLushort blue)
        {
            Delegates.glSecondaryColor3us(red, green, blue);
        }
        
        public static 
        unsafe void SecondaryColor3usv(GLushort* v)
        {
            Delegates.glSecondaryColor3usv(v);
        }
        
        public static 
        void SecondaryColor3usv(GLushort[] v)
        {
            unsafe
            {
                fixed (GLushort* v_ptr = v)
                {
                    Delegates.glSecondaryColor3usv(v_ptr);
                }
            }
        }
        
        public static 
        void SecondaryColor3usv(ref GLushort v)
        {
            unsafe
            {
                fixed (GLushort* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3usv(v_ptr);
                }
            }
        }
        
        public static 
        unsafe void SecondaryColorPointer(GLint size, GL.Enums.ColorPointerType type, GLsizei stride, void* pointer)
        {
            Delegates.glSecondaryColorPointer(size, type, stride, pointer);
        }
        
        public static 
        void SecondaryColorPointer(GLint size, GL.Enums.ColorPointerType type, GLsizei stride, object pointer)
        {
            System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glSecondaryColorPointer(size, type, stride, (void*)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }
        
        public static 
        void WindowPos2d(GLdouble x, GLdouble y)
        {
            Delegates.glWindowPos2d(x, y);
        }
        
        public static 
        unsafe void WindowPos2dv(GLdouble* v)
        {
            Delegates.glWindowPos2dv(v);
        }
        
        public static 
        void WindowPos2dv(GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glWindowPos2dv(v_ptr);
                }
            }
        }
        
        public static 
        void WindowPos2dv(ref GLdouble v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glWindowPos2dv(v_ptr);
                }
            }
        }
        
        public static 
        void WindowPos2f(GLfloat x, GLfloat y)
        {
            Delegates.glWindowPos2f(x, y);
        }
        
        public static 
        unsafe void WindowPos2fv(GLfloat* v)
        {
            Delegates.glWindowPos2fv(v);
        }
        
        public static 
        void WindowPos2fv(GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glWindowPos2fv(v_ptr);
                }
            }
        }
        
        public static 
        void WindowPos2fv(ref GLfloat v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glWindowPos2fv(v_ptr);
                }
            }
        }
        
        public static 
        void WindowPos2i(GLint x, GLint y)
        {
            Delegates.glWindowPos2i(x, y);
        }
        
        public static 
        unsafe void WindowPos2iv(GLint* v)
        {
            Delegates.glWindowPos2iv(v);
        }
        
        public static 
        void WindowPos2iv(GLint[] v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = v)
                {
                    Delegates.glWindowPos2iv(v_ptr);
                }
            }
        }
        
        public static 
        void WindowPos2iv(ref GLint v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = &v)
                {
                    Delegates.glWindowPos2iv(v_ptr);
                }
            }
        }
        
        public static 
        void WindowPos2s(GLshort x, GLshort y)
        {
            Delegates.glWindowPos2s(x, y);
        }
        
        public static 
        unsafe void WindowPos2sv(GLshort* v)
        {
            Delegates.glWindowPos2sv(v);
        }
        
        public static 
        void WindowPos2sv(GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glWindowPos2sv(v_ptr);
                }
            }
        }
        
        public static 
        void WindowPos2sv(ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glWindowPos2sv(v_ptr);
                }
            }
        }
        
        public static 
        void WindowPos3d(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glWindowPos3d(x, y, z);
        }
        
        public static 
        unsafe void WindowPos3dv(GLdouble* v)
        {
            Delegates.glWindowPos3dv(v);
        }
        
        public static 
        void WindowPos3dv(GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glWindowPos3dv(v_ptr);
                }
            }
        }
        
        public static 
        void WindowPos3dv(ref GLdouble v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glWindowPos3dv(v_ptr);
                }
            }
        }
        
        public static 
        void WindowPos3f(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glWindowPos3f(x, y, z);
        }
        
        public static 
        unsafe void WindowPos3fv(GLfloat* v)
        {
            Delegates.glWindowPos3fv(v);
        }
        
        public static 
        void WindowPos3fv(GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glWindowPos3fv(v_ptr);
                }
            }
        }
        
        public static 
        void WindowPos3fv(ref GLfloat v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glWindowPos3fv(v_ptr);
                }
            }
        }
        
        public static 
        void WindowPos3i(GLint x, GLint y, GLint z)
        {
            Delegates.glWindowPos3i(x, y, z);
        }
        
        public static 
        unsafe void WindowPos3iv(GLint* v)
        {
            Delegates.glWindowPos3iv(v);
        }
        
        public static 
        void WindowPos3iv(GLint[] v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = v)
                {
                    Delegates.glWindowPos3iv(v_ptr);
                }
            }
        }
        
        public static 
        void WindowPos3iv(ref GLint v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = &v)
                {
                    Delegates.glWindowPos3iv(v_ptr);
                }
            }
        }
        
        public static 
        void WindowPos3s(GLshort x, GLshort y, GLshort z)
        {
            Delegates.glWindowPos3s(x, y, z);
        }
        
        public static 
        unsafe void WindowPos3sv(GLshort* v)
        {
            Delegates.glWindowPos3sv(v);
        }
        
        public static 
        void WindowPos3sv(GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glWindowPos3sv(v_ptr);
                }
            }
        }
        
        public static 
        void WindowPos3sv(ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glWindowPos3sv(v_ptr);
                }
            }
        }
        
        public static 
        unsafe void GenQueries(GLsizei n, GLuint* ids)
        {
            Delegates.glGenQueries(n, ids);
        }
        
        public static 
        void GenQueries(GLsizei n, GLuint[] ids)
        {
            unsafe
            {
                fixed (GLuint* ids_ptr = ids)
                {
                    Delegates.glGenQueries(n, ids_ptr);
                }
            }
        }
        
        public static 
        void GenQueries(GLsizei n, out GLuint ids)
        {
            ids = default(GLuint);
            unsafe
            {
                fixed (GLuint* ids_ptr = &ids)
                {
                    Delegates.glGenQueries(n, ids_ptr);
                    ids = *ids_ptr;
                }
            }
        }
        
        public static 
        unsafe void DeleteQueries(GLsizei n, GLuint* ids)
        {
            Delegates.glDeleteQueries(n, ids);
        }
        
        public static 
        void DeleteQueries(GLsizei n, GLuint[] ids)
        {
            unsafe
            {
                fixed (GLuint* ids_ptr = ids)
                {
                    Delegates.glDeleteQueries(n, ids_ptr);
                }
            }
        }
        
        public static 
        void DeleteQueries(GLsizei n, ref GLuint ids)
        {
            unsafe
            {
                fixed (GLuint* ids_ptr = &ids)
                {
                    Delegates.glDeleteQueries(n, ids_ptr);
                }
            }
        }
        
        public static 
        GLboolean IsQuery(GLuint id)
        {
            return Delegates.glIsQuery(id);
        }
        
        public static 
        void BeginQuery(GL.Enums.VERSION_1_5 target, GLuint id)
        {
            Delegates.glBeginQuery(target, id);
        }
        
        public static 
        void EndQuery(GL.Enums.VERSION_1_5 target)
        {
            Delegates.glEndQuery(target);
        }
        
        public static 
        unsafe void GetQueryiv(GL.Enums.VERSION_1_5 target, GL.Enums.VERSION_1_5 pname, GLint* @params)
        {
            Delegates.glGetQueryiv(target, pname, @params);
        }
        
        public static 
        void GetQueryiv(GL.Enums.VERSION_1_5 target, GL.Enums.VERSION_1_5 pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glGetQueryiv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetQueryiv(GL.Enums.VERSION_1_5 target, GL.Enums.VERSION_1_5 pname, out GLint @params)
        {
            @params = default(GLint);
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glGetQueryiv(target, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetQueryObjectiv(GLuint id, GL.Enums.VERSION_1_5 pname, GLint* @params)
        {
            Delegates.glGetQueryObjectiv(id, pname, @params);
        }
        
        public static 
        void GetQueryObjectiv(GLuint id, GL.Enums.VERSION_1_5 pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glGetQueryObjectiv(id, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetQueryObjectiv(GLuint id, GL.Enums.VERSION_1_5 pname, out GLint @params)
        {
            @params = default(GLint);
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glGetQueryObjectiv(id, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetQueryObjectuiv(GLuint id, GL.Enums.VERSION_1_5 pname, GLuint* @params)
        {
            Delegates.glGetQueryObjectuiv(id, pname, @params);
        }
        
        public static 
        void GetQueryObjectuiv(GLuint id, GL.Enums.VERSION_1_5 pname, GLuint[] @params)
        {
            unsafe
            {
                fixed (GLuint* @params_ptr = @params)
                {
                    Delegates.glGetQueryObjectuiv(id, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetQueryObjectuiv(GLuint id, GL.Enums.VERSION_1_5 pname, out GLuint @params)
        {
            @params = default(GLuint);
            unsafe
            {
                fixed (GLuint* @params_ptr = &@params)
                {
                    Delegates.glGetQueryObjectuiv(id, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        void BindBuffer(GL.Enums.VERSION_1_5 target, GLuint buffer)
        {
            Delegates.glBindBuffer(target, buffer);
        }
        
        public static 
        unsafe void DeleteBuffers(GLsizei n, GLuint* buffers)
        {
            Delegates.glDeleteBuffers(n, buffers);
        }
        
        public static 
        void DeleteBuffers(GLsizei n, GLuint[] buffers)
        {
            unsafe
            {
                fixed (GLuint* buffers_ptr = buffers)
                {
                    Delegates.glDeleteBuffers(n, buffers_ptr);
                }
            }
        }
        
        public static 
        void DeleteBuffers(GLsizei n, ref GLuint buffers)
        {
            unsafe
            {
                fixed (GLuint* buffers_ptr = &buffers)
                {
                    Delegates.glDeleteBuffers(n, buffers_ptr);
                }
            }
        }
        
        public static 
        unsafe void GenBuffers(GLsizei n, GLuint* buffers)
        {
            Delegates.glGenBuffers(n, buffers);
        }
        
        public static 
        void GenBuffers(GLsizei n, GLuint[] buffers)
        {
            unsafe
            {
                fixed (GLuint* buffers_ptr = buffers)
                {
                    Delegates.glGenBuffers(n, buffers_ptr);
                }
            }
        }
        
        public static 
        void GenBuffers(GLsizei n, out GLuint buffers)
        {
            buffers = default(GLuint);
            unsafe
            {
                fixed (GLuint* buffers_ptr = &buffers)
                {
                    Delegates.glGenBuffers(n, buffers_ptr);
                    buffers = *buffers_ptr;
                }
            }
        }
        
        public static 
        GLboolean IsBuffer(GLuint buffer)
        {
            return Delegates.glIsBuffer(buffer);
        }
        
        public static 
        unsafe void BufferData(GL.Enums.VERSION_1_5 target, GLsizeiptr size, void* data, GL.Enums.VERSION_1_5 usage)
        {
            Delegates.glBufferData(target, size, data, usage);
        }
        
        public static 
        void BufferData(GL.Enums.VERSION_1_5 target, GLsizeiptr size, object data, GL.Enums.VERSION_1_5 usage)
        {
            System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glBufferData(target, size, (void*)data_ptr.AddrOfPinnedObject(), usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void BufferSubData(GL.Enums.VERSION_1_5 target, GLintptr offset, GLsizeiptr size, void* data)
        {
            Delegates.glBufferSubData(target, offset, size, data);
        }
        
        public static 
        void BufferSubData(GL.Enums.VERSION_1_5 target, GLintptr offset, GLsizeiptr size, object data)
        {
            System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glBufferSubData(target, offset, size, (void*)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void GetBufferSubData(GL.Enums.VERSION_1_5 target, GLintptr offset, GLsizeiptr size, void* data)
        {
            Delegates.glGetBufferSubData(target, offset, size, data);
        }
        
        public static 
        void GetBufferSubData(GL.Enums.VERSION_1_5 target, GLintptr offset, GLsizeiptr size, object data)
        {
            System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glGetBufferSubData(target, offset, size, (void*)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
        }
        
        public static 
        void MapBuffer(GL.Enums.VERSION_1_5 target, GL.Enums.VERSION_1_5 access)
        {
            Delegates.glMapBuffer(target, access);
        }
        
        public static 
        GLboolean UnmapBuffer(GL.Enums.VERSION_1_5 target)
        {
            return Delegates.glUnmapBuffer(target);
        }
        
        public static 
        unsafe void GetBufferParameteriv(GL.Enums.VERSION_1_5 target, GL.Enums.VERSION_1_5 pname, GLint* @params)
        {
            Delegates.glGetBufferParameteriv(target, pname, @params);
        }
        
        public static 
        void GetBufferParameteriv(GL.Enums.VERSION_1_5 target, GL.Enums.VERSION_1_5 pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glGetBufferParameteriv(target, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetBufferParameteriv(GL.Enums.VERSION_1_5 target, GL.Enums.VERSION_1_5 pname, out GLint @params)
        {
            @params = default(GLint);
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glGetBufferParameteriv(target, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetBufferPointerv(GL.Enums.VERSION_1_5 target, GL.Enums.VERSION_1_5 pname, void* @params)
        {
            Delegates.glGetBufferPointerv(target, pname, @params);
        }
        
        public static 
        void GetBufferPointerv(GL.Enums.VERSION_1_5 target, GL.Enums.VERSION_1_5 pname, object @params)
        {
            System.Runtime.InteropServices.GCHandle @params_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@params, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glGetBufferPointerv(target, pname, (void*)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }
        }
        
        public static 
        void BlendEquationSeparate(GL.Enums.BlendEquationModeEXT modeRGB, GL.Enums.BlendEquationModeEXT modeAlpha)
        {
            Delegates.glBlendEquationSeparate(modeRGB, modeAlpha);
        }
        
        public static 
        unsafe void DrawBuffers(GLsizei n, GL.Enums.VERSION_2_0* bufs)
        {
            Delegates.glDrawBuffers(n, bufs);
        }
        
        public static 
        void DrawBuffers(GLsizei n, GL.Enums.VERSION_2_0[] bufs)
        {
            unsafe
            {
                fixed (GL.Enums.VERSION_2_0* bufs_ptr = bufs)
                {
                    Delegates.glDrawBuffers(n, bufs_ptr);
                }
            }
        }
        
        public static 
        void DrawBuffers(GLsizei n, ref GL.Enums.VERSION_2_0 bufs)
        {
            unsafe
            {
                fixed (GL.Enums.VERSION_2_0* bufs_ptr = &bufs)
                {
                    Delegates.glDrawBuffers(n, bufs_ptr);
                }
            }
        }
        
        public static 
        void StencilOpSeparate(GL.Enums.VERSION_2_0 face, GL.Enums.StencilOp sfail, GL.Enums.StencilOp dpfail, GL.Enums.StencilOp dppass)
        {
            Delegates.glStencilOpSeparate(face, sfail, dpfail, dppass);
        }
        
        public static 
        void StencilFuncSeparate(GL.Enums.StencilFunction frontfunc, GL.Enums.StencilFunction backfunc, GLint @ref, GLuint mask)
        {
            Delegates.glStencilFuncSeparate(frontfunc, backfunc, @ref, mask);
        }
        
        public static 
        void StencilMaskSeparate(GL.Enums.VERSION_2_0 face, GLuint mask)
        {
            Delegates.glStencilMaskSeparate(face, mask);
        }
        
        public static 
        void AttachShader(GLuint program, GLuint shader)
        {
            Delegates.glAttachShader(program, shader);
        }
        
        public static 
        unsafe void BindAttribLocation(GLuint program, GLuint index, System.String name)
        {
            Delegates.glBindAttribLocation(program, index, name);
        }
        
        public static 
        void CompileShader(GLuint shader)
        {
            Delegates.glCompileShader(shader);
        }
        
        public static 
        GLuint CreateProgram()
        {
            return Delegates.glCreateProgram();
        }
        
        public static 
        GLuint CreateShader(GL.Enums.VERSION_2_0 type)
        {
            return Delegates.glCreateShader(type);
        }
        
        public static 
        void DeleteProgram(GLuint program)
        {
            Delegates.glDeleteProgram(program);
        }
        
        public static 
        void DeleteShader(GLuint shader)
        {
            Delegates.glDeleteShader(shader);
        }
        
        public static 
        void DetachShader(GLuint program, GLuint shader)
        {
            Delegates.glDetachShader(program, shader);
        }
        
        public static 
        void DisableVertexAttribArray(GLuint index)
        {
            Delegates.glDisableVertexAttribArray(index);
        }
        
        public static 
        void EnableVertexAttribArray(GLuint index)
        {
            Delegates.glEnableVertexAttribArray(index);
        }
        
        public static 
        unsafe void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GL.Enums.VERSION_2_0* type, System.Text.StringBuilder name)
        {
            Delegates.glGetActiveAttrib(program, index, bufSize, length, size, type, name);
        }
        
        public static 
        unsafe void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GL.Enums.VERSION_2_0[] type, System.Text.StringBuilder name)
        {
            length = default(GLsizei*);
            size = default(GLint*);
            name = default(System.Text.StringBuilder);
                fixed (GL.Enums.VERSION_2_0* type_ptr = type)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length, size, type_ptr, name);
                }
        }
        
        public static 
        unsafe void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, out GL.Enums.VERSION_2_0 type, System.Text.StringBuilder name)
        {
            length = default(GLsizei*);
            size = default(GLint*);
            type = default(GL.Enums.VERSION_2_0);
            name = default(System.Text.StringBuilder);
                fixed (GL.Enums.VERSION_2_0* type_ptr = &type)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length, size, type_ptr, name);
                    type = *type_ptr;
                }
        }
        
        public static 
        unsafe void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint[] size, GL.Enums.VERSION_2_0* type, System.Text.StringBuilder name)
        {
            length = default(GLsizei*);
            type = default(GL.Enums.VERSION_2_0*);
            name = default(System.Text.StringBuilder);
                fixed (GLint* size_ptr = size)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length, size_ptr, type, name);
                }
        }
        
        public static 
        unsafe void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint[] size, GL.Enums.VERSION_2_0[] type, System.Text.StringBuilder name)
        {
            length = default(GLsizei*);
            name = default(System.Text.StringBuilder);
                fixed (GLint* size_ptr = size)
                fixed (GL.Enums.VERSION_2_0* type_ptr = type)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length, size_ptr, type_ptr, name);
                }
        }
        
        public static 
        unsafe void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint[] size, out GL.Enums.VERSION_2_0 type, System.Text.StringBuilder name)
        {
            length = default(GLsizei*);
            type = default(GL.Enums.VERSION_2_0);
            name = default(System.Text.StringBuilder);
                fixed (GLint* size_ptr = size)
                fixed (GL.Enums.VERSION_2_0* type_ptr = &type)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length, size_ptr, type_ptr, name);
                    type = *type_ptr;
                }
        }
        
        public static 
        unsafe void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, out GLint size, GL.Enums.VERSION_2_0* type, System.Text.StringBuilder name)
        {
            length = default(GLsizei*);
            size = default(GLint);
            type = default(GL.Enums.VERSION_2_0*);
            name = default(System.Text.StringBuilder);
                fixed (GLint* size_ptr = &size)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length, size_ptr, type, name);
                    size = *size_ptr;
                }
        }
        
        public static 
        unsafe void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, out GLint size, GL.Enums.VERSION_2_0[] type, System.Text.StringBuilder name)
        {
            length = default(GLsizei*);
            size = default(GLint);
            name = default(System.Text.StringBuilder);
                fixed (GLint* size_ptr = &size)
                fixed (GL.Enums.VERSION_2_0* type_ptr = type)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length, size_ptr, type_ptr, name);
                    size = *size_ptr;
                }
        }
        
        public static 
        unsafe void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, out GLint size, out GL.Enums.VERSION_2_0 type, System.Text.StringBuilder name)
        {
            length = default(GLsizei*);
            size = default(GLint);
            type = default(GL.Enums.VERSION_2_0);
            name = default(System.Text.StringBuilder);
                fixed (GLint* size_ptr = &size)
                fixed (GL.Enums.VERSION_2_0* type_ptr = &type)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length, size_ptr, type_ptr, name);
                    size = *size_ptr;
                    type = *type_ptr;
                }
        }
        
        public static 
        unsafe void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint* size, GL.Enums.VERSION_2_0* type, System.Text.StringBuilder name)
        {
            size = default(GLint*);
            type = default(GL.Enums.VERSION_2_0*);
            name = default(System.Text.StringBuilder);
                fixed (GLsizei* length_ptr = length)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length_ptr, size, type, name);
                }
        }
        
        public static 
        unsafe void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint* size, GL.Enums.VERSION_2_0[] type, System.Text.StringBuilder name)
        {
            size = default(GLint*);
            name = default(System.Text.StringBuilder);
                fixed (GLsizei* length_ptr = length)
                fixed (GL.Enums.VERSION_2_0* type_ptr = type)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length_ptr, size, type_ptr, name);
                }
        }
        
        public static 
        unsafe void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint* size, out GL.Enums.VERSION_2_0 type, System.Text.StringBuilder name)
        {
            size = default(GLint*);
            type = default(GL.Enums.VERSION_2_0);
            name = default(System.Text.StringBuilder);
                fixed (GLsizei* length_ptr = length)
                fixed (GL.Enums.VERSION_2_0* type_ptr = &type)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length_ptr, size, type_ptr, name);
                    type = *type_ptr;
                }
        }
        
        public static 
        unsafe void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, GL.Enums.VERSION_2_0* type, System.Text.StringBuilder name)
        {
            type = default(GL.Enums.VERSION_2_0*);
            name = default(System.Text.StringBuilder);
                fixed (GLsizei* length_ptr = length)
                fixed (GLint* size_ptr = size)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type, name);
                }
        }
        
        public static 
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, GL.Enums.VERSION_2_0[] type, System.Text.StringBuilder name)
        {
            name = default(System.Text.StringBuilder);
            unsafe
            {
                fixed (GLsizei* length_ptr = length)
                fixed (GLint* size_ptr = size)
                fixed (GL.Enums.VERSION_2_0* type_ptr = type)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type_ptr, name);
                }
            }
        }
        
        public static 
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, out GL.Enums.VERSION_2_0 type, System.Text.StringBuilder name)
        {
            type = default(GL.Enums.VERSION_2_0);
            name = default(System.Text.StringBuilder);
            unsafe
            {
                fixed (GLsizei* length_ptr = length)
                fixed (GLint* size_ptr = size)
                fixed (GL.Enums.VERSION_2_0* type_ptr = &type)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type_ptr, name);
                    type = *type_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, out GLint size, GL.Enums.VERSION_2_0* type, System.Text.StringBuilder name)
        {
            size = default(GLint);
            type = default(GL.Enums.VERSION_2_0*);
            name = default(System.Text.StringBuilder);
                fixed (GLsizei* length_ptr = length)
                fixed (GLint* size_ptr = &size)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type, name);
                    size = *size_ptr;
                }
        }
        
        public static 
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, out GLint size, GL.Enums.VERSION_2_0[] type, System.Text.StringBuilder name)
        {
            size = default(GLint);
            name = default(System.Text.StringBuilder);
            unsafe
            {
                fixed (GLsizei* length_ptr = length)
                fixed (GLint* size_ptr = &size)
                fixed (GL.Enums.VERSION_2_0* type_ptr = type)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type_ptr, name);
                    size = *size_ptr;
                }
            }
        }
        
        public static 
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, out GLint size, out GL.Enums.VERSION_2_0 type, System.Text.StringBuilder name)
        {
            size = default(GLint);
            type = default(GL.Enums.VERSION_2_0);
            name = default(System.Text.StringBuilder);
            unsafe
            {
                fixed (GLsizei* length_ptr = length)
                fixed (GLint* size_ptr = &size)
                fixed (GL.Enums.VERSION_2_0* type_ptr = &type)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type_ptr, name);
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLint* size, GL.Enums.VERSION_2_0* type, System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            size = default(GLint*);
            type = default(GL.Enums.VERSION_2_0*);
            name = default(System.Text.StringBuilder);
                fixed (GLsizei* length_ptr = &length)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length_ptr, size, type, name);
                    length = *length_ptr;
                }
        }
        
        public static 
        unsafe void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLint* size, GL.Enums.VERSION_2_0[] type, System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            size = default(GLint*);
            name = default(System.Text.StringBuilder);
                fixed (GLsizei* length_ptr = &length)
                fixed (GL.Enums.VERSION_2_0* type_ptr = type)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length_ptr, size, type_ptr, name);
                    length = *length_ptr;
                }
        }
        
        public static 
        unsafe void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLint* size, out GL.Enums.VERSION_2_0 type, System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            size = default(GLint*);
            type = default(GL.Enums.VERSION_2_0);
            name = default(System.Text.StringBuilder);
                fixed (GLsizei* length_ptr = &length)
                fixed (GL.Enums.VERSION_2_0* type_ptr = &type)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length_ptr, size, type_ptr, name);
                    length = *length_ptr;
                    type = *type_ptr;
                }
        }
        
        public static 
        unsafe void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLint[] size, GL.Enums.VERSION_2_0* type, System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            type = default(GL.Enums.VERSION_2_0*);
            name = default(System.Text.StringBuilder);
                fixed (GLsizei* length_ptr = &length)
                fixed (GLint* size_ptr = size)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type, name);
                    length = *length_ptr;
                }
        }
        
        public static 
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLint[] size, GL.Enums.VERSION_2_0[] type, System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            name = default(System.Text.StringBuilder);
            unsafe
            {
                fixed (GLsizei* length_ptr = &length)
                fixed (GLint* size_ptr = size)
                fixed (GL.Enums.VERSION_2_0* type_ptr = type)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type_ptr, name);
                    length = *length_ptr;
                }
            }
        }
        
        public static 
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLint[] size, out GL.Enums.VERSION_2_0 type, System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            type = default(GL.Enums.VERSION_2_0);
            name = default(System.Text.StringBuilder);
            unsafe
            {
                fixed (GLsizei* length_ptr = &length)
                fixed (GLint* size_ptr = size)
                fixed (GL.Enums.VERSION_2_0* type_ptr = &type)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type_ptr, name);
                    length = *length_ptr;
                    type = *type_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, out GLint size, GL.Enums.VERSION_2_0* type, System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            size = default(GLint);
            type = default(GL.Enums.VERSION_2_0*);
            name = default(System.Text.StringBuilder);
                fixed (GLsizei* length_ptr = &length)
                fixed (GLint* size_ptr = &size)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type, name);
                    length = *length_ptr;
                    size = *size_ptr;
                }
        }
        
        public static 
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, out GLint size, GL.Enums.VERSION_2_0[] type, System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            size = default(GLint);
            name = default(System.Text.StringBuilder);
            unsafe
            {
                fixed (GLsizei* length_ptr = &length)
                fixed (GLint* size_ptr = &size)
                fixed (GL.Enums.VERSION_2_0* type_ptr = type)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type_ptr, name);
                    length = *length_ptr;
                    size = *size_ptr;
                }
            }
        }
        
        public static 
        void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, out GLint size, out GL.Enums.VERSION_2_0 type, System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            size = default(GLint);
            type = default(GL.Enums.VERSION_2_0);
            name = default(System.Text.StringBuilder);
            unsafe
            {
                fixed (GLsizei* length_ptr = &length)
                fixed (GLint* size_ptr = &size)
                fixed (GL.Enums.VERSION_2_0* type_ptr = &type)
                {
                    Delegates.glGetActiveAttrib(program, index, bufSize, length_ptr, size_ptr, type_ptr, name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GL.Enums.VERSION_2_0* type, System.Text.StringBuilder name)
        {
            Delegates.glGetActiveUniform(program, index, bufSize, length, size, type, name);
        }
        
        public static 
        unsafe void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GL.Enums.VERSION_2_0[] type, System.Text.StringBuilder name)
        {
            length = default(GLsizei*);
            size = default(GLint*);
            name = default(System.Text.StringBuilder);
                fixed (GL.Enums.VERSION_2_0* type_ptr = type)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length, size, type_ptr, name);
                }
        }
        
        public static 
        unsafe void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, out GL.Enums.VERSION_2_0 type, System.Text.StringBuilder name)
        {
            length = default(GLsizei*);
            size = default(GLint*);
            type = default(GL.Enums.VERSION_2_0);
            name = default(System.Text.StringBuilder);
                fixed (GL.Enums.VERSION_2_0* type_ptr = &type)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length, size, type_ptr, name);
                    type = *type_ptr;
                }
        }
        
        public static 
        unsafe void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint[] size, GL.Enums.VERSION_2_0* type, System.Text.StringBuilder name)
        {
            length = default(GLsizei*);
            type = default(GL.Enums.VERSION_2_0*);
            name = default(System.Text.StringBuilder);
                fixed (GLint* size_ptr = size)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length, size_ptr, type, name);
                }
        }
        
        public static 
        unsafe void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint[] size, GL.Enums.VERSION_2_0[] type, System.Text.StringBuilder name)
        {
            length = default(GLsizei*);
            name = default(System.Text.StringBuilder);
                fixed (GLint* size_ptr = size)
                fixed (GL.Enums.VERSION_2_0* type_ptr = type)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length, size_ptr, type_ptr, name);
                }
        }
        
        public static 
        unsafe void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint[] size, out GL.Enums.VERSION_2_0 type, System.Text.StringBuilder name)
        {
            length = default(GLsizei*);
            type = default(GL.Enums.VERSION_2_0);
            name = default(System.Text.StringBuilder);
                fixed (GLint* size_ptr = size)
                fixed (GL.Enums.VERSION_2_0* type_ptr = &type)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length, size_ptr, type_ptr, name);
                    type = *type_ptr;
                }
        }
        
        public static 
        unsafe void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, out GLint size, GL.Enums.VERSION_2_0* type, System.Text.StringBuilder name)
        {
            length = default(GLsizei*);
            size = default(GLint);
            type = default(GL.Enums.VERSION_2_0*);
            name = default(System.Text.StringBuilder);
                fixed (GLint* size_ptr = &size)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length, size_ptr, type, name);
                    size = *size_ptr;
                }
        }
        
        public static 
        unsafe void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, out GLint size, GL.Enums.VERSION_2_0[] type, System.Text.StringBuilder name)
        {
            length = default(GLsizei*);
            size = default(GLint);
            name = default(System.Text.StringBuilder);
                fixed (GLint* size_ptr = &size)
                fixed (GL.Enums.VERSION_2_0* type_ptr = type)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length, size_ptr, type_ptr, name);
                    size = *size_ptr;
                }
        }
        
        public static 
        unsafe void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, out GLint size, out GL.Enums.VERSION_2_0 type, System.Text.StringBuilder name)
        {
            length = default(GLsizei*);
            size = default(GLint);
            type = default(GL.Enums.VERSION_2_0);
            name = default(System.Text.StringBuilder);
                fixed (GLint* size_ptr = &size)
                fixed (GL.Enums.VERSION_2_0* type_ptr = &type)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length, size_ptr, type_ptr, name);
                    size = *size_ptr;
                    type = *type_ptr;
                }
        }
        
        public static 
        unsafe void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint* size, GL.Enums.VERSION_2_0* type, System.Text.StringBuilder name)
        {
            size = default(GLint*);
            type = default(GL.Enums.VERSION_2_0*);
            name = default(System.Text.StringBuilder);
                fixed (GLsizei* length_ptr = length)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length_ptr, size, type, name);
                }
        }
        
        public static 
        unsafe void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint* size, GL.Enums.VERSION_2_0[] type, System.Text.StringBuilder name)
        {
            size = default(GLint*);
            name = default(System.Text.StringBuilder);
                fixed (GLsizei* length_ptr = length)
                fixed (GL.Enums.VERSION_2_0* type_ptr = type)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length_ptr, size, type_ptr, name);
                }
        }
        
        public static 
        unsafe void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint* size, out GL.Enums.VERSION_2_0 type, System.Text.StringBuilder name)
        {
            size = default(GLint*);
            type = default(GL.Enums.VERSION_2_0);
            name = default(System.Text.StringBuilder);
                fixed (GLsizei* length_ptr = length)
                fixed (GL.Enums.VERSION_2_0* type_ptr = &type)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length_ptr, size, type_ptr, name);
                    type = *type_ptr;
                }
        }
        
        public static 
        unsafe void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, GL.Enums.VERSION_2_0* type, System.Text.StringBuilder name)
        {
            type = default(GL.Enums.VERSION_2_0*);
            name = default(System.Text.StringBuilder);
                fixed (GLsizei* length_ptr = length)
                fixed (GLint* size_ptr = size)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type, name);
                }
        }
        
        public static 
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, GL.Enums.VERSION_2_0[] type, System.Text.StringBuilder name)
        {
            name = default(System.Text.StringBuilder);
            unsafe
            {
                fixed (GLsizei* length_ptr = length)
                fixed (GLint* size_ptr = size)
                fixed (GL.Enums.VERSION_2_0* type_ptr = type)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type_ptr, name);
                }
            }
        }
        
        public static 
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, out GL.Enums.VERSION_2_0 type, System.Text.StringBuilder name)
        {
            type = default(GL.Enums.VERSION_2_0);
            name = default(System.Text.StringBuilder);
            unsafe
            {
                fixed (GLsizei* length_ptr = length)
                fixed (GLint* size_ptr = size)
                fixed (GL.Enums.VERSION_2_0* type_ptr = &type)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type_ptr, name);
                    type = *type_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, out GLint size, GL.Enums.VERSION_2_0* type, System.Text.StringBuilder name)
        {
            size = default(GLint);
            type = default(GL.Enums.VERSION_2_0*);
            name = default(System.Text.StringBuilder);
                fixed (GLsizei* length_ptr = length)
                fixed (GLint* size_ptr = &size)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type, name);
                    size = *size_ptr;
                }
        }
        
        public static 
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, out GLint size, GL.Enums.VERSION_2_0[] type, System.Text.StringBuilder name)
        {
            size = default(GLint);
            name = default(System.Text.StringBuilder);
            unsafe
            {
                fixed (GLsizei* length_ptr = length)
                fixed (GLint* size_ptr = &size)
                fixed (GL.Enums.VERSION_2_0* type_ptr = type)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type_ptr, name);
                    size = *size_ptr;
                }
            }
        }
        
        public static 
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, out GLint size, out GL.Enums.VERSION_2_0 type, System.Text.StringBuilder name)
        {
            size = default(GLint);
            type = default(GL.Enums.VERSION_2_0);
            name = default(System.Text.StringBuilder);
            unsafe
            {
                fixed (GLsizei* length_ptr = length)
                fixed (GLint* size_ptr = &size)
                fixed (GL.Enums.VERSION_2_0* type_ptr = &type)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type_ptr, name);
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLint* size, GL.Enums.VERSION_2_0* type, System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            size = default(GLint*);
            type = default(GL.Enums.VERSION_2_0*);
            name = default(System.Text.StringBuilder);
                fixed (GLsizei* length_ptr = &length)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length_ptr, size, type, name);
                    length = *length_ptr;
                }
        }
        
        public static 
        unsafe void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLint* size, GL.Enums.VERSION_2_0[] type, System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            size = default(GLint*);
            name = default(System.Text.StringBuilder);
                fixed (GLsizei* length_ptr = &length)
                fixed (GL.Enums.VERSION_2_0* type_ptr = type)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length_ptr, size, type_ptr, name);
                    length = *length_ptr;
                }
        }
        
        public static 
        unsafe void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLint* size, out GL.Enums.VERSION_2_0 type, System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            size = default(GLint*);
            type = default(GL.Enums.VERSION_2_0);
            name = default(System.Text.StringBuilder);
                fixed (GLsizei* length_ptr = &length)
                fixed (GL.Enums.VERSION_2_0* type_ptr = &type)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length_ptr, size, type_ptr, name);
                    length = *length_ptr;
                    type = *type_ptr;
                }
        }
        
        public static 
        unsafe void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLint[] size, GL.Enums.VERSION_2_0* type, System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            type = default(GL.Enums.VERSION_2_0*);
            name = default(System.Text.StringBuilder);
                fixed (GLsizei* length_ptr = &length)
                fixed (GLint* size_ptr = size)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type, name);
                    length = *length_ptr;
                }
        }
        
        public static 
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLint[] size, GL.Enums.VERSION_2_0[] type, System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            name = default(System.Text.StringBuilder);
            unsafe
            {
                fixed (GLsizei* length_ptr = &length)
                fixed (GLint* size_ptr = size)
                fixed (GL.Enums.VERSION_2_0* type_ptr = type)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type_ptr, name);
                    length = *length_ptr;
                }
            }
        }
        
        public static 
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLint[] size, out GL.Enums.VERSION_2_0 type, System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            type = default(GL.Enums.VERSION_2_0);
            name = default(System.Text.StringBuilder);
            unsafe
            {
                fixed (GLsizei* length_ptr = &length)
                fixed (GLint* size_ptr = size)
                fixed (GL.Enums.VERSION_2_0* type_ptr = &type)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type_ptr, name);
                    length = *length_ptr;
                    type = *type_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, out GLint size, GL.Enums.VERSION_2_0* type, System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            size = default(GLint);
            type = default(GL.Enums.VERSION_2_0*);
            name = default(System.Text.StringBuilder);
                fixed (GLsizei* length_ptr = &length)
                fixed (GLint* size_ptr = &size)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type, name);
                    length = *length_ptr;
                    size = *size_ptr;
                }
        }
        
        public static 
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, out GLint size, GL.Enums.VERSION_2_0[] type, System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            size = default(GLint);
            name = default(System.Text.StringBuilder);
            unsafe
            {
                fixed (GLsizei* length_ptr = &length)
                fixed (GLint* size_ptr = &size)
                fixed (GL.Enums.VERSION_2_0* type_ptr = type)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type_ptr, name);
                    length = *length_ptr;
                    size = *size_ptr;
                }
            }
        }
        
        public static 
        void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, out GLint size, out GL.Enums.VERSION_2_0 type, System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            size = default(GLint);
            type = default(GL.Enums.VERSION_2_0);
            name = default(System.Text.StringBuilder);
            unsafe
            {
                fixed (GLsizei* length_ptr = &length)
                fixed (GLint* size_ptr = &size)
                fixed (GL.Enums.VERSION_2_0* type_ptr = &type)
                {
                    Delegates.glGetActiveUniform(program, index, bufSize, length_ptr, size_ptr, type_ptr, name);
                    length = *length_ptr;
                    size = *size_ptr;
                    type = *type_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei* count, GLuint* obj)
        {
            Delegates.glGetAttachedShaders(program, maxCount, count, obj);
        }
        
        public static 
        unsafe void GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei* count, GLuint[] obj)
        {
            count = default(GLsizei*);
                fixed (GLuint* obj_ptr = obj)
                {
                    Delegates.glGetAttachedShaders(program, maxCount, count, obj_ptr);
                }
        }
        
        public static 
        unsafe void GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei* count, out GLuint obj)
        {
            count = default(GLsizei*);
            obj = default(GLuint);
                fixed (GLuint* obj_ptr = &obj)
                {
                    Delegates.glGetAttachedShaders(program, maxCount, count, obj_ptr);
                    obj = *obj_ptr;
                }
        }
        
        public static 
        unsafe void GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, GLuint* obj)
        {
            obj = default(GLuint*);
                fixed (GLsizei* count_ptr = count)
                {
                    Delegates.glGetAttachedShaders(program, maxCount, count_ptr, obj);
                }
        }
        
        public static 
        void GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, GLuint[] obj)
        {
            unsafe
            {
                fixed (GLsizei* count_ptr = count)
                fixed (GLuint* obj_ptr = obj)
                {
                    Delegates.glGetAttachedShaders(program, maxCount, count_ptr, obj_ptr);
                }
            }
        }
        
        public static 
        void GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, out GLuint obj)
        {
            obj = default(GLuint);
            unsafe
            {
                fixed (GLsizei* count_ptr = count)
                fixed (GLuint* obj_ptr = &obj)
                {
                    Delegates.glGetAttachedShaders(program, maxCount, count_ptr, obj_ptr);
                    obj = *obj_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetAttachedShaders(GLuint program, GLsizei maxCount, out GLsizei count, GLuint* obj)
        {
            count = default(GLsizei);
            obj = default(GLuint*);
                fixed (GLsizei* count_ptr = &count)
                {
                    Delegates.glGetAttachedShaders(program, maxCount, count_ptr, obj);
                    count = *count_ptr;
                }
        }
        
        public static 
        void GetAttachedShaders(GLuint program, GLsizei maxCount, out GLsizei count, GLuint[] obj)
        {
            count = default(GLsizei);
            unsafe
            {
                fixed (GLsizei* count_ptr = &count)
                fixed (GLuint* obj_ptr = obj)
                {
                    Delegates.glGetAttachedShaders(program, maxCount, count_ptr, obj_ptr);
                    count = *count_ptr;
                }
            }
        }
        
        public static 
        void GetAttachedShaders(GLuint program, GLsizei maxCount, out GLsizei count, out GLuint obj)
        {
            count = default(GLsizei);
            obj = default(GLuint);
            unsafe
            {
                fixed (GLsizei* count_ptr = &count)
                fixed (GLuint* obj_ptr = &obj)
                {
                    Delegates.glGetAttachedShaders(program, maxCount, count_ptr, obj_ptr);
                    count = *count_ptr;
                    obj = *obj_ptr;
                }
            }
        }
        
        public static 
        unsafe GLint GetAttribLocation(GLuint program, System.String name)
        {
            return Delegates.glGetAttribLocation(program, name);
        }
        
        public static 
        unsafe void GetProgramiv(GLuint program, GL.Enums.VERSION_2_0 pname, GLint* @params)
        {
            Delegates.glGetProgramiv(program, pname, @params);
        }
        
        public static 
        void GetProgramiv(GLuint program, GL.Enums.VERSION_2_0 pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glGetProgramiv(program, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetProgramiv(GLuint program, GL.Enums.VERSION_2_0 pname, out GLint @params)
        {
            @params = default(GLint);
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glGetProgramiv(program, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei* length, System.Text.StringBuilder infoLog)
        {
            Delegates.glGetProgramInfoLog(program, bufSize, length, infoLog);
        }
        
        public static 
        void GetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei[] length, System.Text.StringBuilder infoLog)
        {
            infoLog = default(System.Text.StringBuilder);
            unsafe
            {
                fixed (GLsizei* length_ptr = length)
                {
                    Delegates.glGetProgramInfoLog(program, bufSize, length_ptr, infoLog);
                }
            }
        }
        
        public static 
        void GetProgramInfoLog(GLuint program, GLsizei bufSize, out GLsizei length, System.Text.StringBuilder infoLog)
        {
            length = default(GLsizei);
            infoLog = default(System.Text.StringBuilder);
            unsafe
            {
                fixed (GLsizei* length_ptr = &length)
                {
                    Delegates.glGetProgramInfoLog(program, bufSize, length_ptr, infoLog);
                    length = *length_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetShaderiv(GLuint shader, GL.Enums.VERSION_2_0 pname, GLint* @params)
        {
            Delegates.glGetShaderiv(shader, pname, @params);
        }
        
        public static 
        void GetShaderiv(GLuint shader, GL.Enums.VERSION_2_0 pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glGetShaderiv(shader, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetShaderiv(GLuint shader, GL.Enums.VERSION_2_0 pname, out GLint @params)
        {
            @params = default(GLint);
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glGetShaderiv(shader, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei* length, System.Text.StringBuilder infoLog)
        {
            Delegates.glGetShaderInfoLog(shader, bufSize, length, infoLog);
        }
        
        public static 
        void GetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei[] length, System.Text.StringBuilder infoLog)
        {
            infoLog = default(System.Text.StringBuilder);
            unsafe
            {
                fixed (GLsizei* length_ptr = length)
                {
                    Delegates.glGetShaderInfoLog(shader, bufSize, length_ptr, infoLog);
                }
            }
        }
        
        public static 
        void GetShaderInfoLog(GLuint shader, GLsizei bufSize, out GLsizei length, System.Text.StringBuilder infoLog)
        {
            length = default(GLsizei);
            infoLog = default(System.Text.StringBuilder);
            unsafe
            {
                fixed (GLsizei* length_ptr = &length)
                {
                    Delegates.glGetShaderInfoLog(shader, bufSize, length_ptr, infoLog);
                    length = *length_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetShaderSource(GLuint shader, GLsizei bufSize, GLsizei* length, System.Text.StringBuilder[] source)
        {
            Delegates.glGetShaderSource(shader, bufSize, length, source);
        }
        
        public static 
        void GetShaderSource(GLuint shader, GLsizei bufSize, GLsizei[] length, System.Text.StringBuilder[] source)
        {
            source = default(System.Text.StringBuilder[]);
            unsafe
            {
                fixed (GLsizei* length_ptr = length)
                {
                    Delegates.glGetShaderSource(shader, bufSize, length_ptr, source);
                }
            }
        }
        
        public static 
        void GetShaderSource(GLuint shader, GLsizei bufSize, out GLsizei length, System.Text.StringBuilder[] source)
        {
            length = default(GLsizei);
            source = default(System.Text.StringBuilder[]);
            unsafe
            {
                fixed (GLsizei* length_ptr = &length)
                {
                    Delegates.glGetShaderSource(shader, bufSize, length_ptr, source);
                    length = *length_ptr;
                }
            }
        }
        
        public static 
        unsafe GLint GetUniformLocation(GLuint program, System.String name)
        {
            return Delegates.glGetUniformLocation(program, name);
        }
        
        public static 
        unsafe void GetUniformfv(GLuint program, GLint location, GLfloat* @params)
        {
            Delegates.glGetUniformfv(program, location, @params);
        }
        
        public static 
        void GetUniformfv(GLuint program, GLint location, GLfloat[] @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = @params)
                {
                    Delegates.glGetUniformfv(program, location, @params_ptr);
                }
            }
        }
        
        public static 
        void GetUniformfv(GLuint program, GLint location, out GLfloat @params)
        {
            @params = default(GLfloat);
            unsafe
            {
                fixed (GLfloat* @params_ptr = &@params)
                {
                    Delegates.glGetUniformfv(program, location, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetUniformiv(GLuint program, GLint location, GLint* @params)
        {
            Delegates.glGetUniformiv(program, location, @params);
        }
        
        public static 
        void GetUniformiv(GLuint program, GLint location, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glGetUniformiv(program, location, @params_ptr);
                }
            }
        }
        
        public static 
        void GetUniformiv(GLuint program, GLint location, out GLint @params)
        {
            @params = default(GLint);
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glGetUniformiv(program, location, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetVertexAttribdv(GLuint index, GL.Enums.VERSION_2_0 pname, GLdouble* @params)
        {
            Delegates.glGetVertexAttribdv(index, pname, @params);
        }
        
        public static 
        void GetVertexAttribdv(GLuint index, GL.Enums.VERSION_2_0 pname, GLdouble[] @params)
        {
            unsafe
            {
                fixed (GLdouble* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribdv(index, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetVertexAttribdv(GLuint index, GL.Enums.VERSION_2_0 pname, out GLdouble @params)
        {
            @params = default(GLdouble);
            unsafe
            {
                fixed (GLdouble* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribdv(index, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetVertexAttribfv(GLuint index, GL.Enums.VERSION_2_0 pname, GLfloat* @params)
        {
            Delegates.glGetVertexAttribfv(index, pname, @params);
        }
        
        public static 
        void GetVertexAttribfv(GLuint index, GL.Enums.VERSION_2_0 pname, GLfloat[] @params)
        {
            unsafe
            {
                fixed (GLfloat* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribfv(index, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetVertexAttribfv(GLuint index, GL.Enums.VERSION_2_0 pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            unsafe
            {
                fixed (GLfloat* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribfv(index, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetVertexAttribiv(GLuint index, GL.Enums.VERSION_2_0 pname, GLint* @params)
        {
            Delegates.glGetVertexAttribiv(index, pname, @params);
        }
        
        public static 
        void GetVertexAttribiv(GLuint index, GL.Enums.VERSION_2_0 pname, GLint[] @params)
        {
            unsafe
            {
                fixed (GLint* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribiv(index, pname, @params_ptr);
                }
            }
        }
        
        public static 
        void GetVertexAttribiv(GLuint index, GL.Enums.VERSION_2_0 pname, out GLint @params)
        {
            @params = default(GLint);
            unsafe
            {
                fixed (GLint* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribiv(index, pname, @params_ptr);
                    @params = *@params_ptr;
                }
            }
        }
        
        public static 
        unsafe void GetVertexAttribPointerv(GLuint index, GL.Enums.VERSION_2_0 pname, void* pointer)
        {
            Delegates.glGetVertexAttribPointerv(index, pname, pointer);
        }
        
        public static 
        void GetVertexAttribPointerv(GLuint index, GL.Enums.VERSION_2_0 pname, object pointer)
        {
            System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glGetVertexAttribPointerv(index, pname, (void*)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }
        
        public static 
        GLboolean IsProgram(GLuint program)
        {
            return Delegates.glIsProgram(program);
        }
        
        public static 
        GLboolean IsShader(GLuint shader)
        {
            return Delegates.glIsShader(shader);
        }
        
        public static 
        void LinkProgram(GLuint program)
        {
            Delegates.glLinkProgram(program);
        }
        
        public static 
        unsafe void ShaderSource(GLuint shader, GLsizei count, System.String[] @string, GLint* length)
        {
            Delegates.glShaderSource(shader, count, @string, length);
        }
        
        public static 
        void ShaderSource(GLuint shader, GLsizei count, System.String[] @string, GLint[] length)
        {
            unsafe
            {
                fixed (GLint* length_ptr = length)
                {
                    Delegates.glShaderSource(shader, count, @string, length_ptr);
                }
            }
        }
        
        public static 
        void ShaderSource(GLuint shader, GLsizei count, System.String[] @string, ref GLint length)
        {
            unsafe
            {
                fixed (GLint* length_ptr = &length)
                {
                    Delegates.glShaderSource(shader, count, @string, length_ptr);
                }
            }
        }
        
        public static 
        void UseProgram(GLuint program)
        {
            Delegates.glUseProgram(program);
        }
        
        public static 
        void Uniform1f(GLint location, GLfloat v0)
        {
            Delegates.glUniform1f(location, v0);
        }
        
        public static 
        void Uniform2f(GLint location, GLfloat v0, GLfloat v1)
        {
            Delegates.glUniform2f(location, v0, v1);
        }
        
        public static 
        void Uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
        {
            Delegates.glUniform3f(location, v0, v1, v2);
        }
        
        public static 
        void Uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
        {
            Delegates.glUniform4f(location, v0, v1, v2, v3);
        }
        
        public static 
        void Uniform1i(GLint location, GLint v0)
        {
            Delegates.glUniform1i(location, v0);
        }
        
        public static 
        void Uniform2i(GLint location, GLint v0, GLint v1)
        {
            Delegates.glUniform2i(location, v0, v1);
        }
        
        public static 
        void Uniform3i(GLint location, GLint v0, GLint v1, GLint v2)
        {
            Delegates.glUniform3i(location, v0, v1, v2);
        }
        
        public static 
        void Uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
        {
            Delegates.glUniform4i(location, v0, v1, v2, v3);
        }
        
        public static 
        unsafe void Uniform1fv(GLint location, GLsizei count, GLfloat* value)
        {
            Delegates.glUniform1fv(location, count, value);
        }
        
        public static 
        void Uniform1fv(GLint location, GLsizei count, GLfloat[] value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = value)
                {
                    Delegates.glUniform1fv(location, count, value_ptr);
                }
            }
        }
        
        public static 
        void Uniform1fv(GLint location, GLsizei count, ref GLfloat value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = &value)
                {
                    Delegates.glUniform1fv(location, count, value_ptr);
                }
            }
        }
        
        public static 
        unsafe void Uniform2fv(GLint location, GLsizei count, GLfloat* value)
        {
            Delegates.glUniform2fv(location, count, value);
        }
        
        public static 
        void Uniform2fv(GLint location, GLsizei count, GLfloat[] value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = value)
                {
                    Delegates.glUniform2fv(location, count, value_ptr);
                }
            }
        }
        
        public static 
        void Uniform2fv(GLint location, GLsizei count, ref GLfloat value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = &value)
                {
                    Delegates.glUniform2fv(location, count, value_ptr);
                }
            }
        }
        
        public static 
        unsafe void Uniform3fv(GLint location, GLsizei count, GLfloat* value)
        {
            Delegates.glUniform3fv(location, count, value);
        }
        
        public static 
        void Uniform3fv(GLint location, GLsizei count, GLfloat[] value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = value)
                {
                    Delegates.glUniform3fv(location, count, value_ptr);
                }
            }
        }
        
        public static 
        void Uniform3fv(GLint location, GLsizei count, ref GLfloat value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = &value)
                {
                    Delegates.glUniform3fv(location, count, value_ptr);
                }
            }
        }
        
        public static 
        unsafe void Uniform4fv(GLint location, GLsizei count, GLfloat* value)
        {
            Delegates.glUniform4fv(location, count, value);
        }
        
        public static 
        void Uniform4fv(GLint location, GLsizei count, GLfloat[] value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = value)
                {
                    Delegates.glUniform4fv(location, count, value_ptr);
                }
            }
        }
        
        public static 
        void Uniform4fv(GLint location, GLsizei count, ref GLfloat value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = &value)
                {
                    Delegates.glUniform4fv(location, count, value_ptr);
                }
            }
        }
        
        public static 
        unsafe void Uniform1iv(GLint location, GLsizei count, GLint* value)
        {
            Delegates.glUniform1iv(location, count, value);
        }
        
        public static 
        void Uniform1iv(GLint location, GLsizei count, GLint[] value)
        {
            unsafe
            {
                fixed (GLint* value_ptr = value)
                {
                    Delegates.glUniform1iv(location, count, value_ptr);
                }
            }
        }
        
        public static 
        void Uniform1iv(GLint location, GLsizei count, ref GLint value)
        {
            unsafe
            {
                fixed (GLint* value_ptr = &value)
                {
                    Delegates.glUniform1iv(location, count, value_ptr);
                }
            }
        }
        
        public static 
        unsafe void Uniform2iv(GLint location, GLsizei count, GLint* value)
        {
            Delegates.glUniform2iv(location, count, value);
        }
        
        public static 
        void Uniform2iv(GLint location, GLsizei count, GLint[] value)
        {
            unsafe
            {
                fixed (GLint* value_ptr = value)
                {
                    Delegates.glUniform2iv(location, count, value_ptr);
                }
            }
        }
        
        public static 
        void Uniform2iv(GLint location, GLsizei count, ref GLint value)
        {
            unsafe
            {
                fixed (GLint* value_ptr = &value)
                {
                    Delegates.glUniform2iv(location, count, value_ptr);
                }
            }
        }
        
        public static 
        unsafe void Uniform3iv(GLint location, GLsizei count, GLint* value)
        {
            Delegates.glUniform3iv(location, count, value);
        }
        
        public static 
        void Uniform3iv(GLint location, GLsizei count, GLint[] value)
        {
            unsafe
            {
                fixed (GLint* value_ptr = value)
                {
                    Delegates.glUniform3iv(location, count, value_ptr);
                }
            }
        }
        
        public static 
        void Uniform3iv(GLint location, GLsizei count, ref GLint value)
        {
            unsafe
            {
                fixed (GLint* value_ptr = &value)
                {
                    Delegates.glUniform3iv(location, count, value_ptr);
                }
            }
        }
        
        public static 
        unsafe void Uniform4iv(GLint location, GLsizei count, GLint* value)
        {
            Delegates.glUniform4iv(location, count, value);
        }
        
        public static 
        void Uniform4iv(GLint location, GLsizei count, GLint[] value)
        {
            unsafe
            {
                fixed (GLint* value_ptr = value)
                {
                    Delegates.glUniform4iv(location, count, value_ptr);
                }
            }
        }
        
        public static 
        void Uniform4iv(GLint location, GLsizei count, ref GLint value)
        {
            unsafe
            {
                fixed (GLint* value_ptr = &value)
                {
                    Delegates.glUniform4iv(location, count, value_ptr);
                }
            }
        }
        
        public static 
        unsafe void UniformMatrix2fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat* value)
        {
            Delegates.glUniformMatrix2fv(location, count, transpose, value);
        }
        
        public static 
        void UniformMatrix2fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat[] value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = value)
                {
                    Delegates.glUniformMatrix2fv(location, count, transpose, value_ptr);
                }
            }
        }
        
        public static 
        void UniformMatrix2fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, ref GLfloat value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = &value)
                {
                    Delegates.glUniformMatrix2fv(location, count, transpose, value_ptr);
                }
            }
        }
        
        public static 
        unsafe void UniformMatrix3fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat* value)
        {
            Delegates.glUniformMatrix3fv(location, count, transpose, value);
        }
        
        public static 
        void UniformMatrix3fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat[] value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = value)
                {
                    Delegates.glUniformMatrix3fv(location, count, transpose, value_ptr);
                }
            }
        }
        
        public static 
        void UniformMatrix3fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, ref GLfloat value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = &value)
                {
                    Delegates.glUniformMatrix3fv(location, count, transpose, value_ptr);
                }
            }
        }
        
        public static 
        unsafe void UniformMatrix4fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat* value)
        {
            Delegates.glUniformMatrix4fv(location, count, transpose, value);
        }
        
        public static 
        void UniformMatrix4fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat[] value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = value)
                {
                    Delegates.glUniformMatrix4fv(location, count, transpose, value_ptr);
                }
            }
        }
        
        public static 
        void UniformMatrix4fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, ref GLfloat value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = &value)
                {
                    Delegates.glUniformMatrix4fv(location, count, transpose, value_ptr);
                }
            }
        }
        
        public static 
        void ValidateProgram(GLuint program)
        {
            Delegates.glValidateProgram(program);
        }
        
        public static 
        void VertexAttrib1d(GLuint index, GLdouble x)
        {
            Delegates.glVertexAttrib1d(index, x);
        }
        
        public static 
        unsafe void VertexAttrib1dv(GLuint index, GLdouble* v)
        {
            Delegates.glVertexAttrib1dv(index, v);
        }
        
        public static 
        void VertexAttrib1dv(GLuint index, GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glVertexAttrib1dv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib1dv(GLuint index, ref GLdouble v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glVertexAttrib1dv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib1f(GLuint index, GLfloat x)
        {
            Delegates.glVertexAttrib1f(index, x);
        }
        
        public static 
        unsafe void VertexAttrib1fv(GLuint index, GLfloat* v)
        {
            Delegates.glVertexAttrib1fv(index, v);
        }
        
        public static 
        void VertexAttrib1fv(GLuint index, GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glVertexAttrib1fv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib1fv(GLuint index, ref GLfloat v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glVertexAttrib1fv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib1s(GLuint index, GLshort x)
        {
            Delegates.glVertexAttrib1s(index, x);
        }
        
        public static 
        unsafe void VertexAttrib1sv(GLuint index, GLshort* v)
        {
            Delegates.glVertexAttrib1sv(index, v);
        }
        
        public static 
        void VertexAttrib1sv(GLuint index, GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glVertexAttrib1sv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib1sv(GLuint index, ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glVertexAttrib1sv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
        {
            Delegates.glVertexAttrib2d(index, x, y);
        }
        
        public static 
        unsafe void VertexAttrib2dv(GLuint index, GLdouble* v)
        {
            Delegates.glVertexAttrib2dv(index, v);
        }
        
        public static 
        void VertexAttrib2dv(GLuint index, GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glVertexAttrib2dv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib2dv(GLuint index, ref GLdouble v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glVertexAttrib2dv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
        {
            Delegates.glVertexAttrib2f(index, x, y);
        }
        
        public static 
        unsafe void VertexAttrib2fv(GLuint index, GLfloat* v)
        {
            Delegates.glVertexAttrib2fv(index, v);
        }
        
        public static 
        void VertexAttrib2fv(GLuint index, GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glVertexAttrib2fv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib2fv(GLuint index, ref GLfloat v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glVertexAttrib2fv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib2s(GLuint index, GLshort x, GLshort y)
        {
            Delegates.glVertexAttrib2s(index, x, y);
        }
        
        public static 
        unsafe void VertexAttrib2sv(GLuint index, GLshort* v)
        {
            Delegates.glVertexAttrib2sv(index, v);
        }
        
        public static 
        void VertexAttrib2sv(GLuint index, GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glVertexAttrib2sv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib2sv(GLuint index, ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glVertexAttrib2sv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glVertexAttrib3d(index, x, y, z);
        }
        
        public static 
        unsafe void VertexAttrib3dv(GLuint index, GLdouble* v)
        {
            Delegates.glVertexAttrib3dv(index, v);
        }
        
        public static 
        void VertexAttrib3dv(GLuint index, GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glVertexAttrib3dv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib3dv(GLuint index, ref GLdouble v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glVertexAttrib3dv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glVertexAttrib3f(index, x, y, z);
        }
        
        public static 
        unsafe void VertexAttrib3fv(GLuint index, GLfloat* v)
        {
            Delegates.glVertexAttrib3fv(index, v);
        }
        
        public static 
        void VertexAttrib3fv(GLuint index, GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glVertexAttrib3fv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib3fv(GLuint index, ref GLfloat v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glVertexAttrib3fv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
        {
            Delegates.glVertexAttrib3s(index, x, y, z);
        }
        
        public static 
        unsafe void VertexAttrib3sv(GLuint index, GLshort* v)
        {
            Delegates.glVertexAttrib3sv(index, v);
        }
        
        public static 
        void VertexAttrib3sv(GLuint index, GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glVertexAttrib3sv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib3sv(GLuint index, ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glVertexAttrib3sv(index, v_ptr);
                }
            }
        }
        
        public static 
        unsafe void VertexAttrib4Nbv(GLuint index, GLbyte* v)
        {
            Delegates.glVertexAttrib4Nbv(index, v);
        }
        
        public static 
        void VertexAttrib4Nbv(GLuint index, GLbyte[] v)
        {
            unsafe
            {
                fixed (GLbyte* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nbv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib4Nbv(GLuint index, ref GLbyte v)
        {
            unsafe
            {
                fixed (GLbyte* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nbv(index, v_ptr);
                }
            }
        }
        
        public static 
        unsafe void VertexAttrib4Niv(GLuint index, GLint* v)
        {
            Delegates.glVertexAttrib4Niv(index, v);
        }
        
        public static 
        void VertexAttrib4Niv(GLuint index, GLint[] v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Niv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib4Niv(GLuint index, ref GLint v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Niv(index, v_ptr);
                }
            }
        }
        
        public static 
        unsafe void VertexAttrib4Nsv(GLuint index, GLshort* v)
        {
            Delegates.glVertexAttrib4Nsv(index, v);
        }
        
        public static 
        void VertexAttrib4Nsv(GLuint index, GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nsv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib4Nsv(GLuint index, ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nsv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
        {
            Delegates.glVertexAttrib4Nub(index, x, y, z, w);
        }
        
        public static 
        unsafe void VertexAttrib4Nubv(GLuint index, GLubyte* v)
        {
            Delegates.glVertexAttrib4Nubv(index, v);
        }
        
        public static 
        void VertexAttrib4Nubv(GLuint index, GLubyte[] v)
        {
            unsafe
            {
                fixed (GLubyte* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nubv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib4Nubv(GLuint index, ref GLubyte v)
        {
            unsafe
            {
                fixed (GLubyte* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nubv(index, v_ptr);
                }
            }
        }
        
        public static 
        unsafe void VertexAttrib4Nuiv(GLuint index, GLuint* v)
        {
            Delegates.glVertexAttrib4Nuiv(index, v);
        }
        
        public static 
        void VertexAttrib4Nuiv(GLuint index, GLuint[] v)
        {
            unsafe
            {
                fixed (GLuint* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nuiv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib4Nuiv(GLuint index, ref GLuint v)
        {
            unsafe
            {
                fixed (GLuint* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nuiv(index, v_ptr);
                }
            }
        }
        
        public static 
        unsafe void VertexAttrib4Nusv(GLuint index, GLushort* v)
        {
            Delegates.glVertexAttrib4Nusv(index, v);
        }
        
        public static 
        void VertexAttrib4Nusv(GLuint index, GLushort[] v)
        {
            unsafe
            {
                fixed (GLushort* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nusv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib4Nusv(GLuint index, ref GLushort v)
        {
            unsafe
            {
                fixed (GLushort* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nusv(index, v_ptr);
                }
            }
        }
        
        public static 
        unsafe void VertexAttrib4bv(GLuint index, GLbyte* v)
        {
            Delegates.glVertexAttrib4bv(index, v);
        }
        
        public static 
        void VertexAttrib4bv(GLuint index, GLbyte[] v)
        {
            unsafe
            {
                fixed (GLbyte* v_ptr = v)
                {
                    Delegates.glVertexAttrib4bv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib4bv(GLuint index, ref GLbyte v)
        {
            unsafe
            {
                fixed (GLbyte* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4bv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glVertexAttrib4d(index, x, y, z, w);
        }
        
        public static 
        unsafe void VertexAttrib4dv(GLuint index, GLdouble* v)
        {
            Delegates.glVertexAttrib4dv(index, v);
        }
        
        public static 
        void VertexAttrib4dv(GLuint index, GLdouble[] v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = v)
                {
                    Delegates.glVertexAttrib4dv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib4dv(GLuint index, ref GLdouble v)
        {
            unsafe
            {
                fixed (GLdouble* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4dv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glVertexAttrib4f(index, x, y, z, w);
        }
        
        public static 
        unsafe void VertexAttrib4fv(GLuint index, GLfloat* v)
        {
            Delegates.glVertexAttrib4fv(index, v);
        }
        
        public static 
        void VertexAttrib4fv(GLuint index, GLfloat[] v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = v)
                {
                    Delegates.glVertexAttrib4fv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib4fv(GLuint index, ref GLfloat v)
        {
            unsafe
            {
                fixed (GLfloat* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4fv(index, v_ptr);
                }
            }
        }
        
        public static 
        unsafe void VertexAttrib4iv(GLuint index, GLint* v)
        {
            Delegates.glVertexAttrib4iv(index, v);
        }
        
        public static 
        void VertexAttrib4iv(GLuint index, GLint[] v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = v)
                {
                    Delegates.glVertexAttrib4iv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib4iv(GLuint index, ref GLint v)
        {
            unsafe
            {
                fixed (GLint* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4iv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
        {
            Delegates.glVertexAttrib4s(index, x, y, z, w);
        }
        
        public static 
        unsafe void VertexAttrib4sv(GLuint index, GLshort* v)
        {
            Delegates.glVertexAttrib4sv(index, v);
        }
        
        public static 
        void VertexAttrib4sv(GLuint index, GLshort[] v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = v)
                {
                    Delegates.glVertexAttrib4sv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib4sv(GLuint index, ref GLshort v)
        {
            unsafe
            {
                fixed (GLshort* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4sv(index, v_ptr);
                }
            }
        }
        
        public static 
        unsafe void VertexAttrib4ubv(GLuint index, GLubyte* v)
        {
            Delegates.glVertexAttrib4ubv(index, v);
        }
        
        public static 
        void VertexAttrib4ubv(GLuint index, GLubyte[] v)
        {
            unsafe
            {
                fixed (GLubyte* v_ptr = v)
                {
                    Delegates.glVertexAttrib4ubv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib4ubv(GLuint index, ref GLubyte v)
        {
            unsafe
            {
                fixed (GLubyte* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4ubv(index, v_ptr);
                }
            }
        }
        
        public static 
        unsafe void VertexAttrib4uiv(GLuint index, GLuint* v)
        {
            Delegates.glVertexAttrib4uiv(index, v);
        }
        
        public static 
        void VertexAttrib4uiv(GLuint index, GLuint[] v)
        {
            unsafe
            {
                fixed (GLuint* v_ptr = v)
                {
                    Delegates.glVertexAttrib4uiv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib4uiv(GLuint index, ref GLuint v)
        {
            unsafe
            {
                fixed (GLuint* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4uiv(index, v_ptr);
                }
            }
        }
        
        public static 
        unsafe void VertexAttrib4usv(GLuint index, GLushort* v)
        {
            Delegates.glVertexAttrib4usv(index, v);
        }
        
        public static 
        void VertexAttrib4usv(GLuint index, GLushort[] v)
        {
            unsafe
            {
                fixed (GLushort* v_ptr = v)
                {
                    Delegates.glVertexAttrib4usv(index, v_ptr);
                }
            }
        }
        
        public static 
        void VertexAttrib4usv(GLuint index, ref GLushort v)
        {
            unsafe
            {
                fixed (GLushort* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4usv(index, v_ptr);
                }
            }
        }
        
        public static 
        unsafe void VertexAttribPointer(GLuint index, GLint size, GL.Enums.VERSION_2_0 type, GL.Enums.Boolean normalized, GLsizei stride, void* pointer)
        {
            Delegates.glVertexAttribPointer(index, size, type, normalized, stride, pointer);
        }
        
        public static 
        void VertexAttribPointer(GLuint index, GLint size, GL.Enums.VERSION_2_0 type, GL.Enums.Boolean normalized, GLsizei stride, object pointer)
        {
            System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glVertexAttribPointer(index, size, type, normalized, stride, (void*)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void UniformMatrix2x3fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat* value)
        {
            Delegates.glUniformMatrix2x3fv(location, count, transpose, value);
        }
        
        public static 
        void UniformMatrix2x3fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat[] value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = value)
                {
                    Delegates.glUniformMatrix2x3fv(location, count, transpose, value_ptr);
                }
            }
        }
        
        public static 
        void UniformMatrix2x3fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, ref GLfloat value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = &value)
                {
                    Delegates.glUniformMatrix2x3fv(location, count, transpose, value_ptr);
                }
            }
        }
        
        public static 
        unsafe void UniformMatrix3x2fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat* value)
        {
            Delegates.glUniformMatrix3x2fv(location, count, transpose, value);
        }
        
        public static 
        void UniformMatrix3x2fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat[] value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = value)
                {
                    Delegates.glUniformMatrix3x2fv(location, count, transpose, value_ptr);
                }
            }
        }
        
        public static 
        void UniformMatrix3x2fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, ref GLfloat value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = &value)
                {
                    Delegates.glUniformMatrix3x2fv(location, count, transpose, value_ptr);
                }
            }
        }
        
        public static 
        unsafe void UniformMatrix2x4fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat* value)
        {
            Delegates.glUniformMatrix2x4fv(location, count, transpose, value);
        }
        
        public static 
        void UniformMatrix2x4fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat[] value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = value)
                {
                    Delegates.glUniformMatrix2x4fv(location, count, transpose, value_ptr);
                }
            }
        }
        
        public static 
        void UniformMatrix2x4fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, ref GLfloat value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = &value)
                {
                    Delegates.glUniformMatrix2x4fv(location, count, transpose, value_ptr);
                }
            }
        }
        
        public static 
        unsafe void UniformMatrix4x2fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat* value)
        {
            Delegates.glUniformMatrix4x2fv(location, count, transpose, value);
        }
        
        public static 
        void UniformMatrix4x2fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat[] value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = value)
                {
                    Delegates.glUniformMatrix4x2fv(location, count, transpose, value_ptr);
                }
            }
        }
        
        public static 
        void UniformMatrix4x2fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, ref GLfloat value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = &value)
                {
                    Delegates.glUniformMatrix4x2fv(location, count, transpose, value_ptr);
                }
            }
        }
        
        public static 
        unsafe void UniformMatrix3x4fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat* value)
        {
            Delegates.glUniformMatrix3x4fv(location, count, transpose, value);
        }
        
        public static 
        void UniformMatrix3x4fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat[] value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = value)
                {
                    Delegates.glUniformMatrix3x4fv(location, count, transpose, value_ptr);
                }
            }
        }
        
        public static 
        void UniformMatrix3x4fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, ref GLfloat value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = &value)
                {
                    Delegates.glUniformMatrix3x4fv(location, count, transpose, value_ptr);
                }
            }
        }
        
        public static 
        unsafe void UniformMatrix4x3fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat* value)
        {
            Delegates.glUniformMatrix4x3fv(location, count, transpose, value);
        }
        
        public static 
        void UniformMatrix4x3fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat[] value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = value)
                {
                    Delegates.glUniformMatrix4x3fv(location, count, transpose, value_ptr);
                }
            }
        }
        
        public static 
        void UniformMatrix4x3fv(GLint location, GLsizei count, GL.Enums.Boolean transpose, ref GLfloat value)
        {
            unsafe
            {
                fixed (GLfloat* value_ptr = &value)
                {
                    Delegates.glUniformMatrix4x3fv(location, count, transpose, value_ptr);
                }
            }
        }
        
        public static 
        unsafe void VertexPointervINTEL(GLint size, GL.Enums.VertexPointerType type, void* pointer)
        {
            Delegates.glVertexPointervINTEL(size, type, pointer);
        }
        
        public static 
        void VertexPointervINTEL(GLint size, GL.Enums.VertexPointerType type, object pointer)
        {
            System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glVertexPointervINTEL(size, type, (void*)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void NormalPointervINTEL(GL.Enums.NormalPointerType type, void* pointer)
        {
            Delegates.glNormalPointervINTEL(type, pointer);
        }
        
        public static 
        void NormalPointervINTEL(GL.Enums.NormalPointerType type, object pointer)
        {
            System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glNormalPointervINTEL(type, (void*)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void ColorPointervINTEL(GLint size, GL.Enums.VertexPointerType type, void* pointer)
        {
            Delegates.glColorPointervINTEL(size, type, pointer);
        }
        
        public static 
        void ColorPointervINTEL(GLint size, GL.Enums.VertexPointerType type, object pointer)
        {
            System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glColorPointervINTEL(size, type, (void*)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }
        
        public static 
        unsafe void TexCoordPointervINTEL(GLint size, GL.Enums.VertexPointerType type, void* pointer)
        {
            Delegates.glTexCoordPointervINTEL(size, type, pointer);
        }
        
        public static 
        void TexCoordPointervINTEL(GLint size, GL.Enums.VertexPointerType type, object pointer)
        {
            System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
            unsafe
            {
                try
                {
                    Delegates.glTexCoordPointervINTEL(size, type, (void*)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
        }
        
        public static 
        void TbufferMask3DFX(GLuint mask)
        {
            Delegates.glTbufferMask3DFX(mask);
        }
        
        public static class ARB
        {
            public static 
            void ActiveTextureARB(GL.Enums.ARB_multitexture texture)
            {
                Delegates.glActiveTextureARB(texture);
            }
            
            public static 
            void ClientActiveTextureARB(GL.Enums.ARB_multitexture texture)
            {
                Delegates.glClientActiveTextureARB(texture);
            }
            
            public static 
            void MultiTexCoord1dARB(GL.Enums.ARB_multitexture target, GLdouble s)
            {
                Delegates.glMultiTexCoord1dARB(target, s);
            }
            
            public static 
            unsafe void MultiTexCoord1dvARB(GL.Enums.ARB_multitexture target, GLdouble* v)
            {
                Delegates.glMultiTexCoord1dvARB(target, v);
            }
            
            public static 
            void MultiTexCoord1dvARB(GL.Enums.ARB_multitexture target, GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord1dvARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord1dvARB(GL.Enums.ARB_multitexture target, ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord1dvARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord1fARB(GL.Enums.ARB_multitexture target, GLfloat s)
            {
                Delegates.glMultiTexCoord1fARB(target, s);
            }
            
            public static 
            unsafe void MultiTexCoord1fvARB(GL.Enums.ARB_multitexture target, GLfloat* v)
            {
                Delegates.glMultiTexCoord1fvARB(target, v);
            }
            
            public static 
            void MultiTexCoord1fvARB(GL.Enums.ARB_multitexture target, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord1fvARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord1fvARB(GL.Enums.ARB_multitexture target, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord1fvARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord1iARB(GL.Enums.ARB_multitexture target, GLint s)
            {
                Delegates.glMultiTexCoord1iARB(target, s);
            }
            
            public static 
            unsafe void MultiTexCoord1ivARB(GL.Enums.ARB_multitexture target, GLint* v)
            {
                Delegates.glMultiTexCoord1ivARB(target, v);
            }
            
            public static 
            void MultiTexCoord1ivARB(GL.Enums.ARB_multitexture target, GLint[] v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord1ivARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord1ivARB(GL.Enums.ARB_multitexture target, ref GLint v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord1ivARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord1sARB(GL.Enums.ARB_multitexture target, GLshort s)
            {
                Delegates.glMultiTexCoord1sARB(target, s);
            }
            
            public static 
            unsafe void MultiTexCoord1svARB(GL.Enums.ARB_multitexture target, GLshort* v)
            {
                Delegates.glMultiTexCoord1svARB(target, v);
            }
            
            public static 
            void MultiTexCoord1svARB(GL.Enums.ARB_multitexture target, GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord1svARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord1svARB(GL.Enums.ARB_multitexture target, ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord1svARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord2dARB(GL.Enums.ARB_multitexture target, GLdouble s, GLdouble t)
            {
                Delegates.glMultiTexCoord2dARB(target, s, t);
            }
            
            public static 
            unsafe void MultiTexCoord2dvARB(GL.Enums.ARB_multitexture target, GLdouble* v)
            {
                Delegates.glMultiTexCoord2dvARB(target, v);
            }
            
            public static 
            void MultiTexCoord2dvARB(GL.Enums.ARB_multitexture target, GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2dvARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord2dvARB(GL.Enums.ARB_multitexture target, ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2dvARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord2fARB(GL.Enums.ARB_multitexture target, GLfloat s, GLfloat t)
            {
                Delegates.glMultiTexCoord2fARB(target, s, t);
            }
            
            public static 
            unsafe void MultiTexCoord2fvARB(GL.Enums.ARB_multitexture target, GLfloat* v)
            {
                Delegates.glMultiTexCoord2fvARB(target, v);
            }
            
            public static 
            void MultiTexCoord2fvARB(GL.Enums.ARB_multitexture target, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2fvARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord2fvARB(GL.Enums.ARB_multitexture target, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2fvARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord2iARB(GL.Enums.ARB_multitexture target, GLint s, GLint t)
            {
                Delegates.glMultiTexCoord2iARB(target, s, t);
            }
            
            public static 
            unsafe void MultiTexCoord2ivARB(GL.Enums.ARB_multitexture target, GLint* v)
            {
                Delegates.glMultiTexCoord2ivARB(target, v);
            }
            
            public static 
            void MultiTexCoord2ivARB(GL.Enums.ARB_multitexture target, GLint[] v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2ivARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord2ivARB(GL.Enums.ARB_multitexture target, ref GLint v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2ivARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord2sARB(GL.Enums.ARB_multitexture target, GLshort s, GLshort t)
            {
                Delegates.glMultiTexCoord2sARB(target, s, t);
            }
            
            public static 
            unsafe void MultiTexCoord2svARB(GL.Enums.ARB_multitexture target, GLshort* v)
            {
                Delegates.glMultiTexCoord2svARB(target, v);
            }
            
            public static 
            void MultiTexCoord2svARB(GL.Enums.ARB_multitexture target, GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2svARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord2svARB(GL.Enums.ARB_multitexture target, ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2svARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord3dARB(GL.Enums.ARB_multitexture target, GLdouble s, GLdouble t, GLdouble r)
            {
                Delegates.glMultiTexCoord3dARB(target, s, t, r);
            }
            
            public static 
            unsafe void MultiTexCoord3dvARB(GL.Enums.ARB_multitexture target, GLdouble* v)
            {
                Delegates.glMultiTexCoord3dvARB(target, v);
            }
            
            public static 
            void MultiTexCoord3dvARB(GL.Enums.ARB_multitexture target, GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3dvARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord3dvARB(GL.Enums.ARB_multitexture target, ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3dvARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord3fARB(GL.Enums.ARB_multitexture target, GLfloat s, GLfloat t, GLfloat r)
            {
                Delegates.glMultiTexCoord3fARB(target, s, t, r);
            }
            
            public static 
            unsafe void MultiTexCoord3fvARB(GL.Enums.ARB_multitexture target, GLfloat* v)
            {
                Delegates.glMultiTexCoord3fvARB(target, v);
            }
            
            public static 
            void MultiTexCoord3fvARB(GL.Enums.ARB_multitexture target, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3fvARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord3fvARB(GL.Enums.ARB_multitexture target, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3fvARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord3iARB(GL.Enums.ARB_multitexture target, GLint s, GLint t, GLint r)
            {
                Delegates.glMultiTexCoord3iARB(target, s, t, r);
            }
            
            public static 
            unsafe void MultiTexCoord3ivARB(GL.Enums.ARB_multitexture target, GLint* v)
            {
                Delegates.glMultiTexCoord3ivARB(target, v);
            }
            
            public static 
            void MultiTexCoord3ivARB(GL.Enums.ARB_multitexture target, GLint[] v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3ivARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord3ivARB(GL.Enums.ARB_multitexture target, ref GLint v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3ivARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord3sARB(GL.Enums.ARB_multitexture target, GLshort s, GLshort t, GLshort r)
            {
                Delegates.glMultiTexCoord3sARB(target, s, t, r);
            }
            
            public static 
            unsafe void MultiTexCoord3svARB(GL.Enums.ARB_multitexture target, GLshort* v)
            {
                Delegates.glMultiTexCoord3svARB(target, v);
            }
            
            public static 
            void MultiTexCoord3svARB(GL.Enums.ARB_multitexture target, GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3svARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord3svARB(GL.Enums.ARB_multitexture target, ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3svARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord4dARB(GL.Enums.ARB_multitexture target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
            {
                Delegates.glMultiTexCoord4dARB(target, s, t, r, q);
            }
            
            public static 
            unsafe void MultiTexCoord4dvARB(GL.Enums.ARB_multitexture target, GLdouble* v)
            {
                Delegates.glMultiTexCoord4dvARB(target, v);
            }
            
            public static 
            void MultiTexCoord4dvARB(GL.Enums.ARB_multitexture target, GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4dvARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord4dvARB(GL.Enums.ARB_multitexture target, ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4dvARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord4fARB(GL.Enums.ARB_multitexture target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
            {
                Delegates.glMultiTexCoord4fARB(target, s, t, r, q);
            }
            
            public static 
            unsafe void MultiTexCoord4fvARB(GL.Enums.ARB_multitexture target, GLfloat* v)
            {
                Delegates.glMultiTexCoord4fvARB(target, v);
            }
            
            public static 
            void MultiTexCoord4fvARB(GL.Enums.ARB_multitexture target, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4fvARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord4fvARB(GL.Enums.ARB_multitexture target, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4fvARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord4iARB(GL.Enums.ARB_multitexture target, GLint s, GLint t, GLint r, GLint q)
            {
                Delegates.glMultiTexCoord4iARB(target, s, t, r, q);
            }
            
            public static 
            unsafe void MultiTexCoord4ivARB(GL.Enums.ARB_multitexture target, GLint* v)
            {
                Delegates.glMultiTexCoord4ivARB(target, v);
            }
            
            public static 
            void MultiTexCoord4ivARB(GL.Enums.ARB_multitexture target, GLint[] v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4ivARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord4ivARB(GL.Enums.ARB_multitexture target, ref GLint v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4ivARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord4sARB(GL.Enums.ARB_multitexture target, GLshort s, GLshort t, GLshort r, GLshort q)
            {
                Delegates.glMultiTexCoord4sARB(target, s, t, r, q);
            }
            
            public static 
            unsafe void MultiTexCoord4svARB(GL.Enums.ARB_multitexture target, GLshort* v)
            {
                Delegates.glMultiTexCoord4svARB(target, v);
            }
            
            public static 
            void MultiTexCoord4svARB(GL.Enums.ARB_multitexture target, GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4svARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord4svARB(GL.Enums.ARB_multitexture target, ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4svARB(target, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void LoadTransposeMatrixfARB(GLfloat* m)
            {
                Delegates.glLoadTransposeMatrixfARB(m);
            }
            
            public static 
            void LoadTransposeMatrixfARB(GLfloat[] m)
            {
                unsafe
                {
                    fixed (GLfloat* m_ptr = m)
                    {
                        Delegates.glLoadTransposeMatrixfARB(m_ptr);
                    }
                }
            }
            
            public static 
            void LoadTransposeMatrixfARB(ref GLfloat m)
            {
                unsafe
                {
                    fixed (GLfloat* m_ptr = &m)
                    {
                        Delegates.glLoadTransposeMatrixfARB(m_ptr);
                    }
                }
            }
            
            public static 
            unsafe void LoadTransposeMatrixdARB(GLdouble* m)
            {
                Delegates.glLoadTransposeMatrixdARB(m);
            }
            
            public static 
            void LoadTransposeMatrixdARB(GLdouble[] m)
            {
                unsafe
                {
                    fixed (GLdouble* m_ptr = m)
                    {
                        Delegates.glLoadTransposeMatrixdARB(m_ptr);
                    }
                }
            }
            
            public static 
            void LoadTransposeMatrixdARB(ref GLdouble m)
            {
                unsafe
                {
                    fixed (GLdouble* m_ptr = &m)
                    {
                        Delegates.glLoadTransposeMatrixdARB(m_ptr);
                    }
                }
            }
            
            public static 
            unsafe void MultTransposeMatrixfARB(GLfloat* m)
            {
                Delegates.glMultTransposeMatrixfARB(m);
            }
            
            public static 
            void MultTransposeMatrixfARB(GLfloat[] m)
            {
                unsafe
                {
                    fixed (GLfloat* m_ptr = m)
                    {
                        Delegates.glMultTransposeMatrixfARB(m_ptr);
                    }
                }
            }
            
            public static 
            void MultTransposeMatrixfARB(ref GLfloat m)
            {
                unsafe
                {
                    fixed (GLfloat* m_ptr = &m)
                    {
                        Delegates.glMultTransposeMatrixfARB(m_ptr);
                    }
                }
            }
            
            public static 
            unsafe void MultTransposeMatrixdARB(GLdouble* m)
            {
                Delegates.glMultTransposeMatrixdARB(m);
            }
            
            public static 
            void MultTransposeMatrixdARB(GLdouble[] m)
            {
                unsafe
                {
                    fixed (GLdouble* m_ptr = m)
                    {
                        Delegates.glMultTransposeMatrixdARB(m_ptr);
                    }
                }
            }
            
            public static 
            void MultTransposeMatrixdARB(ref GLdouble m)
            {
                unsafe
                {
                    fixed (GLdouble* m_ptr = &m)
                    {
                        Delegates.glMultTransposeMatrixdARB(m_ptr);
                    }
                }
            }
            
            public static 
            unsafe void CompressedTexImage3DARB(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, void* data)
            {
                Delegates.glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data);
            }
            
            public static 
            void CompressedTexImage3DARB(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, object data)
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, (void*)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void CompressedTexImage2DARB(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, void* data)
            {
                Delegates.glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data);
            }
            
            public static 
            void CompressedTexImage2DARB(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, object data)
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, (void*)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void CompressedTexImage1DARB(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, void* data)
            {
                Delegates.glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data);
            }
            
            public static 
            void CompressedTexImage1DARB(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLint border, GLsizei imageSize, object data)
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, (void*)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void CompressedTexSubImage3DARB(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL.Enums.PixelFormat format, GLsizei imageSize, void* data)
            {
                Delegates.glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
            }
            
            public static 
            void CompressedTexSubImage3DARB(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL.Enums.PixelFormat format, GLsizei imageSize, object data)
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, (void*)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void CompressedTexSubImage2DARB(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GLsizei imageSize, void* data)
            {
                Delegates.glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data);
            }
            
            public static 
            void CompressedTexSubImage2DARB(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GLsizei imageSize, object data)
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, (void*)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void CompressedTexSubImage1DARB(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, GL.Enums.PixelFormat format, GLsizei imageSize, void* data)
            {
                Delegates.glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data);
            }
            
            public static 
            void CompressedTexSubImage1DARB(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, GL.Enums.PixelFormat format, GLsizei imageSize, object data)
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, (void*)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void GetCompressedTexImageARB(GL.Enums.TextureTarget target, GLint level, void* img)
            {
                Delegates.glGetCompressedTexImageARB(target, level, img);
            }
            
            public static 
            void GetCompressedTexImageARB(GL.Enums.TextureTarget target, GLint level, object img)
            {
                System.Runtime.InteropServices.GCHandle img_ptr = System.Runtime.InteropServices.GCHandle.Alloc(img, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glGetCompressedTexImageARB(target, level, (void*)img_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        img_ptr.Free();
                    }
                }
            }
            
            public static 
            void PointParameterfARB(GL.Enums.ARB_point_parameters pname, GLfloat param)
            {
                Delegates.glPointParameterfARB(pname, param);
            }
            
            public static 
            unsafe void PointParameterfvARB(GL.Enums.ARB_point_parameters pname, GLfloat* @params)
            {
                Delegates.glPointParameterfvARB(pname, @params);
            }
            
            public static 
            void PointParameterfvARB(GL.Enums.ARB_point_parameters pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glPointParameterfvARB(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void PointParameterfvARB(GL.Enums.ARB_point_parameters pname, ref GLfloat @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glPointParameterfvARB(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void WeightbvARB(GLint size, GLbyte* weights)
            {
                Delegates.glWeightbvARB(size, weights);
            }
            
            public static 
            void WeightbvARB(GLint size, GLbyte[] weights)
            {
                unsafe
                {
                    fixed (GLbyte* weights_ptr = weights)
                    {
                        Delegates.glWeightbvARB(size, weights_ptr);
                    }
                }
            }
            
            public static 
            void WeightbvARB(GLint size, ref GLbyte weights)
            {
                unsafe
                {
                    fixed (GLbyte* weights_ptr = &weights)
                    {
                        Delegates.glWeightbvARB(size, weights_ptr);
                    }
                }
            }
            
            public static 
            unsafe void WeightsvARB(GLint size, GLshort* weights)
            {
                Delegates.glWeightsvARB(size, weights);
            }
            
            public static 
            void WeightsvARB(GLint size, GLshort[] weights)
            {
                unsafe
                {
                    fixed (GLshort* weights_ptr = weights)
                    {
                        Delegates.glWeightsvARB(size, weights_ptr);
                    }
                }
            }
            
            public static 
            void WeightsvARB(GLint size, ref GLshort weights)
            {
                unsafe
                {
                    fixed (GLshort* weights_ptr = &weights)
                    {
                        Delegates.glWeightsvARB(size, weights_ptr);
                    }
                }
            }
            
            public static 
            unsafe void WeightivARB(GLint size, GLint* weights)
            {
                Delegates.glWeightivARB(size, weights);
            }
            
            public static 
            void WeightivARB(GLint size, GLint[] weights)
            {
                unsafe
                {
                    fixed (GLint* weights_ptr = weights)
                    {
                        Delegates.glWeightivARB(size, weights_ptr);
                    }
                }
            }
            
            public static 
            void WeightivARB(GLint size, ref GLint weights)
            {
                unsafe
                {
                    fixed (GLint* weights_ptr = &weights)
                    {
                        Delegates.glWeightivARB(size, weights_ptr);
                    }
                }
            }
            
            public static 
            unsafe void WeightfvARB(GLint size, GLfloat* weights)
            {
                Delegates.glWeightfvARB(size, weights);
            }
            
            public static 
            void WeightfvARB(GLint size, GLfloat[] weights)
            {
                unsafe
                {
                    fixed (GLfloat* weights_ptr = weights)
                    {
                        Delegates.glWeightfvARB(size, weights_ptr);
                    }
                }
            }
            
            public static 
            void WeightfvARB(GLint size, ref GLfloat weights)
            {
                unsafe
                {
                    fixed (GLfloat* weights_ptr = &weights)
                    {
                        Delegates.glWeightfvARB(size, weights_ptr);
                    }
                }
            }
            
            public static 
            unsafe void WeightdvARB(GLint size, GLdouble* weights)
            {
                Delegates.glWeightdvARB(size, weights);
            }
            
            public static 
            void WeightdvARB(GLint size, GLdouble[] weights)
            {
                unsafe
                {
                    fixed (GLdouble* weights_ptr = weights)
                    {
                        Delegates.glWeightdvARB(size, weights_ptr);
                    }
                }
            }
            
            public static 
            void WeightdvARB(GLint size, ref GLdouble weights)
            {
                unsafe
                {
                    fixed (GLdouble* weights_ptr = &weights)
                    {
                        Delegates.glWeightdvARB(size, weights_ptr);
                    }
                }
            }
            
            public static 
            unsafe void WeightubvARB(GLint size, GLubyte* weights)
            {
                Delegates.glWeightubvARB(size, weights);
            }
            
            public static 
            void WeightubvARB(GLint size, GLubyte[] weights)
            {
                unsafe
                {
                    fixed (GLubyte* weights_ptr = weights)
                    {
                        Delegates.glWeightubvARB(size, weights_ptr);
                    }
                }
            }
            
            public static 
            void WeightubvARB(GLint size, ref GLubyte weights)
            {
                unsafe
                {
                    fixed (GLubyte* weights_ptr = &weights)
                    {
                        Delegates.glWeightubvARB(size, weights_ptr);
                    }
                }
            }
            
            public static 
            unsafe void WeightusvARB(GLint size, GLushort* weights)
            {
                Delegates.glWeightusvARB(size, weights);
            }
            
            public static 
            void WeightusvARB(GLint size, GLushort[] weights)
            {
                unsafe
                {
                    fixed (GLushort* weights_ptr = weights)
                    {
                        Delegates.glWeightusvARB(size, weights_ptr);
                    }
                }
            }
            
            public static 
            void WeightusvARB(GLint size, ref GLushort weights)
            {
                unsafe
                {
                    fixed (GLushort* weights_ptr = &weights)
                    {
                        Delegates.glWeightusvARB(size, weights_ptr);
                    }
                }
            }
            
            public static 
            unsafe void WeightuivARB(GLint size, GLuint* weights)
            {
                Delegates.glWeightuivARB(size, weights);
            }
            
            public static 
            void WeightuivARB(GLint size, GLuint[] weights)
            {
                unsafe
                {
                    fixed (GLuint* weights_ptr = weights)
                    {
                        Delegates.glWeightuivARB(size, weights_ptr);
                    }
                }
            }
            
            public static 
            void WeightuivARB(GLint size, ref GLuint weights)
            {
                unsafe
                {
                    fixed (GLuint* weights_ptr = &weights)
                    {
                        Delegates.glWeightuivARB(size, weights_ptr);
                    }
                }
            }
            
            public static 
            unsafe void WeightPointerARB(GLint size, GL.Enums.ARB_vertex_blend type, GLsizei stride, void* pointer)
            {
                Delegates.glWeightPointerARB(size, type, stride, pointer);
            }
            
            public static 
            void WeightPointerARB(GLint size, GL.Enums.ARB_vertex_blend type, GLsizei stride, object pointer)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glWeightPointerARB(size, type, stride, (void*)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            void VertexBlendARB(GLint count)
            {
                Delegates.glVertexBlendARB(count);
            }
            
            public static 
            void CurrentPaletteMatrixARB(GLint index)
            {
                Delegates.glCurrentPaletteMatrixARB(index);
            }
            
            public static 
            unsafe void MatrixIndexubvARB(GLint size, GLubyte* indices)
            {
                Delegates.glMatrixIndexubvARB(size, indices);
            }
            
            public static 
            void MatrixIndexubvARB(GLint size, GLubyte[] indices)
            {
                unsafe
                {
                    fixed (GLubyte* indices_ptr = indices)
                    {
                        Delegates.glMatrixIndexubvARB(size, indices_ptr);
                    }
                }
            }
            
            public static 
            void MatrixIndexubvARB(GLint size, ref GLubyte indices)
            {
                unsafe
                {
                    fixed (GLubyte* indices_ptr = &indices)
                    {
                        Delegates.glMatrixIndexubvARB(size, indices_ptr);
                    }
                }
            }
            
            public static 
            unsafe void MatrixIndexusvARB(GLint size, GLushort* indices)
            {
                Delegates.glMatrixIndexusvARB(size, indices);
            }
            
            public static 
            void MatrixIndexusvARB(GLint size, GLushort[] indices)
            {
                unsafe
                {
                    fixed (GLushort* indices_ptr = indices)
                    {
                        Delegates.glMatrixIndexusvARB(size, indices_ptr);
                    }
                }
            }
            
            public static 
            void MatrixIndexusvARB(GLint size, ref GLushort indices)
            {
                unsafe
                {
                    fixed (GLushort* indices_ptr = &indices)
                    {
                        Delegates.glMatrixIndexusvARB(size, indices_ptr);
                    }
                }
            }
            
            public static 
            unsafe void MatrixIndexuivARB(GLint size, GLuint* indices)
            {
                Delegates.glMatrixIndexuivARB(size, indices);
            }
            
            public static 
            void MatrixIndexuivARB(GLint size, GLuint[] indices)
            {
                unsafe
                {
                    fixed (GLuint* indices_ptr = indices)
                    {
                        Delegates.glMatrixIndexuivARB(size, indices_ptr);
                    }
                }
            }
            
            public static 
            void MatrixIndexuivARB(GLint size, ref GLuint indices)
            {
                unsafe
                {
                    fixed (GLuint* indices_ptr = &indices)
                    {
                        Delegates.glMatrixIndexuivARB(size, indices_ptr);
                    }
                }
            }
            
            public static 
            unsafe void MatrixIndexPointerARB(GLint size, GL.Enums.ARB_matrix_palette type, GLsizei stride, void* pointer)
            {
                Delegates.glMatrixIndexPointerARB(size, type, stride, pointer);
            }
            
            public static 
            void MatrixIndexPointerARB(GLint size, GL.Enums.ARB_matrix_palette type, GLsizei stride, object pointer)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glMatrixIndexPointerARB(size, type, stride, (void*)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            void WindowPos2dARB(GLdouble x, GLdouble y)
            {
                Delegates.glWindowPos2dARB(x, y);
            }
            
            public static 
            unsafe void WindowPos2dvARB(GLdouble* v)
            {
                Delegates.glWindowPos2dvARB(v);
            }
            
            public static 
            void WindowPos2dvARB(GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glWindowPos2dvARB(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos2dvARB(ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glWindowPos2dvARB(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos2fARB(GLfloat x, GLfloat y)
            {
                Delegates.glWindowPos2fARB(x, y);
            }
            
            public static 
            unsafe void WindowPos2fvARB(GLfloat* v)
            {
                Delegates.glWindowPos2fvARB(v);
            }
            
            public static 
            void WindowPos2fvARB(GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glWindowPos2fvARB(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos2fvARB(ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glWindowPos2fvARB(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos2iARB(GLint x, GLint y)
            {
                Delegates.glWindowPos2iARB(x, y);
            }
            
            public static 
            unsafe void WindowPos2ivARB(GLint* v)
            {
                Delegates.glWindowPos2ivARB(v);
            }
            
            public static 
            void WindowPos2ivARB(GLint[] v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = v)
                    {
                        Delegates.glWindowPos2ivARB(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos2ivARB(ref GLint v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = &v)
                    {
                        Delegates.glWindowPos2ivARB(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos2sARB(GLshort x, GLshort y)
            {
                Delegates.glWindowPos2sARB(x, y);
            }
            
            public static 
            unsafe void WindowPos2svARB(GLshort* v)
            {
                Delegates.glWindowPos2svARB(v);
            }
            
            public static 
            void WindowPos2svARB(GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glWindowPos2svARB(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos2svARB(ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glWindowPos2svARB(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos3dARB(GLdouble x, GLdouble y, GLdouble z)
            {
                Delegates.glWindowPos3dARB(x, y, z);
            }
            
            public static 
            unsafe void WindowPos3dvARB(GLdouble* v)
            {
                Delegates.glWindowPos3dvARB(v);
            }
            
            public static 
            void WindowPos3dvARB(GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glWindowPos3dvARB(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos3dvARB(ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glWindowPos3dvARB(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos3fARB(GLfloat x, GLfloat y, GLfloat z)
            {
                Delegates.glWindowPos3fARB(x, y, z);
            }
            
            public static 
            unsafe void WindowPos3fvARB(GLfloat* v)
            {
                Delegates.glWindowPos3fvARB(v);
            }
            
            public static 
            void WindowPos3fvARB(GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glWindowPos3fvARB(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos3fvARB(ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glWindowPos3fvARB(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos3iARB(GLint x, GLint y, GLint z)
            {
                Delegates.glWindowPos3iARB(x, y, z);
            }
            
            public static 
            unsafe void WindowPos3ivARB(GLint* v)
            {
                Delegates.glWindowPos3ivARB(v);
            }
            
            public static 
            void WindowPos3ivARB(GLint[] v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = v)
                    {
                        Delegates.glWindowPos3ivARB(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos3ivARB(ref GLint v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = &v)
                    {
                        Delegates.glWindowPos3ivARB(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos3sARB(GLshort x, GLshort y, GLshort z)
            {
                Delegates.glWindowPos3sARB(x, y, z);
            }
            
            public static 
            unsafe void WindowPos3svARB(GLshort* v)
            {
                Delegates.glWindowPos3svARB(v);
            }
            
            public static 
            void WindowPos3svARB(GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glWindowPos3svARB(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos3svARB(ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glWindowPos3svARB(v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib1dARB(GLuint index, GLdouble x)
            {
                Delegates.glVertexAttrib1dARB(index, x);
            }
            
            public static 
            unsafe void VertexAttrib1dvARB(GLuint index, GLdouble* v)
            {
                Delegates.glVertexAttrib1dvARB(index, v);
            }
            
            public static 
            void VertexAttrib1dvARB(GLuint index, GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glVertexAttrib1dvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib1dvARB(GLuint index, ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib1dvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib1fARB(GLuint index, GLfloat x)
            {
                Delegates.glVertexAttrib1fARB(index, x);
            }
            
            public static 
            unsafe void VertexAttrib1fvARB(GLuint index, GLfloat* v)
            {
                Delegates.glVertexAttrib1fvARB(index, v);
            }
            
            public static 
            void VertexAttrib1fvARB(GLuint index, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glVertexAttrib1fvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib1fvARB(GLuint index, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib1fvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib1sARB(GLuint index, GLshort x)
            {
                Delegates.glVertexAttrib1sARB(index, x);
            }
            
            public static 
            unsafe void VertexAttrib1svARB(GLuint index, GLshort* v)
            {
                Delegates.glVertexAttrib1svARB(index, v);
            }
            
            public static 
            void VertexAttrib1svARB(GLuint index, GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glVertexAttrib1svARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib1svARB(GLuint index, ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib1svARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)
            {
                Delegates.glVertexAttrib2dARB(index, x, y);
            }
            
            public static 
            unsafe void VertexAttrib2dvARB(GLuint index, GLdouble* v)
            {
                Delegates.glVertexAttrib2dvARB(index, v);
            }
            
            public static 
            void VertexAttrib2dvARB(GLuint index, GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2dvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib2dvARB(GLuint index, ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2dvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)
            {
                Delegates.glVertexAttrib2fARB(index, x, y);
            }
            
            public static 
            unsafe void VertexAttrib2fvARB(GLuint index, GLfloat* v)
            {
                Delegates.glVertexAttrib2fvARB(index, v);
            }
            
            public static 
            void VertexAttrib2fvARB(GLuint index, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2fvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib2fvARB(GLuint index, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2fvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib2sARB(GLuint index, GLshort x, GLshort y)
            {
                Delegates.glVertexAttrib2sARB(index, x, y);
            }
            
            public static 
            unsafe void VertexAttrib2svARB(GLuint index, GLshort* v)
            {
                Delegates.glVertexAttrib2svARB(index, v);
            }
            
            public static 
            void VertexAttrib2svARB(GLuint index, GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2svARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib2svARB(GLuint index, ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2svARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)
            {
                Delegates.glVertexAttrib3dARB(index, x, y, z);
            }
            
            public static 
            unsafe void VertexAttrib3dvARB(GLuint index, GLdouble* v)
            {
                Delegates.glVertexAttrib3dvARB(index, v);
            }
            
            public static 
            void VertexAttrib3dvARB(GLuint index, GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3dvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib3dvARB(GLuint index, ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3dvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)
            {
                Delegates.glVertexAttrib3fARB(index, x, y, z);
            }
            
            public static 
            unsafe void VertexAttrib3fvARB(GLuint index, GLfloat* v)
            {
                Delegates.glVertexAttrib3fvARB(index, v);
            }
            
            public static 
            void VertexAttrib3fvARB(GLuint index, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3fvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib3fvARB(GLuint index, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3fvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)
            {
                Delegates.glVertexAttrib3sARB(index, x, y, z);
            }
            
            public static 
            unsafe void VertexAttrib3svARB(GLuint index, GLshort* v)
            {
                Delegates.glVertexAttrib3svARB(index, v);
            }
            
            public static 
            void VertexAttrib3svARB(GLuint index, GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3svARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib3svARB(GLuint index, ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3svARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttrib4NbvARB(GLuint index, GLbyte* v)
            {
                Delegates.glVertexAttrib4NbvARB(index, v);
            }
            
            public static 
            void VertexAttrib4NbvARB(GLuint index, GLbyte[] v)
            {
                unsafe
                {
                    fixed (GLbyte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NbvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4NbvARB(GLuint index, ref GLbyte v)
            {
                unsafe
                {
                    fixed (GLbyte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NbvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttrib4NivARB(GLuint index, GLint* v)
            {
                Delegates.glVertexAttrib4NivARB(index, v);
            }
            
            public static 
            void VertexAttrib4NivARB(GLuint index, GLint[] v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NivARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4NivARB(GLuint index, ref GLint v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NivARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttrib4NsvARB(GLuint index, GLshort* v)
            {
                Delegates.glVertexAttrib4NsvARB(index, v);
            }
            
            public static 
            void VertexAttrib4NsvARB(GLuint index, GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NsvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4NsvARB(GLuint index, ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NsvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
            {
                Delegates.glVertexAttrib4NubARB(index, x, y, z, w);
            }
            
            public static 
            unsafe void VertexAttrib4NubvARB(GLuint index, GLubyte* v)
            {
                Delegates.glVertexAttrib4NubvARB(index, v);
            }
            
            public static 
            void VertexAttrib4NubvARB(GLuint index, GLubyte[] v)
            {
                unsafe
                {
                    fixed (GLubyte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NubvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4NubvARB(GLuint index, ref GLubyte v)
            {
                unsafe
                {
                    fixed (GLubyte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NubvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttrib4NuivARB(GLuint index, GLuint* v)
            {
                Delegates.glVertexAttrib4NuivARB(index, v);
            }
            
            public static 
            void VertexAttrib4NuivARB(GLuint index, GLuint[] v)
            {
                unsafe
                {
                    fixed (GLuint* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NuivARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4NuivARB(GLuint index, ref GLuint v)
            {
                unsafe
                {
                    fixed (GLuint* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NuivARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttrib4NusvARB(GLuint index, GLushort* v)
            {
                Delegates.glVertexAttrib4NusvARB(index, v);
            }
            
            public static 
            void VertexAttrib4NusvARB(GLuint index, GLushort[] v)
            {
                unsafe
                {
                    fixed (GLushort* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NusvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4NusvARB(GLuint index, ref GLushort v)
            {
                unsafe
                {
                    fixed (GLushort* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NusvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttrib4bvARB(GLuint index, GLbyte* v)
            {
                Delegates.glVertexAttrib4bvARB(index, v);
            }
            
            public static 
            void VertexAttrib4bvARB(GLuint index, GLbyte[] v)
            {
                unsafe
                {
                    fixed (GLbyte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4bvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4bvARB(GLuint index, ref GLbyte v)
            {
                unsafe
                {
                    fixed (GLbyte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4bvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
            {
                Delegates.glVertexAttrib4dARB(index, x, y, z, w);
            }
            
            public static 
            unsafe void VertexAttrib4dvARB(GLuint index, GLdouble* v)
            {
                Delegates.glVertexAttrib4dvARB(index, v);
            }
            
            public static 
            void VertexAttrib4dvARB(GLuint index, GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4dvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4dvARB(GLuint index, ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4dvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
            {
                Delegates.glVertexAttrib4fARB(index, x, y, z, w);
            }
            
            public static 
            unsafe void VertexAttrib4fvARB(GLuint index, GLfloat* v)
            {
                Delegates.glVertexAttrib4fvARB(index, v);
            }
            
            public static 
            void VertexAttrib4fvARB(GLuint index, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4fvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4fvARB(GLuint index, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4fvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttrib4ivARB(GLuint index, GLint* v)
            {
                Delegates.glVertexAttrib4ivARB(index, v);
            }
            
            public static 
            void VertexAttrib4ivARB(GLuint index, GLint[] v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4ivARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4ivARB(GLuint index, ref GLint v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4ivARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
            {
                Delegates.glVertexAttrib4sARB(index, x, y, z, w);
            }
            
            public static 
            unsafe void VertexAttrib4svARB(GLuint index, GLshort* v)
            {
                Delegates.glVertexAttrib4svARB(index, v);
            }
            
            public static 
            void VertexAttrib4svARB(GLuint index, GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4svARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4svARB(GLuint index, ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4svARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttrib4ubvARB(GLuint index, GLubyte* v)
            {
                Delegates.glVertexAttrib4ubvARB(index, v);
            }
            
            public static 
            void VertexAttrib4ubvARB(GLuint index, GLubyte[] v)
            {
                unsafe
                {
                    fixed (GLubyte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4ubvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4ubvARB(GLuint index, ref GLubyte v)
            {
                unsafe
                {
                    fixed (GLubyte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4ubvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttrib4uivARB(GLuint index, GLuint* v)
            {
                Delegates.glVertexAttrib4uivARB(index, v);
            }
            
            public static 
            void VertexAttrib4uivARB(GLuint index, GLuint[] v)
            {
                unsafe
                {
                    fixed (GLuint* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4uivARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4uivARB(GLuint index, ref GLuint v)
            {
                unsafe
                {
                    fixed (GLuint* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4uivARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttrib4usvARB(GLuint index, GLushort* v)
            {
                Delegates.glVertexAttrib4usvARB(index, v);
            }
            
            public static 
            void VertexAttrib4usvARB(GLuint index, GLushort[] v)
            {
                unsafe
                {
                    fixed (GLushort* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4usvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4usvARB(GLuint index, ref GLushort v)
            {
                unsafe
                {
                    fixed (GLushort* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4usvARB(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribPointerARB(GLuint index, GLint size, GL.Enums.ARB_vertex_program type, GL.Enums.Boolean normalized, GLsizei stride, void* pointer)
            {
                Delegates.glVertexAttribPointerARB(index, size, type, normalized, stride, pointer);
            }
            
            public static 
            void VertexAttribPointerARB(GLuint index, GLint size, GL.Enums.ARB_vertex_program type, GL.Enums.Boolean normalized, GLsizei stride, object pointer)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glVertexAttribPointerARB(index, size, type, normalized, stride, (void*)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            void EnableVertexAttribArrayARB(GLuint index)
            {
                Delegates.glEnableVertexAttribArrayARB(index);
            }
            
            public static 
            void DisableVertexAttribArrayARB(GLuint index)
            {
                Delegates.glDisableVertexAttribArrayARB(index);
            }
            
            public static 
            unsafe void ProgramStringARB(GL.Enums.ARB_vertex_program target, GL.Enums.ARB_vertex_program format, GLsizei len, void* @string)
            {
                Delegates.glProgramStringARB(target, format, len, @string);
            }
            
            public static 
            void ProgramStringARB(GL.Enums.ARB_vertex_program target, GL.Enums.ARB_vertex_program format, GLsizei len, object @string)
            {
                System.Runtime.InteropServices.GCHandle @string_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@string, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glProgramStringARB(target, format, len, (void*)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
            }
            
            public static 
            void BindProgramARB(GL.Enums.ARB_vertex_program target, GLuint program)
            {
                Delegates.glBindProgramARB(target, program);
            }
            
            public static 
            unsafe void DeleteProgramsARB(GLsizei n, GLuint* programs)
            {
                Delegates.glDeleteProgramsARB(n, programs);
            }
            
            public static 
            void DeleteProgramsARB(GLsizei n, GLuint[] programs)
            {
                unsafe
                {
                    fixed (GLuint* programs_ptr = programs)
                    {
                        Delegates.glDeleteProgramsARB(n, programs_ptr);
                    }
                }
            }
            
            public static 
            void DeleteProgramsARB(GLsizei n, ref GLuint programs)
            {
                unsafe
                {
                    fixed (GLuint* programs_ptr = &programs)
                    {
                        Delegates.glDeleteProgramsARB(n, programs_ptr);
                    }
                }
            }
            
            public static 
            unsafe void GenProgramsARB(GLsizei n, GLuint* programs)
            {
                Delegates.glGenProgramsARB(n, programs);
            }
            
            public static 
            void GenProgramsARB(GLsizei n, GLuint[] programs)
            {
                unsafe
                {
                    fixed (GLuint* programs_ptr = programs)
                    {
                        Delegates.glGenProgramsARB(n, programs_ptr);
                    }
                }
            }
            
            public static 
            void GenProgramsARB(GLsizei n, out GLuint programs)
            {
                programs = default(GLuint);
                unsafe
                {
                    fixed (GLuint* programs_ptr = &programs)
                    {
                        Delegates.glGenProgramsARB(n, programs_ptr);
                        programs = *programs_ptr;
                    }
                }
            }
            
            public static 
            void ProgramEnvParameter4dARB(GL.Enums.ARB_vertex_program target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
            {
                Delegates.glProgramEnvParameter4dARB(target, index, x, y, z, w);
            }
            
            public static 
            unsafe void ProgramEnvParameter4dvARB(GL.Enums.ARB_vertex_program target, GLuint index, GLdouble* @params)
            {
                Delegates.glProgramEnvParameter4dvARB(target, index, @params);
            }
            
            public static 
            void ProgramEnvParameter4dvARB(GL.Enums.ARB_vertex_program target, GLuint index, GLdouble[] @params)
            {
                unsafe
                {
                    fixed (GLdouble* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameter4dvARB(target, index, @params_ptr);
                    }
                }
            }
            
            public static 
            void ProgramEnvParameter4dvARB(GL.Enums.ARB_vertex_program target, GLuint index, ref GLdouble @params)
            {
                unsafe
                {
                    fixed (GLdouble* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameter4dvARB(target, index, @params_ptr);
                    }
                }
            }
            
            public static 
            void ProgramEnvParameter4fARB(GL.Enums.ARB_vertex_program target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
            {
                Delegates.glProgramEnvParameter4fARB(target, index, x, y, z, w);
            }
            
            public static 
            unsafe void ProgramEnvParameter4fvARB(GL.Enums.ARB_vertex_program target, GLuint index, GLfloat* @params)
            {
                Delegates.glProgramEnvParameter4fvARB(target, index, @params);
            }
            
            public static 
            void ProgramEnvParameter4fvARB(GL.Enums.ARB_vertex_program target, GLuint index, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameter4fvARB(target, index, @params_ptr);
                    }
                }
            }
            
            public static 
            void ProgramEnvParameter4fvARB(GL.Enums.ARB_vertex_program target, GLuint index, ref GLfloat @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameter4fvARB(target, index, @params_ptr);
                    }
                }
            }
            
            public static 
            void ProgramLocalParameter4dARB(GL.Enums.ARB_vertex_program target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
            {
                Delegates.glProgramLocalParameter4dARB(target, index, x, y, z, w);
            }
            
            public static 
            unsafe void ProgramLocalParameter4dvARB(GL.Enums.ARB_vertex_program target, GLuint index, GLdouble* @params)
            {
                Delegates.glProgramLocalParameter4dvARB(target, index, @params);
            }
            
            public static 
            void ProgramLocalParameter4dvARB(GL.Enums.ARB_vertex_program target, GLuint index, GLdouble[] @params)
            {
                unsafe
                {
                    fixed (GLdouble* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameter4dvARB(target, index, @params_ptr);
                    }
                }
            }
            
            public static 
            void ProgramLocalParameter4dvARB(GL.Enums.ARB_vertex_program target, GLuint index, ref GLdouble @params)
            {
                unsafe
                {
                    fixed (GLdouble* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameter4dvARB(target, index, @params_ptr);
                    }
                }
            }
            
            public static 
            void ProgramLocalParameter4fARB(GL.Enums.ARB_vertex_program target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
            {
                Delegates.glProgramLocalParameter4fARB(target, index, x, y, z, w);
            }
            
            public static 
            unsafe void ProgramLocalParameter4fvARB(GL.Enums.ARB_vertex_program target, GLuint index, GLfloat* @params)
            {
                Delegates.glProgramLocalParameter4fvARB(target, index, @params);
            }
            
            public static 
            void ProgramLocalParameter4fvARB(GL.Enums.ARB_vertex_program target, GLuint index, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameter4fvARB(target, index, @params_ptr);
                    }
                }
            }
            
            public static 
            void ProgramLocalParameter4fvARB(GL.Enums.ARB_vertex_program target, GLuint index, ref GLfloat @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameter4fvARB(target, index, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void GetProgramEnvParameterdvARB(GL.Enums.ARB_vertex_program target, GLuint index, GLdouble* @params)
            {
                Delegates.glGetProgramEnvParameterdvARB(target, index, @params);
            }
            
            public static 
            void GetProgramEnvParameterdvARB(GL.Enums.ARB_vertex_program target, GLuint index, GLdouble[] @params)
            {
                unsafe
                {
                    fixed (GLdouble* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterdvARB(target, index, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetProgramEnvParameterdvARB(GL.Enums.ARB_vertex_program target, GLuint index, out GLdouble @params)
            {
                @params = default(GLdouble);
                unsafe
                {
                    fixed (GLdouble* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterdvARB(target, index, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetProgramEnvParameterfvARB(GL.Enums.ARB_vertex_program target, GLuint index, GLfloat* @params)
            {
                Delegates.glGetProgramEnvParameterfvARB(target, index, @params);
            }
            
            public static 
            void GetProgramEnvParameterfvARB(GL.Enums.ARB_vertex_program target, GLuint index, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterfvARB(target, index, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetProgramEnvParameterfvARB(GL.Enums.ARB_vertex_program target, GLuint index, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterfvARB(target, index, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetProgramLocalParameterdvARB(GL.Enums.ARB_vertex_program target, GLuint index, GLdouble* @params)
            {
                Delegates.glGetProgramLocalParameterdvARB(target, index, @params);
            }
            
            public static 
            void GetProgramLocalParameterdvARB(GL.Enums.ARB_vertex_program target, GLuint index, GLdouble[] @params)
            {
                unsafe
                {
                    fixed (GLdouble* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterdvARB(target, index, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetProgramLocalParameterdvARB(GL.Enums.ARB_vertex_program target, GLuint index, out GLdouble @params)
            {
                @params = default(GLdouble);
                unsafe
                {
                    fixed (GLdouble* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterdvARB(target, index, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetProgramLocalParameterfvARB(GL.Enums.ARB_vertex_program target, GLuint index, GLfloat* @params)
            {
                Delegates.glGetProgramLocalParameterfvARB(target, index, @params);
            }
            
            public static 
            void GetProgramLocalParameterfvARB(GL.Enums.ARB_vertex_program target, GLuint index, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterfvARB(target, index, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetProgramLocalParameterfvARB(GL.Enums.ARB_vertex_program target, GLuint index, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterfvARB(target, index, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetProgramivARB(GL.Enums.ARB_vertex_program target, GL.Enums.ARB_vertex_program pname, GLint* @params)
            {
                Delegates.glGetProgramivARB(target, pname, @params);
            }
            
            public static 
            void GetProgramivARB(GL.Enums.ARB_vertex_program target, GL.Enums.ARB_vertex_program pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetProgramivARB(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetProgramivARB(GL.Enums.ARB_vertex_program target, GL.Enums.ARB_vertex_program pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramivARB(target, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetProgramStringARB(GL.Enums.ARB_vertex_program target, GL.Enums.ARB_vertex_program pname, void* @string)
            {
                Delegates.glGetProgramStringARB(target, pname, @string);
            }
            
            public static 
            void GetProgramStringARB(GL.Enums.ARB_vertex_program target, GL.Enums.ARB_vertex_program pname, object @string)
            {
                System.Runtime.InteropServices.GCHandle @string_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@string, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glGetProgramStringARB(target, pname, (void*)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void GetVertexAttribdvARB(GLuint index, GL.Enums.ARB_vertex_program pname, GLdouble* @params)
            {
                Delegates.glGetVertexAttribdvARB(index, pname, @params);
            }
            
            public static 
            void GetVertexAttribdvARB(GLuint index, GL.Enums.ARB_vertex_program pname, GLdouble[] @params)
            {
                unsafe
                {
                    fixed (GLdouble* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribdvARB(index, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetVertexAttribdvARB(GLuint index, GL.Enums.ARB_vertex_program pname, out GLdouble @params)
            {
                @params = default(GLdouble);
                unsafe
                {
                    fixed (GLdouble* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribdvARB(index, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetVertexAttribfvARB(GLuint index, GL.Enums.ARB_vertex_program pname, GLfloat* @params)
            {
                Delegates.glGetVertexAttribfvARB(index, pname, @params);
            }
            
            public static 
            void GetVertexAttribfvARB(GLuint index, GL.Enums.ARB_vertex_program pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribfvARB(index, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetVertexAttribfvARB(GLuint index, GL.Enums.ARB_vertex_program pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribfvARB(index, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetVertexAttribivARB(GLuint index, GL.Enums.ARB_vertex_program pname, GLint* @params)
            {
                Delegates.glGetVertexAttribivARB(index, pname, @params);
            }
            
            public static 
            void GetVertexAttribivARB(GLuint index, GL.Enums.ARB_vertex_program pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribivARB(index, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetVertexAttribivARB(GLuint index, GL.Enums.ARB_vertex_program pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribivARB(index, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetVertexAttribPointervARB(GLuint index, GL.Enums.ARB_vertex_program pname, void* pointer)
            {
                Delegates.glGetVertexAttribPointervARB(index, pname, pointer);
            }
            
            public static 
            void GetVertexAttribPointervARB(GLuint index, GL.Enums.ARB_vertex_program pname, object pointer)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glGetVertexAttribPointervARB(index, pname, (void*)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            GLboolean IsProgramARB(GLuint program)
            {
                return Delegates.glIsProgramARB(program);
            }
            
            public static 
            void BindBufferARB(GL.Enums.ARB_vertex_buffer_object target, GLuint buffer)
            {
                Delegates.glBindBufferARB(target, buffer);
            }
            
            public static 
            unsafe void DeleteBuffersARB(GLsizei n, GLuint* buffers)
            {
                Delegates.glDeleteBuffersARB(n, buffers);
            }
            
            public static 
            void DeleteBuffersARB(GLsizei n, GLuint[] buffers)
            {
                unsafe
                {
                    fixed (GLuint* buffers_ptr = buffers)
                    {
                        Delegates.glDeleteBuffersARB(n, buffers_ptr);
                    }
                }
            }
            
            public static 
            void DeleteBuffersARB(GLsizei n, ref GLuint buffers)
            {
                unsafe
                {
                    fixed (GLuint* buffers_ptr = &buffers)
                    {
                        Delegates.glDeleteBuffersARB(n, buffers_ptr);
                    }
                }
            }
            
            public static 
            unsafe void GenBuffersARB(GLsizei n, GLuint* buffers)
            {
                Delegates.glGenBuffersARB(n, buffers);
            }
            
            public static 
            void GenBuffersARB(GLsizei n, GLuint[] buffers)
            {
                unsafe
                {
                    fixed (GLuint* buffers_ptr = buffers)
                    {
                        Delegates.glGenBuffersARB(n, buffers_ptr);
                    }
                }
            }
            
            public static 
            void GenBuffersARB(GLsizei n, out GLuint buffers)
            {
                buffers = default(GLuint);
                unsafe
                {
                    fixed (GLuint* buffers_ptr = &buffers)
                    {
                        Delegates.glGenBuffersARB(n, buffers_ptr);
                        buffers = *buffers_ptr;
                    }
                }
            }
            
            public static 
            GLboolean IsBufferARB(GLuint buffer)
            {
                return Delegates.glIsBufferARB(buffer);
            }
            
            public static 
            unsafe void BufferDataARB(GL.Enums.ARB_vertex_buffer_object target, GLsizeiptrARB size, void* data, GL.Enums.ARB_vertex_buffer_object usage)
            {
                Delegates.glBufferDataARB(target, size, data, usage);
            }
            
            public static 
            void BufferDataARB(GL.Enums.ARB_vertex_buffer_object target, GLsizeiptrARB size, object data, GL.Enums.ARB_vertex_buffer_object usage)
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glBufferDataARB(target, size, (void*)data_ptr.AddrOfPinnedObject(), usage);
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void BufferSubDataARB(GL.Enums.ARB_vertex_buffer_object target, GLintptrARB offset, GLsizeiptrARB size, void* data)
            {
                Delegates.glBufferSubDataARB(target, offset, size, data);
            }
            
            public static 
            void BufferSubDataARB(GL.Enums.ARB_vertex_buffer_object target, GLintptrARB offset, GLsizeiptrARB size, object data)
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glBufferSubDataARB(target, offset, size, (void*)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void GetBufferSubDataARB(GL.Enums.ARB_vertex_buffer_object target, GLintptrARB offset, GLsizeiptrARB size, void* data)
            {
                Delegates.glGetBufferSubDataARB(target, offset, size, data);
            }
            
            public static 
            void GetBufferSubDataARB(GL.Enums.ARB_vertex_buffer_object target, GLintptrARB offset, GLsizeiptrARB size, object data)
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glGetBufferSubDataARB(target, offset, size, (void*)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }
            
            public static 
            void MapBufferARB(GL.Enums.ARB_vertex_buffer_object target, GL.Enums.ARB_vertex_buffer_object access)
            {
                Delegates.glMapBufferARB(target, access);
            }
            
            public static 
            GLboolean UnmapBufferARB(GL.Enums.ARB_vertex_buffer_object target)
            {
                return Delegates.glUnmapBufferARB(target);
            }
            
            public static 
            unsafe void GetBufferParameterivARB(GL.Enums.ARB_vertex_buffer_object target, GL.Enums.ARB_vertex_buffer_object pname, GLint* @params)
            {
                Delegates.glGetBufferParameterivARB(target, pname, @params);
            }
            
            public static 
            void GetBufferParameterivARB(GL.Enums.ARB_vertex_buffer_object target, GL.Enums.ARB_vertex_buffer_object pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetBufferParameterivARB(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetBufferParameterivARB(GL.Enums.ARB_vertex_buffer_object target, GL.Enums.ARB_vertex_buffer_object pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetBufferParameterivARB(target, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetBufferPointervARB(GL.Enums.ARB_vertex_buffer_object target, GL.Enums.ARB_vertex_buffer_object pname, void* @params)
            {
                Delegates.glGetBufferPointervARB(target, pname, @params);
            }
            
            public static 
            void GetBufferPointervARB(GL.Enums.ARB_vertex_buffer_object target, GL.Enums.ARB_vertex_buffer_object pname, object @params)
            {
                System.Runtime.InteropServices.GCHandle @params_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@params, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glGetBufferPointervARB(target, pname, (void*)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void GenQueriesARB(GLsizei n, GLuint* ids)
            {
                Delegates.glGenQueriesARB(n, ids);
            }
            
            public static 
            void GenQueriesARB(GLsizei n, GLuint[] ids)
            {
                unsafe
                {
                    fixed (GLuint* ids_ptr = ids)
                    {
                        Delegates.glGenQueriesARB(n, ids_ptr);
                    }
                }
            }
            
            public static 
            void GenQueriesARB(GLsizei n, out GLuint ids)
            {
                ids = default(GLuint);
                unsafe
                {
                    fixed (GLuint* ids_ptr = &ids)
                    {
                        Delegates.glGenQueriesARB(n, ids_ptr);
                        ids = *ids_ptr;
                    }
                }
            }
            
            public static 
            unsafe void DeleteQueriesARB(GLsizei n, GLuint* ids)
            {
                Delegates.glDeleteQueriesARB(n, ids);
            }
            
            public static 
            void DeleteQueriesARB(GLsizei n, GLuint[] ids)
            {
                unsafe
                {
                    fixed (GLuint* ids_ptr = ids)
                    {
                        Delegates.glDeleteQueriesARB(n, ids_ptr);
                    }
                }
            }
            
            public static 
            void DeleteQueriesARB(GLsizei n, ref GLuint ids)
            {
                unsafe
                {
                    fixed (GLuint* ids_ptr = &ids)
                    {
                        Delegates.glDeleteQueriesARB(n, ids_ptr);
                    }
                }
            }
            
            public static 
            GLboolean IsQueryARB(GLuint id)
            {
                return Delegates.glIsQueryARB(id);
            }
            
            public static 
            void BeginQueryARB(GL.Enums.ARB_occlusion_query target, GLuint id)
            {
                Delegates.glBeginQueryARB(target, id);
            }
            
            public static 
            void EndQueryARB(GL.Enums.ARB_occlusion_query target)
            {
                Delegates.glEndQueryARB(target);
            }
            
            public static 
            unsafe void GetQueryivARB(GL.Enums.ARB_occlusion_query target, GL.Enums.ARB_occlusion_query pname, GLint* @params)
            {
                Delegates.glGetQueryivARB(target, pname, @params);
            }
            
            public static 
            void GetQueryivARB(GL.Enums.ARB_occlusion_query target, GL.Enums.ARB_occlusion_query pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetQueryivARB(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetQueryivARB(GL.Enums.ARB_occlusion_query target, GL.Enums.ARB_occlusion_query pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryivARB(target, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetQueryObjectivARB(GLuint id, GL.Enums.ARB_occlusion_query pname, GLint* @params)
            {
                Delegates.glGetQueryObjectivARB(id, pname, @params);
            }
            
            public static 
            void GetQueryObjectivARB(GLuint id, GL.Enums.ARB_occlusion_query pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectivARB(id, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetQueryObjectivARB(GLuint id, GL.Enums.ARB_occlusion_query pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectivARB(id, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetQueryObjectuivARB(GLuint id, GL.Enums.ARB_occlusion_query pname, GLuint* @params)
            {
                Delegates.glGetQueryObjectuivARB(id, pname, @params);
            }
            
            public static 
            void GetQueryObjectuivARB(GLuint id, GL.Enums.ARB_occlusion_query pname, GLuint[] @params)
            {
                unsafe
                {
                    fixed (GLuint* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectuivARB(id, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetQueryObjectuivARB(GLuint id, GL.Enums.ARB_occlusion_query pname, out GLuint @params)
            {
                @params = default(GLuint);
                unsafe
                {
                    fixed (GLuint* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectuivARB(id, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            void DeleteObjectARB(GLhandleARB obj)
            {
                Delegates.glDeleteObjectARB(obj);
            }
            
            public static 
            GLhandleARB GetHandleARB(GL.Enums.ARB_shader_objects pname)
            {
                return Delegates.glGetHandleARB(pname);
            }
            
            public static 
            void DetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
            {
                Delegates.glDetachObjectARB(containerObj, attachedObj);
            }
            
            public static 
            GLhandleARB CreateShaderObjectARB(GL.Enums.ARB_shader_objects shaderType)
            {
                return Delegates.glCreateShaderObjectARB(shaderType);
            }
            
            public static 
            unsafe void ShaderSourceARB(GLhandleARB shaderObj, GLsizei count, System.String[] @string, GLint* length)
            {
                Delegates.glShaderSourceARB(shaderObj, count, @string, length);
            }
            
            public static 
            void ShaderSourceARB(GLhandleARB shaderObj, GLsizei count, System.String[] @string, GLint[] length)
            {
                unsafe
                {
                    fixed (GLint* length_ptr = length)
                    {
                        Delegates.glShaderSourceARB(shaderObj, count, @string, length_ptr);
                    }
                }
            }
            
            public static 
            void ShaderSourceARB(GLhandleARB shaderObj, GLsizei count, System.String[] @string, ref GLint length)
            {
                unsafe
                {
                    fixed (GLint* length_ptr = &length)
                    {
                        Delegates.glShaderSourceARB(shaderObj, count, @string, length_ptr);
                    }
                }
            }
            
            public static 
            void CompileShaderARB(GLhandleARB shaderObj)
            {
                Delegates.glCompileShaderARB(shaderObj);
            }
            
            public static 
            GLhandleARB CreateProgramObjectARB()
            {
                return Delegates.glCreateProgramObjectARB();
            }
            
            public static 
            void AttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
            {
                Delegates.glAttachObjectARB(containerObj, obj);
            }
            
            public static 
            void LinkProgramARB(GLhandleARB programObj)
            {
                Delegates.glLinkProgramARB(programObj);
            }
            
            public static 
            void UseProgramObjectARB(GLhandleARB programObj)
            {
                Delegates.glUseProgramObjectARB(programObj);
            }
            
            public static 
            void ValidateProgramARB(GLhandleARB programObj)
            {
                Delegates.glValidateProgramARB(programObj);
            }
            
            public static 
            void Uniform1fARB(GLint location, GLfloat v0)
            {
                Delegates.glUniform1fARB(location, v0);
            }
            
            public static 
            void Uniform2fARB(GLint location, GLfloat v0, GLfloat v1)
            {
                Delegates.glUniform2fARB(location, v0, v1);
            }
            
            public static 
            void Uniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
            {
                Delegates.glUniform3fARB(location, v0, v1, v2);
            }
            
            public static 
            void Uniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
            {
                Delegates.glUniform4fARB(location, v0, v1, v2, v3);
            }
            
            public static 
            void Uniform1iARB(GLint location, GLint v0)
            {
                Delegates.glUniform1iARB(location, v0);
            }
            
            public static 
            void Uniform2iARB(GLint location, GLint v0, GLint v1)
            {
                Delegates.glUniform2iARB(location, v0, v1);
            }
            
            public static 
            void Uniform3iARB(GLint location, GLint v0, GLint v1, GLint v2)
            {
                Delegates.glUniform3iARB(location, v0, v1, v2);
            }
            
            public static 
            void Uniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
            {
                Delegates.glUniform4iARB(location, v0, v1, v2, v3);
            }
            
            public static 
            unsafe void Uniform1fvARB(GLint location, GLsizei count, GLfloat* value)
            {
                Delegates.glUniform1fvARB(location, count, value);
            }
            
            public static 
            void Uniform1fvARB(GLint location, GLsizei count, GLfloat[] value)
            {
                unsafe
                {
                    fixed (GLfloat* value_ptr = value)
                    {
                        Delegates.glUniform1fvARB(location, count, value_ptr);
                    }
                }
            }
            
            public static 
            void Uniform1fvARB(GLint location, GLsizei count, ref GLfloat value)
            {
                unsafe
                {
                    fixed (GLfloat* value_ptr = &value)
                    {
                        Delegates.glUniform1fvARB(location, count, value_ptr);
                    }
                }
            }
            
            public static 
            unsafe void Uniform2fvARB(GLint location, GLsizei count, GLfloat* value)
            {
                Delegates.glUniform2fvARB(location, count, value);
            }
            
            public static 
            void Uniform2fvARB(GLint location, GLsizei count, GLfloat[] value)
            {
                unsafe
                {
                    fixed (GLfloat* value_ptr = value)
                    {
                        Delegates.glUniform2fvARB(location, count, value_ptr);
                    }
                }
            }
            
            public static 
            void Uniform2fvARB(GLint location, GLsizei count, ref GLfloat value)
            {
                unsafe
                {
                    fixed (GLfloat* value_ptr = &value)
                    {
                        Delegates.glUniform2fvARB(location, count, value_ptr);
                    }
                }
            }
            
            public static 
            unsafe void Uniform3fvARB(GLint location, GLsizei count, GLfloat* value)
            {
                Delegates.glUniform3fvARB(location, count, value);
            }
            
            public static 
            void Uniform3fvARB(GLint location, GLsizei count, GLfloat[] value)
            {
                unsafe
                {
                    fixed (GLfloat* value_ptr = value)
                    {
                        Delegates.glUniform3fvARB(location, count, value_ptr);
                    }
                }
            }
            
            public static 
            void Uniform3fvARB(GLint location, GLsizei count, ref GLfloat value)
            {
                unsafe
                {
                    fixed (GLfloat* value_ptr = &value)
                    {
                        Delegates.glUniform3fvARB(location, count, value_ptr);
                    }
                }
            }
            
            public static 
            unsafe void Uniform4fvARB(GLint location, GLsizei count, GLfloat* value)
            {
                Delegates.glUniform4fvARB(location, count, value);
            }
            
            public static 
            void Uniform4fvARB(GLint location, GLsizei count, GLfloat[] value)
            {
                unsafe
                {
                    fixed (GLfloat* value_ptr = value)
                    {
                        Delegates.glUniform4fvARB(location, count, value_ptr);
                    }
                }
            }
            
            public static 
            void Uniform4fvARB(GLint location, GLsizei count, ref GLfloat value)
            {
                unsafe
                {
                    fixed (GLfloat* value_ptr = &value)
                    {
                        Delegates.glUniform4fvARB(location, count, value_ptr);
                    }
                }
            }
            
            public static 
            unsafe void Uniform1ivARB(GLint location, GLsizei count, GLint* value)
            {
                Delegates.glUniform1ivARB(location, count, value);
            }
            
            public static 
            void Uniform1ivARB(GLint location, GLsizei count, GLint[] value)
            {
                unsafe
                {
                    fixed (GLint* value_ptr = value)
                    {
                        Delegates.glUniform1ivARB(location, count, value_ptr);
                    }
                }
            }
            
            public static 
            void Uniform1ivARB(GLint location, GLsizei count, ref GLint value)
            {
                unsafe
                {
                    fixed (GLint* value_ptr = &value)
                    {
                        Delegates.glUniform1ivARB(location, count, value_ptr);
                    }
                }
            }
            
            public static 
            unsafe void Uniform2ivARB(GLint location, GLsizei count, GLint* value)
            {
                Delegates.glUniform2ivARB(location, count, value);
            }
            
            public static 
            void Uniform2ivARB(GLint location, GLsizei count, GLint[] value)
            {
                unsafe
                {
                    fixed (GLint* value_ptr = value)
                    {
                        Delegates.glUniform2ivARB(location, count, value_ptr);
                    }
                }
            }
            
            public static 
            void Uniform2ivARB(GLint location, GLsizei count, ref GLint value)
            {
                unsafe
                {
                    fixed (GLint* value_ptr = &value)
                    {
                        Delegates.glUniform2ivARB(location, count, value_ptr);
                    }
                }
            }
            
            public static 
            unsafe void Uniform3ivARB(GLint location, GLsizei count, GLint* value)
            {
                Delegates.glUniform3ivARB(location, count, value);
            }
            
            public static 
            void Uniform3ivARB(GLint location, GLsizei count, GLint[] value)
            {
                unsafe
                {
                    fixed (GLint* value_ptr = value)
                    {
                        Delegates.glUniform3ivARB(location, count, value_ptr);
                    }
                }
            }
            
            public static 
            void Uniform3ivARB(GLint location, GLsizei count, ref GLint value)
            {
                unsafe
                {
                    fixed (GLint* value_ptr = &value)
                    {
                        Delegates.glUniform3ivARB(location, count, value_ptr);
                    }
                }
            }
            
            public static 
            unsafe void Uniform4ivARB(GLint location, GLsizei count, GLint* value)
            {
                Delegates.glUniform4ivARB(location, count, value);
            }
            
            public static 
            void Uniform4ivARB(GLint location, GLsizei count, GLint[] value)
            {
                unsafe
                {
                    fixed (GLint* value_ptr = value)
                    {
                        Delegates.glUniform4ivARB(location, count, value_ptr);
                    }
                }
            }
            
            public static 
            void Uniform4ivARB(GLint location, GLsizei count, ref GLint value)
            {
                unsafe
                {
                    fixed (GLint* value_ptr = &value)
                    {
                        Delegates.glUniform4ivARB(location, count, value_ptr);
                    }
                }
            }
            
            public static 
            unsafe void UniformMatrix2fvARB(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat* value)
            {
                Delegates.glUniformMatrix2fvARB(location, count, transpose, value);
            }
            
            public static 
            void UniformMatrix2fvARB(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat[] value)
            {
                unsafe
                {
                    fixed (GLfloat* value_ptr = value)
                    {
                        Delegates.glUniformMatrix2fvARB(location, count, transpose, value_ptr);
                    }
                }
            }
            
            public static 
            void UniformMatrix2fvARB(GLint location, GLsizei count, GL.Enums.Boolean transpose, ref GLfloat value)
            {
                unsafe
                {
                    fixed (GLfloat* value_ptr = &value)
                    {
                        Delegates.glUniformMatrix2fvARB(location, count, transpose, value_ptr);
                    }
                }
            }
            
            public static 
            unsafe void UniformMatrix3fvARB(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat* value)
            {
                Delegates.glUniformMatrix3fvARB(location, count, transpose, value);
            }
            
            public static 
            void UniformMatrix3fvARB(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat[] value)
            {
                unsafe
                {
                    fixed (GLfloat* value_ptr = value)
                    {
                        Delegates.glUniformMatrix3fvARB(location, count, transpose, value_ptr);
                    }
                }
            }
            
            public static 
            void UniformMatrix3fvARB(GLint location, GLsizei count, GL.Enums.Boolean transpose, ref GLfloat value)
            {
                unsafe
                {
                    fixed (GLfloat* value_ptr = &value)
                    {
                        Delegates.glUniformMatrix3fvARB(location, count, transpose, value_ptr);
                    }
                }
            }
            
            public static 
            unsafe void UniformMatrix4fvARB(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat* value)
            {
                Delegates.glUniformMatrix4fvARB(location, count, transpose, value);
            }
            
            public static 
            void UniformMatrix4fvARB(GLint location, GLsizei count, GL.Enums.Boolean transpose, GLfloat[] value)
            {
                unsafe
                {
                    fixed (GLfloat* value_ptr = value)
                    {
                        Delegates.glUniformMatrix4fvARB(location, count, transpose, value_ptr);
                    }
                }
            }
            
            public static 
            void UniformMatrix4fvARB(GLint location, GLsizei count, GL.Enums.Boolean transpose, ref GLfloat value)
            {
                unsafe
                {
                    fixed (GLfloat* value_ptr = &value)
                    {
                        Delegates.glUniformMatrix4fvARB(location, count, transpose, value_ptr);
                    }
                }
            }
            
            public static 
            unsafe void GetObjectParameterfvARB(GLhandleARB obj, GL.Enums.ARB_shader_objects pname, GLfloat* @params)
            {
                Delegates.glGetObjectParameterfvARB(obj, pname, @params);
            }
            
            public static 
            void GetObjectParameterfvARB(GLhandleARB obj, GL.Enums.ARB_shader_objects pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetObjectParameterfvARB(obj, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetObjectParameterfvARB(GLhandleARB obj, GL.Enums.ARB_shader_objects pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectParameterfvARB(obj, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetObjectParameterivARB(GLhandleARB obj, GL.Enums.ARB_shader_objects pname, GLint* @params)
            {
                Delegates.glGetObjectParameterivARB(obj, pname, @params);
            }
            
            public static 
            void GetObjectParameterivARB(GLhandleARB obj, GL.Enums.ARB_shader_objects pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetObjectParameterivARB(obj, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetObjectParameterivARB(GLhandleARB obj, GL.Enums.ARB_shader_objects pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectParameterivARB(obj, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei* length, System.Text.StringBuilder infoLog)
            {
                Delegates.glGetInfoLogARB(obj, maxLength, length, infoLog);
            }
            
            public static 
            void GetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei[] length, System.Text.StringBuilder infoLog)
            {
                infoLog = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = length)
                    {
                        Delegates.glGetInfoLogARB(obj, maxLength, length_ptr, infoLog);
                    }
                }
            }
            
            public static 
            void GetInfoLogARB(GLhandleARB obj, GLsizei maxLength, out GLsizei length, System.Text.StringBuilder infoLog)
            {
                length = default(GLsizei);
                infoLog = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = &length)
                    {
                        Delegates.glGetInfoLogARB(obj, maxLength, length_ptr, infoLog);
                        length = *length_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, GLhandleARB* obj)
            {
                Delegates.glGetAttachedObjectsARB(containerObj, maxCount, count, obj);
            }
            
            public static 
            unsafe void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, GLhandleARB[] obj)
            {
                count = default(GLsizei*);
                    fixed (GLhandleARB* obj_ptr = obj)
                    {
                        Delegates.glGetAttachedObjectsARB(containerObj, maxCount, count, obj_ptr);
                    }
            }
            
            public static 
            unsafe void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, out GLhandleARB obj)
            {
                count = default(GLsizei*);
                obj = default(GLhandleARB);
                    fixed (GLhandleARB* obj_ptr = &obj)
                    {
                        Delegates.glGetAttachedObjectsARB(containerObj, maxCount, count, obj_ptr);
                        obj = *obj_ptr;
                    }
            }
            
            public static 
            unsafe void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, GLhandleARB* obj)
            {
                obj = default(GLhandleARB*);
                    fixed (GLsizei* count_ptr = count)
                    {
                        Delegates.glGetAttachedObjectsARB(containerObj, maxCount, count_ptr, obj);
                    }
            }
            
            public static 
            void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, GLhandleARB[] obj)
            {
                unsafe
                {
                    fixed (GLsizei* count_ptr = count)
                    fixed (GLhandleARB* obj_ptr = obj)
                    {
                        Delegates.glGetAttachedObjectsARB(containerObj, maxCount, count_ptr, obj_ptr);
                    }
                }
            }
            
            public static 
            void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, out GLhandleARB obj)
            {
                obj = default(GLhandleARB);
                unsafe
                {
                    fixed (GLsizei* count_ptr = count)
                    fixed (GLhandleARB* obj_ptr = &obj)
                    {
                        Delegates.glGetAttachedObjectsARB(containerObj, maxCount, count_ptr, obj_ptr);
                        obj = *obj_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, out GLsizei count, GLhandleARB* obj)
            {
                count = default(GLsizei);
                obj = default(GLhandleARB*);
                    fixed (GLsizei* count_ptr = &count)
                    {
                        Delegates.glGetAttachedObjectsARB(containerObj, maxCount, count_ptr, obj);
                        count = *count_ptr;
                    }
            }
            
            public static 
            void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, out GLsizei count, GLhandleARB[] obj)
            {
                count = default(GLsizei);
                unsafe
                {
                    fixed (GLsizei* count_ptr = &count)
                    fixed (GLhandleARB* obj_ptr = obj)
                    {
                        Delegates.glGetAttachedObjectsARB(containerObj, maxCount, count_ptr, obj_ptr);
                        count = *count_ptr;
                    }
                }
            }
            
            public static 
            void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, out GLsizei count, out GLhandleARB obj)
            {
                count = default(GLsizei);
                obj = default(GLhandleARB);
                unsafe
                {
                    fixed (GLsizei* count_ptr = &count)
                    fixed (GLhandleARB* obj_ptr = &obj)
                    {
                        Delegates.glGetAttachedObjectsARB(containerObj, maxCount, count_ptr, obj_ptr);
                        count = *count_ptr;
                        obj = *obj_ptr;
                    }
                }
            }
            
            public static 
            unsafe GLint GetUniformLocationARB(GLhandleARB programObj, System.String name)
            {
                return Delegates.glGetUniformLocationARB(programObj, name);
            }
            
            public static 
            unsafe void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GL.Enums.ARB_shader_objects* type, System.Text.StringBuilder name)
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name);
            }
            
            public static 
            unsafe void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GL.Enums.ARB_shader_objects[] type, System.Text.StringBuilder name)
            {
                length = default(GLsizei*);
                size = default(GLint*);
                name = default(System.Text.StringBuilder);
                    fixed (GL.Enums.ARB_shader_objects* type_ptr = type)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length, size, type_ptr, name);
                    }
            }
            
            public static 
            unsafe void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, out GL.Enums.ARB_shader_objects type, System.Text.StringBuilder name)
            {
                length = default(GLsizei*);
                size = default(GLint*);
                type = default(GL.Enums.ARB_shader_objects);
                name = default(System.Text.StringBuilder);
                    fixed (GL.Enums.ARB_shader_objects* type_ptr = &type)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length, size, type_ptr, name);
                        type = *type_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint[] size, GL.Enums.ARB_shader_objects* type, System.Text.StringBuilder name)
            {
                length = default(GLsizei*);
                type = default(GL.Enums.ARB_shader_objects*);
                name = default(System.Text.StringBuilder);
                    fixed (GLint* size_ptr = size)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length, size_ptr, type, name);
                    }
            }
            
            public static 
            unsafe void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint[] size, GL.Enums.ARB_shader_objects[] type, System.Text.StringBuilder name)
            {
                length = default(GLsizei*);
                name = default(System.Text.StringBuilder);
                    fixed (GLint* size_ptr = size)
                    fixed (GL.Enums.ARB_shader_objects* type_ptr = type)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length, size_ptr, type_ptr, name);
                    }
            }
            
            public static 
            unsafe void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint[] size, out GL.Enums.ARB_shader_objects type, System.Text.StringBuilder name)
            {
                length = default(GLsizei*);
                type = default(GL.Enums.ARB_shader_objects);
                name = default(System.Text.StringBuilder);
                    fixed (GLint* size_ptr = size)
                    fixed (GL.Enums.ARB_shader_objects* type_ptr = &type)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length, size_ptr, type_ptr, name);
                        type = *type_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, out GLint size, GL.Enums.ARB_shader_objects* type, System.Text.StringBuilder name)
            {
                length = default(GLsizei*);
                size = default(GLint);
                type = default(GL.Enums.ARB_shader_objects*);
                name = default(System.Text.StringBuilder);
                    fixed (GLint* size_ptr = &size)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length, size_ptr, type, name);
                        size = *size_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, out GLint size, GL.Enums.ARB_shader_objects[] type, System.Text.StringBuilder name)
            {
                length = default(GLsizei*);
                size = default(GLint);
                name = default(System.Text.StringBuilder);
                    fixed (GLint* size_ptr = &size)
                    fixed (GL.Enums.ARB_shader_objects* type_ptr = type)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length, size_ptr, type_ptr, name);
                        size = *size_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, out GLint size, out GL.Enums.ARB_shader_objects type, System.Text.StringBuilder name)
            {
                length = default(GLsizei*);
                size = default(GLint);
                type = default(GL.Enums.ARB_shader_objects);
                name = default(System.Text.StringBuilder);
                    fixed (GLint* size_ptr = &size)
                    fixed (GL.Enums.ARB_shader_objects* type_ptr = &type)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length, size_ptr, type_ptr, name);
                        size = *size_ptr;
                        type = *type_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint* size, GL.Enums.ARB_shader_objects* type, System.Text.StringBuilder name)
            {
                size = default(GLint*);
                type = default(GL.Enums.ARB_shader_objects*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = length)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length_ptr, size, type, name);
                    }
            }
            
            public static 
            unsafe void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint* size, GL.Enums.ARB_shader_objects[] type, System.Text.StringBuilder name)
            {
                size = default(GLint*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = length)
                    fixed (GL.Enums.ARB_shader_objects* type_ptr = type)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length_ptr, size, type_ptr, name);
                    }
            }
            
            public static 
            unsafe void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint* size, out GL.Enums.ARB_shader_objects type, System.Text.StringBuilder name)
            {
                size = default(GLint*);
                type = default(GL.Enums.ARB_shader_objects);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = length)
                    fixed (GL.Enums.ARB_shader_objects* type_ptr = &type)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length_ptr, size, type_ptr, name);
                        type = *type_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, GL.Enums.ARB_shader_objects* type, System.Text.StringBuilder name)
            {
                type = default(GL.Enums.ARB_shader_objects*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = length)
                    fixed (GLint* size_ptr = size)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length_ptr, size_ptr, type, name);
                    }
            }
            
            public static 
            void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, GL.Enums.ARB_shader_objects[] type, System.Text.StringBuilder name)
            {
                name = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = length)
                    fixed (GLint* size_ptr = size)
                    fixed (GL.Enums.ARB_shader_objects* type_ptr = type)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name);
                    }
                }
            }
            
            public static 
            void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, out GL.Enums.ARB_shader_objects type, System.Text.StringBuilder name)
            {
                type = default(GL.Enums.ARB_shader_objects);
                name = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = length)
                    fixed (GLint* size_ptr = size)
                    fixed (GL.Enums.ARB_shader_objects* type_ptr = &type)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name);
                        type = *type_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, out GLint size, GL.Enums.ARB_shader_objects* type, System.Text.StringBuilder name)
            {
                size = default(GLint);
                type = default(GL.Enums.ARB_shader_objects*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = length)
                    fixed (GLint* size_ptr = &size)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length_ptr, size_ptr, type, name);
                        size = *size_ptr;
                    }
            }
            
            public static 
            void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, out GLint size, GL.Enums.ARB_shader_objects[] type, System.Text.StringBuilder name)
            {
                size = default(GLint);
                name = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = length)
                    fixed (GLint* size_ptr = &size)
                    fixed (GL.Enums.ARB_shader_objects* type_ptr = type)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name);
                        size = *size_ptr;
                    }
                }
            }
            
            public static 
            void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, out GLint size, out GL.Enums.ARB_shader_objects type, System.Text.StringBuilder name)
            {
                size = default(GLint);
                type = default(GL.Enums.ARB_shader_objects);
                name = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = length)
                    fixed (GLint* size_ptr = &size)
                    fixed (GL.Enums.ARB_shader_objects* type_ptr = &type)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name);
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, GLint* size, GL.Enums.ARB_shader_objects* type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                size = default(GLint*);
                type = default(GL.Enums.ARB_shader_objects*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = &length)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length_ptr, size, type, name);
                        length = *length_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, GLint* size, GL.Enums.ARB_shader_objects[] type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                size = default(GLint*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = &length)
                    fixed (GL.Enums.ARB_shader_objects* type_ptr = type)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length_ptr, size, type_ptr, name);
                        length = *length_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, GLint* size, out GL.Enums.ARB_shader_objects type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                size = default(GLint*);
                type = default(GL.Enums.ARB_shader_objects);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = &length)
                    fixed (GL.Enums.ARB_shader_objects* type_ptr = &type)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length_ptr, size, type_ptr, name);
                        length = *length_ptr;
                        type = *type_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, GLint[] size, GL.Enums.ARB_shader_objects* type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                type = default(GL.Enums.ARB_shader_objects*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = &length)
                    fixed (GLint* size_ptr = size)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length_ptr, size_ptr, type, name);
                        length = *length_ptr;
                    }
            }
            
            public static 
            void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, GLint[] size, GL.Enums.ARB_shader_objects[] type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                name = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = &length)
                    fixed (GLint* size_ptr = size)
                    fixed (GL.Enums.ARB_shader_objects* type_ptr = type)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name);
                        length = *length_ptr;
                    }
                }
            }
            
            public static 
            void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, GLint[] size, out GL.Enums.ARB_shader_objects type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                type = default(GL.Enums.ARB_shader_objects);
                name = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = &length)
                    fixed (GLint* size_ptr = size)
                    fixed (GL.Enums.ARB_shader_objects* type_ptr = &type)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name);
                        length = *length_ptr;
                        type = *type_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, out GLint size, GL.Enums.ARB_shader_objects* type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                size = default(GLint);
                type = default(GL.Enums.ARB_shader_objects*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = &length)
                    fixed (GLint* size_ptr = &size)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length_ptr, size_ptr, type, name);
                        length = *length_ptr;
                        size = *size_ptr;
                    }
            }
            
            public static 
            void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, out GLint size, GL.Enums.ARB_shader_objects[] type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                size = default(GLint);
                name = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = &length)
                    fixed (GLint* size_ptr = &size)
                    fixed (GL.Enums.ARB_shader_objects* type_ptr = type)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name);
                        length = *length_ptr;
                        size = *size_ptr;
                    }
                }
            }
            
            public static 
            void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, out GLint size, out GL.Enums.ARB_shader_objects type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                size = default(GLint);
                type = default(GL.Enums.ARB_shader_objects);
                name = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = &length)
                    fixed (GLint* size_ptr = &size)
                    fixed (GL.Enums.ARB_shader_objects* type_ptr = &type)
                    {
                        Delegates.glGetActiveUniformARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat* @params)
            {
                Delegates.glGetUniformfvARB(programObj, location, @params);
            }
            
            public static 
            void GetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetUniformfvARB(programObj, location, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetUniformfvARB(GLhandleARB programObj, GLint location, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformfvARB(programObj, location, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetUniformivARB(GLhandleARB programObj, GLint location, GLint* @params)
            {
                Delegates.glGetUniformivARB(programObj, location, @params);
            }
            
            public static 
            void GetUniformivARB(GLhandleARB programObj, GLint location, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetUniformivARB(programObj, location, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetUniformivARB(GLhandleARB programObj, GLint location, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformivARB(programObj, location, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei* length, System.Text.StringBuilder[] source)
            {
                Delegates.glGetShaderSourceARB(obj, maxLength, length, source);
            }
            
            public static 
            void GetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei[] length, System.Text.StringBuilder[] source)
            {
                source = default(System.Text.StringBuilder[]);
                unsafe
                {
                    fixed (GLsizei* length_ptr = length)
                    {
                        Delegates.glGetShaderSourceARB(obj, maxLength, length_ptr, source);
                    }
                }
            }
            
            public static 
            void GetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, out GLsizei length, System.Text.StringBuilder[] source)
            {
                length = default(GLsizei);
                source = default(System.Text.StringBuilder[]);
                unsafe
                {
                    fixed (GLsizei* length_ptr = &length)
                    {
                        Delegates.glGetShaderSourceARB(obj, maxLength, length_ptr, source);
                        length = *length_ptr;
                    }
                }
            }
            
            public static 
            unsafe void BindAttribLocationARB(GLhandleARB programObj, GLuint index, System.String name)
            {
                Delegates.glBindAttribLocationARB(programObj, index, name);
            }
            
            public static 
            unsafe void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GL.Enums.ARB_vertex_shader* type, System.Text.StringBuilder name)
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name);
            }
            
            public static 
            unsafe void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GL.Enums.ARB_vertex_shader[] type, System.Text.StringBuilder name)
            {
                length = default(GLsizei*);
                size = default(GLint*);
                name = default(System.Text.StringBuilder);
                    fixed (GL.Enums.ARB_vertex_shader* type_ptr = type)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length, size, type_ptr, name);
                    }
            }
            
            public static 
            unsafe void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, out GL.Enums.ARB_vertex_shader type, System.Text.StringBuilder name)
            {
                length = default(GLsizei*);
                size = default(GLint*);
                type = default(GL.Enums.ARB_vertex_shader);
                name = default(System.Text.StringBuilder);
                    fixed (GL.Enums.ARB_vertex_shader* type_ptr = &type)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length, size, type_ptr, name);
                        type = *type_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint[] size, GL.Enums.ARB_vertex_shader* type, System.Text.StringBuilder name)
            {
                length = default(GLsizei*);
                type = default(GL.Enums.ARB_vertex_shader*);
                name = default(System.Text.StringBuilder);
                    fixed (GLint* size_ptr = size)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length, size_ptr, type, name);
                    }
            }
            
            public static 
            unsafe void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint[] size, GL.Enums.ARB_vertex_shader[] type, System.Text.StringBuilder name)
            {
                length = default(GLsizei*);
                name = default(System.Text.StringBuilder);
                    fixed (GLint* size_ptr = size)
                    fixed (GL.Enums.ARB_vertex_shader* type_ptr = type)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length, size_ptr, type_ptr, name);
                    }
            }
            
            public static 
            unsafe void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint[] size, out GL.Enums.ARB_vertex_shader type, System.Text.StringBuilder name)
            {
                length = default(GLsizei*);
                type = default(GL.Enums.ARB_vertex_shader);
                name = default(System.Text.StringBuilder);
                    fixed (GLint* size_ptr = size)
                    fixed (GL.Enums.ARB_vertex_shader* type_ptr = &type)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length, size_ptr, type_ptr, name);
                        type = *type_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, out GLint size, GL.Enums.ARB_vertex_shader* type, System.Text.StringBuilder name)
            {
                length = default(GLsizei*);
                size = default(GLint);
                type = default(GL.Enums.ARB_vertex_shader*);
                name = default(System.Text.StringBuilder);
                    fixed (GLint* size_ptr = &size)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length, size_ptr, type, name);
                        size = *size_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, out GLint size, GL.Enums.ARB_vertex_shader[] type, System.Text.StringBuilder name)
            {
                length = default(GLsizei*);
                size = default(GLint);
                name = default(System.Text.StringBuilder);
                    fixed (GLint* size_ptr = &size)
                    fixed (GL.Enums.ARB_vertex_shader* type_ptr = type)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length, size_ptr, type_ptr, name);
                        size = *size_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, out GLint size, out GL.Enums.ARB_vertex_shader type, System.Text.StringBuilder name)
            {
                length = default(GLsizei*);
                size = default(GLint);
                type = default(GL.Enums.ARB_vertex_shader);
                name = default(System.Text.StringBuilder);
                    fixed (GLint* size_ptr = &size)
                    fixed (GL.Enums.ARB_vertex_shader* type_ptr = &type)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length, size_ptr, type_ptr, name);
                        size = *size_ptr;
                        type = *type_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint* size, GL.Enums.ARB_vertex_shader* type, System.Text.StringBuilder name)
            {
                size = default(GLint*);
                type = default(GL.Enums.ARB_vertex_shader*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = length)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length_ptr, size, type, name);
                    }
            }
            
            public static 
            unsafe void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint* size, GL.Enums.ARB_vertex_shader[] type, System.Text.StringBuilder name)
            {
                size = default(GLint*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = length)
                    fixed (GL.Enums.ARB_vertex_shader* type_ptr = type)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length_ptr, size, type_ptr, name);
                    }
            }
            
            public static 
            unsafe void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint* size, out GL.Enums.ARB_vertex_shader type, System.Text.StringBuilder name)
            {
                size = default(GLint*);
                type = default(GL.Enums.ARB_vertex_shader);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = length)
                    fixed (GL.Enums.ARB_vertex_shader* type_ptr = &type)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length_ptr, size, type_ptr, name);
                        type = *type_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, GL.Enums.ARB_vertex_shader* type, System.Text.StringBuilder name)
            {
                type = default(GL.Enums.ARB_vertex_shader*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = length)
                    fixed (GLint* size_ptr = size)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length_ptr, size_ptr, type, name);
                    }
            }
            
            public static 
            void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, GL.Enums.ARB_vertex_shader[] type, System.Text.StringBuilder name)
            {
                name = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = length)
                    fixed (GLint* size_ptr = size)
                    fixed (GL.Enums.ARB_vertex_shader* type_ptr = type)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name);
                    }
                }
            }
            
            public static 
            void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, out GL.Enums.ARB_vertex_shader type, System.Text.StringBuilder name)
            {
                type = default(GL.Enums.ARB_vertex_shader);
                name = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = length)
                    fixed (GLint* size_ptr = size)
                    fixed (GL.Enums.ARB_vertex_shader* type_ptr = &type)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name);
                        type = *type_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, out GLint size, GL.Enums.ARB_vertex_shader* type, System.Text.StringBuilder name)
            {
                size = default(GLint);
                type = default(GL.Enums.ARB_vertex_shader*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = length)
                    fixed (GLint* size_ptr = &size)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length_ptr, size_ptr, type, name);
                        size = *size_ptr;
                    }
            }
            
            public static 
            void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, out GLint size, GL.Enums.ARB_vertex_shader[] type, System.Text.StringBuilder name)
            {
                size = default(GLint);
                name = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = length)
                    fixed (GLint* size_ptr = &size)
                    fixed (GL.Enums.ARB_vertex_shader* type_ptr = type)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name);
                        size = *size_ptr;
                    }
                }
            }
            
            public static 
            void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, out GLint size, out GL.Enums.ARB_vertex_shader type, System.Text.StringBuilder name)
            {
                size = default(GLint);
                type = default(GL.Enums.ARB_vertex_shader);
                name = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = length)
                    fixed (GLint* size_ptr = &size)
                    fixed (GL.Enums.ARB_vertex_shader* type_ptr = &type)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name);
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, GLint* size, GL.Enums.ARB_vertex_shader* type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                size = default(GLint*);
                type = default(GL.Enums.ARB_vertex_shader*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = &length)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length_ptr, size, type, name);
                        length = *length_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, GLint* size, GL.Enums.ARB_vertex_shader[] type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                size = default(GLint*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = &length)
                    fixed (GL.Enums.ARB_vertex_shader* type_ptr = type)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length_ptr, size, type_ptr, name);
                        length = *length_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, GLint* size, out GL.Enums.ARB_vertex_shader type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                size = default(GLint*);
                type = default(GL.Enums.ARB_vertex_shader);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = &length)
                    fixed (GL.Enums.ARB_vertex_shader* type_ptr = &type)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length_ptr, size, type_ptr, name);
                        length = *length_ptr;
                        type = *type_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, GLint[] size, GL.Enums.ARB_vertex_shader* type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                type = default(GL.Enums.ARB_vertex_shader*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = &length)
                    fixed (GLint* size_ptr = size)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length_ptr, size_ptr, type, name);
                        length = *length_ptr;
                    }
            }
            
            public static 
            void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, GLint[] size, GL.Enums.ARB_vertex_shader[] type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                name = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = &length)
                    fixed (GLint* size_ptr = size)
                    fixed (GL.Enums.ARB_vertex_shader* type_ptr = type)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name);
                        length = *length_ptr;
                    }
                }
            }
            
            public static 
            void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, GLint[] size, out GL.Enums.ARB_vertex_shader type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                type = default(GL.Enums.ARB_vertex_shader);
                name = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = &length)
                    fixed (GLint* size_ptr = size)
                    fixed (GL.Enums.ARB_vertex_shader* type_ptr = &type)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name);
                        length = *length_ptr;
                        type = *type_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, out GLint size, GL.Enums.ARB_vertex_shader* type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                size = default(GLint);
                type = default(GL.Enums.ARB_vertex_shader*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = &length)
                    fixed (GLint* size_ptr = &size)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length_ptr, size_ptr, type, name);
                        length = *length_ptr;
                        size = *size_ptr;
                    }
            }
            
            public static 
            void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, out GLint size, GL.Enums.ARB_vertex_shader[] type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                size = default(GLint);
                name = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = &length)
                    fixed (GLint* size_ptr = &size)
                    fixed (GL.Enums.ARB_vertex_shader* type_ptr = type)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name);
                        length = *length_ptr;
                        size = *size_ptr;
                    }
                }
            }
            
            public static 
            void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, out GLint size, out GL.Enums.ARB_vertex_shader type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                size = default(GLint);
                type = default(GL.Enums.ARB_vertex_shader);
                name = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = &length)
                    fixed (GLint* size_ptr = &size)
                    fixed (GL.Enums.ARB_vertex_shader* type_ptr = &type)
                    {
                        Delegates.glGetActiveAttribARB(programObj, index, maxLength, length_ptr, size_ptr, type_ptr, name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
            }
            
            public static 
            unsafe GLint GetAttribLocationARB(GLhandleARB programObj, System.String name)
            {
                return Delegates.glGetAttribLocationARB(programObj, name);
            }
            
            public static 
            unsafe void DrawBuffersARB(GLsizei n, GL.Enums.ARB_draw_buffers* bufs)
            {
                Delegates.glDrawBuffersARB(n, bufs);
            }
            
            public static 
            void DrawBuffersARB(GLsizei n, GL.Enums.ARB_draw_buffers[] bufs)
            {
                unsafe
                {
                    fixed (GL.Enums.ARB_draw_buffers* bufs_ptr = bufs)
                    {
                        Delegates.glDrawBuffersARB(n, bufs_ptr);
                    }
                }
            }
            
            public static 
            void DrawBuffersARB(GLsizei n, ref GL.Enums.ARB_draw_buffers bufs)
            {
                unsafe
                {
                    fixed (GL.Enums.ARB_draw_buffers* bufs_ptr = &bufs)
                    {
                        Delegates.glDrawBuffersARB(n, bufs_ptr);
                    }
                }
            }
            
            public static 
            void ClampColorARB(GL.Enums.ARB_color_buffer_float target, GL.Enums.ARB_color_buffer_float clamp)
            {
                Delegates.glClampColorARB(target, clamp);
            }
            
        }

        public static class EXT
        {
            public static 
            void BlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
            {
                Delegates.glBlendColorEXT(red, green, blue, alpha);
            }
            
            public static 
            void PolygonOffsetEXT(GLfloat factor, GLfloat bias)
            {
                Delegates.glPolygonOffsetEXT(factor, bias);
            }
            
            public static 
            unsafe void TexImage3DEXT(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels)
            {
                Delegates.glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels);
            }
            
            public static 
            void TexImage3DEXT(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object pixels)
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, (void*)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void TexSubImage3DEXT(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels)
            {
                Delegates.glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
            }
            
            public static 
            void TexSubImage3DEXT(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object pixels)
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, (void*)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void TexSubImage1DEXT(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels)
            {
                Delegates.glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels);
            }
            
            public static 
            void TexSubImage1DEXT(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLsizei width, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object pixels)
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glTexSubImage1DEXT(target, level, xoffset, width, format, type, (void*)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void TexSubImage2DEXT(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels)
            {
                Delegates.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels);
            }
            
            public static 
            void TexSubImage2DEXT(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object pixels)
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, (void*)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }
            
            public static 
            void CopyTexImage1DEXT(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLint border)
            {
                Delegates.glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border);
            }
            
            public static 
            void CopyTexImage2DEXT(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
            {
                Delegates.glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);
            }
            
            public static 
            void CopyTexSubImage1DEXT(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
            {
                Delegates.glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width);
            }
            
            public static 
            void CopyTexSubImage2DEXT(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
            {
                Delegates.glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);
            }
            
            public static 
            void CopyTexSubImage3DEXT(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
            {
                Delegates.glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height);
            }
            
            public static 
            unsafe void GetHistogramEXT(GL.Enums.HistogramTargetEXT target, GL.Enums.Boolean reset, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* values)
            {
                Delegates.glGetHistogramEXT(target, reset, format, type, values);
            }
            
            public static 
            void GetHistogramEXT(GL.Enums.HistogramTargetEXT target, GL.Enums.Boolean reset, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object values)
            {
                System.Runtime.InteropServices.GCHandle values_ptr = System.Runtime.InteropServices.GCHandle.Alloc(values, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glGetHistogramEXT(target, reset, format, type, (void*)values_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        values_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void GetHistogramParameterfvEXT(GL.Enums.HistogramTargetEXT target, GL.Enums.GetHistogramParameterPNameEXT pname, GLfloat* @params)
            {
                Delegates.glGetHistogramParameterfvEXT(target, pname, @params);
            }
            
            public static 
            void GetHistogramParameterfvEXT(GL.Enums.HistogramTargetEXT target, GL.Enums.GetHistogramParameterPNameEXT pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetHistogramParameterfvEXT(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetHistogramParameterfvEXT(GL.Enums.HistogramTargetEXT target, GL.Enums.GetHistogramParameterPNameEXT pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetHistogramParameterfvEXT(target, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetHistogramParameterivEXT(GL.Enums.HistogramTargetEXT target, GL.Enums.GetHistogramParameterPNameEXT pname, GLint* @params)
            {
                Delegates.glGetHistogramParameterivEXT(target, pname, @params);
            }
            
            public static 
            void GetHistogramParameterivEXT(GL.Enums.HistogramTargetEXT target, GL.Enums.GetHistogramParameterPNameEXT pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetHistogramParameterivEXT(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetHistogramParameterivEXT(GL.Enums.HistogramTargetEXT target, GL.Enums.GetHistogramParameterPNameEXT pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetHistogramParameterivEXT(target, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetMinmaxEXT(GL.Enums.MinmaxTargetEXT target, GL.Enums.Boolean reset, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* values)
            {
                Delegates.glGetMinmaxEXT(target, reset, format, type, values);
            }
            
            public static 
            void GetMinmaxEXT(GL.Enums.MinmaxTargetEXT target, GL.Enums.Boolean reset, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object values)
            {
                System.Runtime.InteropServices.GCHandle values_ptr = System.Runtime.InteropServices.GCHandle.Alloc(values, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glGetMinmaxEXT(target, reset, format, type, (void*)values_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        values_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void GetMinmaxParameterfvEXT(GL.Enums.MinmaxTargetEXT target, GL.Enums.GetMinmaxParameterPNameEXT pname, GLfloat* @params)
            {
                Delegates.glGetMinmaxParameterfvEXT(target, pname, @params);
            }
            
            public static 
            void GetMinmaxParameterfvEXT(GL.Enums.MinmaxTargetEXT target, GL.Enums.GetMinmaxParameterPNameEXT pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetMinmaxParameterfvEXT(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetMinmaxParameterfvEXT(GL.Enums.MinmaxTargetEXT target, GL.Enums.GetMinmaxParameterPNameEXT pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetMinmaxParameterfvEXT(target, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetMinmaxParameterivEXT(GL.Enums.MinmaxTargetEXT target, GL.Enums.GetMinmaxParameterPNameEXT pname, GLint* @params)
            {
                Delegates.glGetMinmaxParameterivEXT(target, pname, @params);
            }
            
            public static 
            void GetMinmaxParameterivEXT(GL.Enums.MinmaxTargetEXT target, GL.Enums.GetMinmaxParameterPNameEXT pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetMinmaxParameterivEXT(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetMinmaxParameterivEXT(GL.Enums.MinmaxTargetEXT target, GL.Enums.GetMinmaxParameterPNameEXT pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetMinmaxParameterivEXT(target, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            void ResetHistogramEXT(GL.Enums.HistogramTargetEXT target)
            {
                Delegates.glResetHistogramEXT(target);
            }
            
            public static 
            void ResetMinmaxEXT(GL.Enums.MinmaxTargetEXT target)
            {
                Delegates.glResetMinmaxEXT(target);
            }
            
            public static 
            unsafe void ConvolutionFilter1DEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* image)
            {
                Delegates.glConvolutionFilter1DEXT(target, internalformat, width, format, type, image);
            }
            
            public static 
            void ConvolutionFilter1DEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object image)
            {
                System.Runtime.InteropServices.GCHandle image_ptr = System.Runtime.InteropServices.GCHandle.Alloc(image, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glConvolutionFilter1DEXT(target, internalformat, width, format, type, (void*)image_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        image_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void ConvolutionFilter2DEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* image)
            {
                Delegates.glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image);
            }
            
            public static 
            void ConvolutionFilter2DEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object image)
            {
                System.Runtime.InteropServices.GCHandle image_ptr = System.Runtime.InteropServices.GCHandle.Alloc(image, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, (void*)image_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        image_ptr.Free();
                    }
                }
            }
            
            public static 
            void ConvolutionParameterfEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.ConvolutionParameterEXT pname, GLfloat @params)
            {
                Delegates.glConvolutionParameterfEXT(target, pname, @params);
            }
            
            public static 
            unsafe void ConvolutionParameterfvEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.ConvolutionParameterEXT pname, GLfloat* @params)
            {
                Delegates.glConvolutionParameterfvEXT(target, pname, @params);
            }
            
            public static 
            void ConvolutionParameterfvEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.ConvolutionParameterEXT pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glConvolutionParameterfvEXT(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void ConvolutionParameterfvEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.ConvolutionParameterEXT pname, ref GLfloat @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glConvolutionParameterfvEXT(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void ConvolutionParameteriEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.ConvolutionParameterEXT pname, GLint @params)
            {
                Delegates.glConvolutionParameteriEXT(target, pname, @params);
            }
            
            public static 
            unsafe void ConvolutionParameterivEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.ConvolutionParameterEXT pname, GLint* @params)
            {
                Delegates.glConvolutionParameterivEXT(target, pname, @params);
            }
            
            public static 
            void ConvolutionParameterivEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.ConvolutionParameterEXT pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glConvolutionParameterivEXT(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void ConvolutionParameterivEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.ConvolutionParameterEXT pname, ref GLint @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glConvolutionParameterivEXT(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void CopyConvolutionFilter1DEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width)
            {
                Delegates.glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width);
            }
            
            public static 
            void CopyConvolutionFilter2DEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
            {
                Delegates.glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height);
            }
            
            public static 
            unsafe void GetConvolutionFilterEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* image)
            {
                Delegates.glGetConvolutionFilterEXT(target, format, type, image);
            }
            
            public static 
            void GetConvolutionFilterEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object image)
            {
                System.Runtime.InteropServices.GCHandle image_ptr = System.Runtime.InteropServices.GCHandle.Alloc(image, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glGetConvolutionFilterEXT(target, format, type, (void*)image_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        image_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void GetConvolutionParameterfvEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.ConvolutionParameterEXT pname, GLfloat* @params)
            {
                Delegates.glGetConvolutionParameterfvEXT(target, pname, @params);
            }
            
            public static 
            void GetConvolutionParameterfvEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.ConvolutionParameterEXT pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetConvolutionParameterfvEXT(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetConvolutionParameterfvEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.ConvolutionParameterEXT pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetConvolutionParameterfvEXT(target, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetConvolutionParameterivEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.ConvolutionParameterEXT pname, GLint* @params)
            {
                Delegates.glGetConvolutionParameterivEXT(target, pname, @params);
            }
            
            public static 
            void GetConvolutionParameterivEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.ConvolutionParameterEXT pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetConvolutionParameterivEXT(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetConvolutionParameterivEXT(GL.Enums.ConvolutionTargetEXT target, GL.Enums.ConvolutionParameterEXT pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetConvolutionParameterivEXT(target, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetSeparableFilterEXT(GL.Enums.SeparableTargetEXT target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* row, void* column, void* span)
            {
                Delegates.glGetSeparableFilterEXT(target, format, type, row, column, span);
            }
            
            public static 
            unsafe void GetSeparableFilterEXT(GL.Enums.SeparableTargetEXT target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* row, void* column, object span)
            {
                row = default(void*);
                column = default(void*);
                System.Runtime.InteropServices.GCHandle span_ptr = System.Runtime.InteropServices.GCHandle.Alloc(span, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetSeparableFilterEXT(target, format, type, row, column, (void*)span_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        span_ptr.Free();
                    }
            }
            
            public static 
            unsafe void GetSeparableFilterEXT(GL.Enums.SeparableTargetEXT target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* row, object column, void* span)
            {
                row = default(void*);
                span = default(void*);
                System.Runtime.InteropServices.GCHandle column_ptr = System.Runtime.InteropServices.GCHandle.Alloc(column, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetSeparableFilterEXT(target, format, type, row, (void*)column_ptr.AddrOfPinnedObject(), span);
                    }
                    finally
                    {
                        column_ptr.Free();
                    }
            }
            
            public static 
            unsafe void GetSeparableFilterEXT(GL.Enums.SeparableTargetEXT target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* row, object column, object span)
            {
                row = default(void*);
                System.Runtime.InteropServices.GCHandle span_ptr = System.Runtime.InteropServices.GCHandle.Alloc(span, System.Runtime.InteropServices.GCHandleType.Pinned);
                System.Runtime.InteropServices.GCHandle column_ptr = System.Runtime.InteropServices.GCHandle.Alloc(column, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetSeparableFilterEXT(target, format, type, row, (void*)column_ptr.AddrOfPinnedObject(), (void*)span_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        column_ptr.Free();
                        span_ptr.Free();
                    }
            }
            
            public static 
            unsafe void GetSeparableFilterEXT(GL.Enums.SeparableTargetEXT target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object row, void* column, void* span)
            {
                column = default(void*);
                span = default(void*);
                System.Runtime.InteropServices.GCHandle row_ptr = System.Runtime.InteropServices.GCHandle.Alloc(row, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetSeparableFilterEXT(target, format, type, (void*)row_ptr.AddrOfPinnedObject(), column, span);
                    }
                    finally
                    {
                        row_ptr.Free();
                    }
            }
            
            public static 
            unsafe void GetSeparableFilterEXT(GL.Enums.SeparableTargetEXT target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object row, void* column, object span)
            {
                column = default(void*);
                System.Runtime.InteropServices.GCHandle span_ptr = System.Runtime.InteropServices.GCHandle.Alloc(span, System.Runtime.InteropServices.GCHandleType.Pinned);
                System.Runtime.InteropServices.GCHandle row_ptr = System.Runtime.InteropServices.GCHandle.Alloc(row, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetSeparableFilterEXT(target, format, type, (void*)row_ptr.AddrOfPinnedObject(), column, (void*)span_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        row_ptr.Free();
                        span_ptr.Free();
                    }
            }
            
            public static 
            unsafe void GetSeparableFilterEXT(GL.Enums.SeparableTargetEXT target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object row, object column, void* span)
            {
                span = default(void*);
                System.Runtime.InteropServices.GCHandle column_ptr = System.Runtime.InteropServices.GCHandle.Alloc(column, System.Runtime.InteropServices.GCHandleType.Pinned);
                System.Runtime.InteropServices.GCHandle row_ptr = System.Runtime.InteropServices.GCHandle.Alloc(row, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetSeparableFilterEXT(target, format, type, (void*)row_ptr.AddrOfPinnedObject(), (void*)column_ptr.AddrOfPinnedObject(), span);
                    }
                    finally
                    {
                        row_ptr.Free();
                        column_ptr.Free();
                    }
            }
            
            public static 
            void GetSeparableFilterEXT(GL.Enums.SeparableTargetEXT target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object row, object column, object span)
            {
                System.Runtime.InteropServices.GCHandle span_ptr = System.Runtime.InteropServices.GCHandle.Alloc(span, System.Runtime.InteropServices.GCHandleType.Pinned);
                System.Runtime.InteropServices.GCHandle column_ptr = System.Runtime.InteropServices.GCHandle.Alloc(column, System.Runtime.InteropServices.GCHandleType.Pinned);
                System.Runtime.InteropServices.GCHandle row_ptr = System.Runtime.InteropServices.GCHandle.Alloc(row, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glGetSeparableFilterEXT(target, format, type, (void*)row_ptr.AddrOfPinnedObject(), (void*)column_ptr.AddrOfPinnedObject(), (void*)span_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        row_ptr.Free();
                        column_ptr.Free();
                        span_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void SeparableFilter2DEXT(GL.Enums.SeparableTargetEXT target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* row, void* column)
            {
                Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column);
            }
            
            public static 
            unsafe void SeparableFilter2DEXT(GL.Enums.SeparableTargetEXT target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* row, object column)
            {
                System.Runtime.InteropServices.GCHandle column_ptr = System.Runtime.InteropServices.GCHandle.Alloc(column, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, (void*)column_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        column_ptr.Free();
                    }
            }
            
            public static 
            unsafe void SeparableFilter2DEXT(GL.Enums.SeparableTargetEXT target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object row, void* column)
            {
                System.Runtime.InteropServices.GCHandle row_ptr = System.Runtime.InteropServices.GCHandle.Alloc(row, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, (void*)row_ptr.AddrOfPinnedObject(), column);
                    }
                    finally
                    {
                        row_ptr.Free();
                    }
            }
            
            public static 
            void SeparableFilter2DEXT(GL.Enums.SeparableTargetEXT target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object row, object column)
            {
                System.Runtime.InteropServices.GCHandle column_ptr = System.Runtime.InteropServices.GCHandle.Alloc(column, System.Runtime.InteropServices.GCHandleType.Pinned);
                System.Runtime.InteropServices.GCHandle row_ptr = System.Runtime.InteropServices.GCHandle.Alloc(row, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, (void*)row_ptr.AddrOfPinnedObject(), (void*)column_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        row_ptr.Free();
                        column_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe GLboolean AreTexturesResidentEXT(GLsizei n, GLuint* textures, GL.Enums.Boolean* residences)
            {
                return Delegates.glAreTexturesResidentEXT(n, textures, residences);
            }
            
            public static 
            unsafe GLboolean AreTexturesResidentEXT(GLsizei n, GLuint[] textures, GL.Enums.Boolean* residences)
            {
                residences = default(GL.Enums.Boolean*);
                    fixed (GLuint* textures_ptr = textures)
                    {
                        GLboolean retval = Delegates.glAreTexturesResidentEXT(n, textures_ptr, residences);
                        return retval;
                    }
            }
            
            public static 
            unsafe GLboolean AreTexturesResidentEXT(GLsizei n, ref GLuint textures, GL.Enums.Boolean* residences)
            {
                residences = default(GL.Enums.Boolean*);
                    fixed (GLuint* textures_ptr = &textures)
                    {
                        GLboolean retval = Delegates.glAreTexturesResidentEXT(n, textures_ptr, residences);
                        return retval;
                    }
            }
            
            public static 
            void BindTextureEXT(GL.Enums.TextureTarget target, GLuint texture)
            {
                Delegates.glBindTextureEXT(target, texture);
            }
            
            public static 
            unsafe void DeleteTexturesEXT(GLsizei n, GLuint* textures)
            {
                Delegates.glDeleteTexturesEXT(n, textures);
            }
            
            public static 
            void DeleteTexturesEXT(GLsizei n, GLuint[] textures)
            {
                unsafe
                {
                    fixed (GLuint* textures_ptr = textures)
                    {
                        Delegates.glDeleteTexturesEXT(n, textures_ptr);
                    }
                }
            }
            
            public static 
            void DeleteTexturesEXT(GLsizei n, ref GLuint textures)
            {
                unsafe
                {
                    fixed (GLuint* textures_ptr = &textures)
                    {
                        Delegates.glDeleteTexturesEXT(n, textures_ptr);
                    }
                }
            }
            
            public static 
            unsafe void GenTexturesEXT(GLsizei n, GLuint* textures)
            {
                Delegates.glGenTexturesEXT(n, textures);
            }
            
            public static 
            void GenTexturesEXT(GLsizei n, GLuint[] textures)
            {
                unsafe
                {
                    fixed (GLuint* textures_ptr = textures)
                    {
                        Delegates.glGenTexturesEXT(n, textures_ptr);
                    }
                }
            }
            
            public static 
            void GenTexturesEXT(GLsizei n, out GLuint textures)
            {
                textures = default(GLuint);
                unsafe
                {
                    fixed (GLuint* textures_ptr = &textures)
                    {
                        Delegates.glGenTexturesEXT(n, textures_ptr);
                        textures = *textures_ptr;
                    }
                }
            }
            
            public static 
            GLboolean IsTextureEXT(GLuint texture)
            {
                return Delegates.glIsTextureEXT(texture);
            }
            
            public static 
            unsafe void PrioritizeTexturesEXT(GLsizei n, GLuint* textures, GLclampf* priorities)
            {
                Delegates.glPrioritizeTexturesEXT(n, textures, priorities);
            }
            
            public static 
            unsafe void PrioritizeTexturesEXT(GLsizei n, GLuint* textures, GLclampf[] priorities)
            {
                    fixed (GLclampf* priorities_ptr = priorities)
                    {
                        Delegates.glPrioritizeTexturesEXT(n, textures, priorities_ptr);
                    }
            }
            
            public static 
            unsafe void PrioritizeTexturesEXT(GLsizei n, GLuint* textures, ref GLclampf priorities)
            {
                    fixed (GLclampf* priorities_ptr = &priorities)
                    {
                        Delegates.glPrioritizeTexturesEXT(n, textures, priorities_ptr);
                    }
            }
            
            public static 
            unsafe void PrioritizeTexturesEXT(GLsizei n, GLuint[] textures, GLclampf* priorities)
            {
                    fixed (GLuint* textures_ptr = textures)
                    {
                        Delegates.glPrioritizeTexturesEXT(n, textures_ptr, priorities);
                    }
            }
            
            public static 
            void PrioritizeTexturesEXT(GLsizei n, GLuint[] textures, GLclampf[] priorities)
            {
                unsafe
                {
                    fixed (GLuint* textures_ptr = textures)
                    fixed (GLclampf* priorities_ptr = priorities)
                    {
                        Delegates.glPrioritizeTexturesEXT(n, textures_ptr, priorities_ptr);
                    }
                }
            }
            
            public static 
            void PrioritizeTexturesEXT(GLsizei n, GLuint[] textures, ref GLclampf priorities)
            {
                unsafe
                {
                    fixed (GLuint* textures_ptr = textures)
                    fixed (GLclampf* priorities_ptr = &priorities)
                    {
                        Delegates.glPrioritizeTexturesEXT(n, textures_ptr, priorities_ptr);
                    }
                }
            }
            
            public static 
            unsafe void PrioritizeTexturesEXT(GLsizei n, ref GLuint textures, GLclampf* priorities)
            {
                    fixed (GLuint* textures_ptr = &textures)
                    {
                        Delegates.glPrioritizeTexturesEXT(n, textures_ptr, priorities);
                    }
            }
            
            public static 
            void PrioritizeTexturesEXT(GLsizei n, ref GLuint textures, GLclampf[] priorities)
            {
                unsafe
                {
                    fixed (GLuint* textures_ptr = &textures)
                    fixed (GLclampf* priorities_ptr = priorities)
                    {
                        Delegates.glPrioritizeTexturesEXT(n, textures_ptr, priorities_ptr);
                    }
                }
            }
            
            public static 
            void PrioritizeTexturesEXT(GLsizei n, ref GLuint textures, ref GLclampf priorities)
            {
                unsafe
                {
                    fixed (GLuint* textures_ptr = &textures)
                    fixed (GLclampf* priorities_ptr = &priorities)
                    {
                        Delegates.glPrioritizeTexturesEXT(n, textures_ptr, priorities_ptr);
                    }
                }
            }
            
            public static 
            void ArrayElementEXT(GLint i)
            {
                Delegates.glArrayElementEXT(i);
            }
            
            public static 
            unsafe void ColorPointerEXT(GLint size, GL.Enums.ColorPointerType type, GLsizei stride, GLsizei count, void* pointer)
            {
                Delegates.glColorPointerEXT(size, type, stride, count, pointer);
            }
            
            public static 
            void ColorPointerEXT(GLint size, GL.Enums.ColorPointerType type, GLsizei stride, GLsizei count, object pointer)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glColorPointerEXT(size, type, stride, count, (void*)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            void DrawArraysEXT(GL.Enums.BeginMode mode, GLint first, GLsizei count)
            {
                Delegates.glDrawArraysEXT(mode, first, count);
            }
            
            public static 
            unsafe void EdgeFlagPointerEXT(GLsizei stride, GLsizei count, GL.Enums.Boolean* pointer)
            {
                Delegates.glEdgeFlagPointerEXT(stride, count, pointer);
            }
            
            public static 
            unsafe void GetPointervEXT(GL.Enums.GetPointervPName pname, void* @params)
            {
                Delegates.glGetPointervEXT(pname, @params);
            }
            
            public static 
            void GetPointervEXT(GL.Enums.GetPointervPName pname, object @params)
            {
                System.Runtime.InteropServices.GCHandle @params_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@params, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glGetPointervEXT(pname, (void*)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void IndexPointerEXT(GL.Enums.IndexPointerType type, GLsizei stride, GLsizei count, void* pointer)
            {
                Delegates.glIndexPointerEXT(type, stride, count, pointer);
            }
            
            public static 
            void IndexPointerEXT(GL.Enums.IndexPointerType type, GLsizei stride, GLsizei count, object pointer)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glIndexPointerEXT(type, stride, count, (void*)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void NormalPointerEXT(GL.Enums.NormalPointerType type, GLsizei stride, GLsizei count, void* pointer)
            {
                Delegates.glNormalPointerEXT(type, stride, count, pointer);
            }
            
            public static 
            void NormalPointerEXT(GL.Enums.NormalPointerType type, GLsizei stride, GLsizei count, object pointer)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glNormalPointerEXT(type, stride, count, (void*)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void TexCoordPointerEXT(GLint size, GL.Enums.TexCoordPointerType type, GLsizei stride, GLsizei count, void* pointer)
            {
                Delegates.glTexCoordPointerEXT(size, type, stride, count, pointer);
            }
            
            public static 
            void TexCoordPointerEXT(GLint size, GL.Enums.TexCoordPointerType type, GLsizei stride, GLsizei count, object pointer)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glTexCoordPointerEXT(size, type, stride, count, (void*)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void VertexPointerEXT(GLint size, GL.Enums.VertexPointerType type, GLsizei stride, GLsizei count, void* pointer)
            {
                Delegates.glVertexPointerEXT(size, type, stride, count, pointer);
            }
            
            public static 
            void VertexPointerEXT(GLint size, GL.Enums.VertexPointerType type, GLsizei stride, GLsizei count, object pointer)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glVertexPointerEXT(size, type, stride, count, (void*)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            void BlendEquationEXT(GL.Enums.BlendEquationModeEXT mode)
            {
                Delegates.glBlendEquationEXT(mode);
            }
            
            public static 
            void PointParameterfEXT(GL.Enums.EXT_point_parameters pname, GLfloat param)
            {
                Delegates.glPointParameterfEXT(pname, param);
            }
            
            public static 
            unsafe void PointParameterfvEXT(GL.Enums.EXT_point_parameters pname, GLfloat* @params)
            {
                Delegates.glPointParameterfvEXT(pname, @params);
            }
            
            public static 
            void PointParameterfvEXT(GL.Enums.EXT_point_parameters pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glPointParameterfvEXT(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void PointParameterfvEXT(GL.Enums.EXT_point_parameters pname, ref GLfloat @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glPointParameterfvEXT(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ColorSubTableEXT(GL.Enums.EXT_color_subtable target, GLsizei start, GLsizei count, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* data)
            {
                Delegates.glColorSubTableEXT(target, start, count, format, type, data);
            }
            
            public static 
            void ColorSubTableEXT(GL.Enums.EXT_color_subtable target, GLsizei start, GLsizei count, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object data)
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glColorSubTableEXT(target, start, count, format, type, (void*)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }
            
            public static 
            void CopyColorSubTableEXT(GL.Enums.EXT_color_subtable target, GLsizei start, GLint x, GLint y, GLsizei width)
            {
                Delegates.glCopyColorSubTableEXT(target, start, x, y, width);
            }
            
            public static 
            unsafe void ColorTableEXT(GL.Enums.EXT_paletted_texture target, GL.Enums.PixelInternalFormat internalFormat, GLsizei width, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* table)
            {
                Delegates.glColorTableEXT(target, internalFormat, width, format, type, table);
            }
            
            public static 
            void ColorTableEXT(GL.Enums.EXT_paletted_texture target, GL.Enums.PixelInternalFormat internalFormat, GLsizei width, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object table)
            {
                System.Runtime.InteropServices.GCHandle table_ptr = System.Runtime.InteropServices.GCHandle.Alloc(table, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glColorTableEXT(target, internalFormat, width, format, type, (void*)table_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        table_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void GetColorTableEXT(GL.Enums.EXT_paletted_texture target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* data)
            {
                Delegates.glGetColorTableEXT(target, format, type, data);
            }
            
            public static 
            void GetColorTableEXT(GL.Enums.EXT_paletted_texture target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object data)
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glGetColorTableEXT(target, format, type, (void*)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void GetColorTableParameterivEXT(GL.Enums.EXT_paletted_texture target, GL.Enums.EXT_paletted_texture pname, GLint* @params)
            {
                Delegates.glGetColorTableParameterivEXT(target, pname, @params);
            }
            
            public static 
            void GetColorTableParameterivEXT(GL.Enums.EXT_paletted_texture target, GL.Enums.EXT_paletted_texture pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetColorTableParameterivEXT(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetColorTableParameterivEXT(GL.Enums.EXT_paletted_texture target, GL.Enums.EXT_paletted_texture pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetColorTableParameterivEXT(target, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetColorTableParameterfvEXT(GL.Enums.EXT_paletted_texture target, GL.Enums.EXT_paletted_texture pname, GLfloat* @params)
            {
                Delegates.glGetColorTableParameterfvEXT(target, pname, @params);
            }
            
            public static 
            void GetColorTableParameterfvEXT(GL.Enums.EXT_paletted_texture target, GL.Enums.EXT_paletted_texture pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetColorTableParameterfvEXT(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetColorTableParameterfvEXT(GL.Enums.EXT_paletted_texture target, GL.Enums.EXT_paletted_texture pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetColorTableParameterfvEXT(target, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            void IndexMaterialEXT(GL.Enums.MaterialFace face, GL.Enums.EXT_index_material mode)
            {
                Delegates.glIndexMaterialEXT(face, mode);
            }
            
            public static 
            void IndexFuncEXT(GL.Enums.EXT_index_func func, GLclampf @ref)
            {
                Delegates.glIndexFuncEXT(func, @ref);
            }
            
            public static 
            void LockArraysEXT(GLint first, GLsizei count)
            {
                Delegates.glLockArraysEXT(first, count);
            }
            
            public static 
            void UnlockArraysEXT()
            {
                Delegates.glUnlockArraysEXT();
            }
            
            public static 
            unsafe void CullParameterdvEXT(GL.Enums.EXT_cull_vertex pname, GLdouble* @params)
            {
                Delegates.glCullParameterdvEXT(pname, @params);
            }
            
            public static 
            void CullParameterdvEXT(GL.Enums.EXT_cull_vertex pname, GLdouble[] @params)
            {
                unsafe
                {
                    fixed (GLdouble* @params_ptr = @params)
                    {
                        Delegates.glCullParameterdvEXT(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void CullParameterdvEXT(GL.Enums.EXT_cull_vertex pname, out GLdouble @params)
            {
                @params = default(GLdouble);
                unsafe
                {
                    fixed (GLdouble* @params_ptr = &@params)
                    {
                        Delegates.glCullParameterdvEXT(pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void CullParameterfvEXT(GL.Enums.EXT_cull_vertex pname, GLfloat* @params)
            {
                Delegates.glCullParameterfvEXT(pname, @params);
            }
            
            public static 
            void CullParameterfvEXT(GL.Enums.EXT_cull_vertex pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glCullParameterfvEXT(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void CullParameterfvEXT(GL.Enums.EXT_cull_vertex pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glCullParameterfvEXT(pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void DrawRangeElementsEXT(GL.Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count, GL.Enums.EXT_draw_range_elements type, void* indices)
            {
                Delegates.glDrawRangeElementsEXT(mode, start, end, count, type, indices);
            }
            
            public static 
            void DrawRangeElementsEXT(GL.Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count, GL.Enums.EXT_draw_range_elements type, object indices)
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glDrawRangeElementsEXT(mode, start, end, count, type, (void*)indices_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
            
            public static 
            void ApplyTextureEXT(GL.Enums.EXT_light_texture mode)
            {
                Delegates.glApplyTextureEXT(mode);
            }
            
            public static 
            void TextureLightEXT(GL.Enums.EXT_light_texture pname)
            {
                Delegates.glTextureLightEXT(pname);
            }
            
            public static 
            void TextureMaterialEXT(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter mode)
            {
                Delegates.glTextureMaterialEXT(face, mode);
            }
            
            public static 
            void PixelTransformParameteriEXT(GL.Enums.EXT_pixel_transform target, GL.Enums.EXT_pixel_transform pname, GLint param)
            {
                Delegates.glPixelTransformParameteriEXT(target, pname, param);
            }
            
            public static 
            void PixelTransformParameterfEXT(GL.Enums.EXT_pixel_transform target, GL.Enums.EXT_pixel_transform pname, GLfloat param)
            {
                Delegates.glPixelTransformParameterfEXT(target, pname, param);
            }
            
            public static 
            unsafe void PixelTransformParameterivEXT(GL.Enums.EXT_pixel_transform target, GL.Enums.EXT_pixel_transform pname, GLint* @params)
            {
                Delegates.glPixelTransformParameterivEXT(target, pname, @params);
            }
            
            public static 
            void PixelTransformParameterivEXT(GL.Enums.EXT_pixel_transform target, GL.Enums.EXT_pixel_transform pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glPixelTransformParameterivEXT(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void PixelTransformParameterivEXT(GL.Enums.EXT_pixel_transform target, GL.Enums.EXT_pixel_transform pname, ref GLint @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glPixelTransformParameterivEXT(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void PixelTransformParameterfvEXT(GL.Enums.EXT_pixel_transform target, GL.Enums.EXT_pixel_transform pname, GLfloat* @params)
            {
                Delegates.glPixelTransformParameterfvEXT(target, pname, @params);
            }
            
            public static 
            void PixelTransformParameterfvEXT(GL.Enums.EXT_pixel_transform target, GL.Enums.EXT_pixel_transform pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glPixelTransformParameterfvEXT(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void PixelTransformParameterfvEXT(GL.Enums.EXT_pixel_transform target, GL.Enums.EXT_pixel_transform pname, ref GLfloat @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glPixelTransformParameterfvEXT(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void SecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue)
            {
                Delegates.glSecondaryColor3bEXT(red, green, blue);
            }
            
            public static 
            unsafe void SecondaryColor3bvEXT(GLbyte* v)
            {
                Delegates.glSecondaryColor3bvEXT(v);
            }
            
            public static 
            void SecondaryColor3bvEXT(GLbyte[] v)
            {
                unsafe
                {
                    fixed (GLbyte* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3bvEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void SecondaryColor3bvEXT(ref GLbyte v)
            {
                unsafe
                {
                    fixed (GLbyte* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3bvEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void SecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue)
            {
                Delegates.glSecondaryColor3dEXT(red, green, blue);
            }
            
            public static 
            unsafe void SecondaryColor3dvEXT(GLdouble* v)
            {
                Delegates.glSecondaryColor3dvEXT(v);
            }
            
            public static 
            void SecondaryColor3dvEXT(GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3dvEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void SecondaryColor3dvEXT(ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3dvEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void SecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)
            {
                Delegates.glSecondaryColor3fEXT(red, green, blue);
            }
            
            public static 
            unsafe void SecondaryColor3fvEXT(GLfloat* v)
            {
                Delegates.glSecondaryColor3fvEXT(v);
            }
            
            public static 
            void SecondaryColor3fvEXT(GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3fvEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void SecondaryColor3fvEXT(ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3fvEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void SecondaryColor3iEXT(GLint red, GLint green, GLint blue)
            {
                Delegates.glSecondaryColor3iEXT(red, green, blue);
            }
            
            public static 
            unsafe void SecondaryColor3ivEXT(GLint* v)
            {
                Delegates.glSecondaryColor3ivEXT(v);
            }
            
            public static 
            void SecondaryColor3ivEXT(GLint[] v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3ivEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void SecondaryColor3ivEXT(ref GLint v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3ivEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void SecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue)
            {
                Delegates.glSecondaryColor3sEXT(red, green, blue);
            }
            
            public static 
            unsafe void SecondaryColor3svEXT(GLshort* v)
            {
                Delegates.glSecondaryColor3svEXT(v);
            }
            
            public static 
            void SecondaryColor3svEXT(GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3svEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void SecondaryColor3svEXT(ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3svEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void SecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue)
            {
                Delegates.glSecondaryColor3ubEXT(red, green, blue);
            }
            
            public static 
            unsafe void SecondaryColor3ubvEXT(GLubyte* v)
            {
                Delegates.glSecondaryColor3ubvEXT(v);
            }
            
            public static 
            void SecondaryColor3ubvEXT(GLubyte[] v)
            {
                unsafe
                {
                    fixed (GLubyte* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3ubvEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void SecondaryColor3ubvEXT(ref GLubyte v)
            {
                unsafe
                {
                    fixed (GLubyte* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3ubvEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void SecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue)
            {
                Delegates.glSecondaryColor3uiEXT(red, green, blue);
            }
            
            public static 
            unsafe void SecondaryColor3uivEXT(GLuint* v)
            {
                Delegates.glSecondaryColor3uivEXT(v);
            }
            
            public static 
            void SecondaryColor3uivEXT(GLuint[] v)
            {
                unsafe
                {
                    fixed (GLuint* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3uivEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void SecondaryColor3uivEXT(ref GLuint v)
            {
                unsafe
                {
                    fixed (GLuint* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3uivEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void SecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue)
            {
                Delegates.glSecondaryColor3usEXT(red, green, blue);
            }
            
            public static 
            unsafe void SecondaryColor3usvEXT(GLushort* v)
            {
                Delegates.glSecondaryColor3usvEXT(v);
            }
            
            public static 
            void SecondaryColor3usvEXT(GLushort[] v)
            {
                unsafe
                {
                    fixed (GLushort* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3usvEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void SecondaryColor3usvEXT(ref GLushort v)
            {
                unsafe
                {
                    fixed (GLushort* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3usvEXT(v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void SecondaryColorPointerEXT(GLint size, GL.Enums.ColorPointerType type, GLsizei stride, void* pointer)
            {
                Delegates.glSecondaryColorPointerEXT(size, type, stride, pointer);
            }
            
            public static 
            void SecondaryColorPointerEXT(GLint size, GL.Enums.ColorPointerType type, GLsizei stride, object pointer)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glSecondaryColorPointerEXT(size, type, stride, (void*)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            void TextureNormalEXT(GL.Enums.EXT_texture_perturb_normal mode)
            {
                Delegates.glTextureNormalEXT(mode);
            }
            
            public static 
            unsafe void MultiDrawArraysEXT(GL.Enums.BeginMode mode, GLint* first, GLsizei* count, GLsizei primcount)
            {
                Delegates.glMultiDrawArraysEXT(mode, first, count, primcount);
            }
            
            public static 
            unsafe void MultiDrawArraysEXT(GL.Enums.BeginMode mode, GLint* first, GLsizei[] count, GLsizei primcount)
            {
                first = default(GLint*);
                    fixed (GLsizei* count_ptr = count)
                    {
                        Delegates.glMultiDrawArraysEXT(mode, first, count_ptr, primcount);
                    }
            }
            
            public static 
            unsafe void MultiDrawArraysEXT(GL.Enums.BeginMode mode, GLint* first, out GLsizei count, GLsizei primcount)
            {
                first = default(GLint*);
                count = default(GLsizei);
                    fixed (GLsizei* count_ptr = &count)
                    {
                        Delegates.glMultiDrawArraysEXT(mode, first, count_ptr, primcount);
                        count = *count_ptr;
                    }
            }
            
            public static 
            unsafe void MultiDrawArraysEXT(GL.Enums.BeginMode mode, GLint[] first, GLsizei* count, GLsizei primcount)
            {
                count = default(GLsizei*);
                    fixed (GLint* first_ptr = first)
                    {
                        Delegates.glMultiDrawArraysEXT(mode, first_ptr, count, primcount);
                    }
            }
            
            public static 
            void MultiDrawArraysEXT(GL.Enums.BeginMode mode, GLint[] first, GLsizei[] count, GLsizei primcount)
            {
                unsafe
                {
                    fixed (GLint* first_ptr = first)
                    fixed (GLsizei* count_ptr = count)
                    {
                        Delegates.glMultiDrawArraysEXT(mode, first_ptr, count_ptr, primcount);
                    }
                }
            }
            
            public static 
            void MultiDrawArraysEXT(GL.Enums.BeginMode mode, GLint[] first, out GLsizei count, GLsizei primcount)
            {
                count = default(GLsizei);
                unsafe
                {
                    fixed (GLint* first_ptr = first)
                    fixed (GLsizei* count_ptr = &count)
                    {
                        Delegates.glMultiDrawArraysEXT(mode, first_ptr, count_ptr, primcount);
                        count = *count_ptr;
                    }
                }
            }
            
            public static 
            unsafe void MultiDrawArraysEXT(GL.Enums.BeginMode mode, out GLint first, GLsizei* count, GLsizei primcount)
            {
                first = default(GLint);
                count = default(GLsizei*);
                    fixed (GLint* first_ptr = &first)
                    {
                        Delegates.glMultiDrawArraysEXT(mode, first_ptr, count, primcount);
                        first = *first_ptr;
                    }
            }
            
            public static 
            void MultiDrawArraysEXT(GL.Enums.BeginMode mode, out GLint first, GLsizei[] count, GLsizei primcount)
            {
                first = default(GLint);
                unsafe
                {
                    fixed (GLint* first_ptr = &first)
                    fixed (GLsizei* count_ptr = count)
                    {
                        Delegates.glMultiDrawArraysEXT(mode, first_ptr, count_ptr, primcount);
                        first = *first_ptr;
                    }
                }
            }
            
            public static 
            void MultiDrawArraysEXT(GL.Enums.BeginMode mode, out GLint first, out GLsizei count, GLsizei primcount)
            {
                first = default(GLint);
                count = default(GLsizei);
                unsafe
                {
                    fixed (GLint* first_ptr = &first)
                    fixed (GLsizei* count_ptr = &count)
                    {
                        Delegates.glMultiDrawArraysEXT(mode, first_ptr, count_ptr, primcount);
                        first = *first_ptr;
                        count = *count_ptr;
                    }
                }
            }
            
            public static 
            unsafe void MultiDrawElementsEXT(GL.Enums.BeginMode mode, GLsizei* count, GL.Enums.EXT_multi_draw_arrays type, void* indices, GLsizei primcount)
            {
                Delegates.glMultiDrawElementsEXT(mode, count, type, indices, primcount);
            }
            
            public static 
            unsafe void MultiDrawElementsEXT(GL.Enums.BeginMode mode, GLsizei* count, GL.Enums.EXT_multi_draw_arrays type, object indices, GLsizei primcount)
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsEXT(mode, count, type, (void*)indices_ptr.AddrOfPinnedObject(), primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
            }
            
            public static 
            unsafe void MultiDrawElementsEXT(GL.Enums.BeginMode mode, GLsizei[] count, GL.Enums.EXT_multi_draw_arrays type, void* indices, GLsizei primcount)
            {
                    fixed (GLsizei* count_ptr = count)
                    {
                        Delegates.glMultiDrawElementsEXT(mode, count_ptr, type, indices, primcount);
                    }
            }
            
            public static 
            void MultiDrawElementsEXT(GL.Enums.BeginMode mode, GLsizei[] count, GL.Enums.EXT_multi_draw_arrays type, object indices, GLsizei primcount)
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    fixed (GLsizei* count_ptr = count)
                    try
                    {
                        Delegates.glMultiDrawElementsEXT(mode, count_ptr, type, (void*)indices_ptr.AddrOfPinnedObject(), primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void MultiDrawElementsEXT(GL.Enums.BeginMode mode, ref GLsizei count, GL.Enums.EXT_multi_draw_arrays type, void* indices, GLsizei primcount)
            {
                    fixed (GLsizei* count_ptr = &count)
                    {
                        Delegates.glMultiDrawElementsEXT(mode, count_ptr, type, indices, primcount);
                    }
            }
            
            public static 
            void MultiDrawElementsEXT(GL.Enums.BeginMode mode, ref GLsizei count, GL.Enums.EXT_multi_draw_arrays type, object indices, GLsizei primcount)
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    fixed (GLsizei* count_ptr = &count)
                    try
                    {
                        Delegates.glMultiDrawElementsEXT(mode, count_ptr, type, (void*)indices_ptr.AddrOfPinnedObject(), primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
            
            public static 
            void FogCoordfEXT(GLfloat coord)
            {
                Delegates.glFogCoordfEXT(coord);
            }
            
            public static 
            unsafe void FogCoordfvEXT(GLfloat* coord)
            {
                Delegates.glFogCoordfvEXT(coord);
            }
            
            public static 
            void FogCoordfvEXT(GLfloat[] coord)
            {
                unsafe
                {
                    fixed (GLfloat* coord_ptr = coord)
                    {
                        Delegates.glFogCoordfvEXT(coord_ptr);
                    }
                }
            }
            
            public static 
            void FogCoordfvEXT(ref GLfloat coord)
            {
                unsafe
                {
                    fixed (GLfloat* coord_ptr = &coord)
                    {
                        Delegates.glFogCoordfvEXT(coord_ptr);
                    }
                }
            }
            
            public static 
            void FogCoorddEXT(GLdouble coord)
            {
                Delegates.glFogCoorddEXT(coord);
            }
            
            public static 
            unsafe void FogCoorddvEXT(GLdouble* coord)
            {
                Delegates.glFogCoorddvEXT(coord);
            }
            
            public static 
            void FogCoorddvEXT(GLdouble[] coord)
            {
                unsafe
                {
                    fixed (GLdouble* coord_ptr = coord)
                    {
                        Delegates.glFogCoorddvEXT(coord_ptr);
                    }
                }
            }
            
            public static 
            void FogCoorddvEXT(ref GLdouble coord)
            {
                unsafe
                {
                    fixed (GLdouble* coord_ptr = &coord)
                    {
                        Delegates.glFogCoorddvEXT(coord_ptr);
                    }
                }
            }
            
            public static 
            unsafe void FogCoordPointerEXT(GL.Enums.EXT_fog_coord type, GLsizei stride, void* pointer)
            {
                Delegates.glFogCoordPointerEXT(type, stride, pointer);
            }
            
            public static 
            void FogCoordPointerEXT(GL.Enums.EXT_fog_coord type, GLsizei stride, object pointer)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glFogCoordPointerEXT(type, stride, (void*)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            void Tangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz)
            {
                Delegates.glTangent3bEXT(tx, ty, tz);
            }
            
            public static 
            unsafe void Tangent3bvEXT(GLbyte* v)
            {
                Delegates.glTangent3bvEXT(v);
            }
            
            public static 
            void Tangent3bvEXT(GLbyte[] v)
            {
                unsafe
                {
                    fixed (GLbyte* v_ptr = v)
                    {
                        Delegates.glTangent3bvEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void Tangent3bvEXT(ref GLbyte v)
            {
                unsafe
                {
                    fixed (GLbyte* v_ptr = &v)
                    {
                        Delegates.glTangent3bvEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void Tangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz)
            {
                Delegates.glTangent3dEXT(tx, ty, tz);
            }
            
            public static 
            unsafe void Tangent3dvEXT(GLdouble* v)
            {
                Delegates.glTangent3dvEXT(v);
            }
            
            public static 
            void Tangent3dvEXT(GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glTangent3dvEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void Tangent3dvEXT(ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glTangent3dvEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void Tangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz)
            {
                Delegates.glTangent3fEXT(tx, ty, tz);
            }
            
            public static 
            unsafe void Tangent3fvEXT(GLfloat* v)
            {
                Delegates.glTangent3fvEXT(v);
            }
            
            public static 
            void Tangent3fvEXT(GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTangent3fvEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void Tangent3fvEXT(ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTangent3fvEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void Tangent3iEXT(GLint tx, GLint ty, GLint tz)
            {
                Delegates.glTangent3iEXT(tx, ty, tz);
            }
            
            public static 
            unsafe void Tangent3ivEXT(GLint* v)
            {
                Delegates.glTangent3ivEXT(v);
            }
            
            public static 
            void Tangent3ivEXT(GLint[] v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = v)
                    {
                        Delegates.glTangent3ivEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void Tangent3ivEXT(ref GLint v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = &v)
                    {
                        Delegates.glTangent3ivEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void Tangent3sEXT(GLshort tx, GLshort ty, GLshort tz)
            {
                Delegates.glTangent3sEXT(tx, ty, tz);
            }
            
            public static 
            unsafe void Tangent3svEXT(GLshort* v)
            {
                Delegates.glTangent3svEXT(v);
            }
            
            public static 
            void Tangent3svEXT(GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glTangent3svEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void Tangent3svEXT(ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glTangent3svEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void Binormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz)
            {
                Delegates.glBinormal3bEXT(bx, by, bz);
            }
            
            public static 
            unsafe void Binormal3bvEXT(GLbyte* v)
            {
                Delegates.glBinormal3bvEXT(v);
            }
            
            public static 
            void Binormal3bvEXT(GLbyte[] v)
            {
                unsafe
                {
                    fixed (GLbyte* v_ptr = v)
                    {
                        Delegates.glBinormal3bvEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void Binormal3bvEXT(ref GLbyte v)
            {
                unsafe
                {
                    fixed (GLbyte* v_ptr = &v)
                    {
                        Delegates.glBinormal3bvEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void Binormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz)
            {
                Delegates.glBinormal3dEXT(bx, by, bz);
            }
            
            public static 
            unsafe void Binormal3dvEXT(GLdouble* v)
            {
                Delegates.glBinormal3dvEXT(v);
            }
            
            public static 
            void Binormal3dvEXT(GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glBinormal3dvEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void Binormal3dvEXT(ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glBinormal3dvEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void Binormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz)
            {
                Delegates.glBinormal3fEXT(bx, by, bz);
            }
            
            public static 
            unsafe void Binormal3fvEXT(GLfloat* v)
            {
                Delegates.glBinormal3fvEXT(v);
            }
            
            public static 
            void Binormal3fvEXT(GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glBinormal3fvEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void Binormal3fvEXT(ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glBinormal3fvEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void Binormal3iEXT(GLint bx, GLint by, GLint bz)
            {
                Delegates.glBinormal3iEXT(bx, by, bz);
            }
            
            public static 
            unsafe void Binormal3ivEXT(GLint* v)
            {
                Delegates.glBinormal3ivEXT(v);
            }
            
            public static 
            void Binormal3ivEXT(GLint[] v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = v)
                    {
                        Delegates.glBinormal3ivEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void Binormal3ivEXT(ref GLint v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = &v)
                    {
                        Delegates.glBinormal3ivEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void Binormal3sEXT(GLshort bx, GLshort by, GLshort bz)
            {
                Delegates.glBinormal3sEXT(bx, by, bz);
            }
            
            public static 
            unsafe void Binormal3svEXT(GLshort* v)
            {
                Delegates.glBinormal3svEXT(v);
            }
            
            public static 
            void Binormal3svEXT(GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glBinormal3svEXT(v_ptr);
                    }
                }
            }
            
            public static 
            void Binormal3svEXT(ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glBinormal3svEXT(v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TangentPointerEXT(GL.Enums.EXT_coordinate_frame type, GLsizei stride, void* pointer)
            {
                Delegates.glTangentPointerEXT(type, stride, pointer);
            }
            
            public static 
            void TangentPointerEXT(GL.Enums.EXT_coordinate_frame type, GLsizei stride, object pointer)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glTangentPointerEXT(type, stride, (void*)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void BinormalPointerEXT(GL.Enums.EXT_coordinate_frame type, GLsizei stride, void* pointer)
            {
                Delegates.glBinormalPointerEXT(type, stride, pointer);
            }
            
            public static 
            void BinormalPointerEXT(GL.Enums.EXT_coordinate_frame type, GLsizei stride, object pointer)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glBinormalPointerEXT(type, stride, (void*)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            void BlendFuncSeparateEXT(GL.Enums.EXT_blend_func_separate sfactorRGB, GL.Enums.EXT_blend_func_separate dfactorRGB, GL.Enums.EXT_blend_func_separate sfactorAlpha, GL.Enums.EXT_blend_func_separate dfactorAlpha)
            {
                Delegates.glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
            }
            
            public static 
            void VertexWeightfEXT(GLfloat weight)
            {
                Delegates.glVertexWeightfEXT(weight);
            }
            
            public static 
            unsafe void VertexWeightfvEXT(GLfloat* weight)
            {
                Delegates.glVertexWeightfvEXT(weight);
            }
            
            public static 
            void VertexWeightfvEXT(GLfloat[] weight)
            {
                unsafe
                {
                    fixed (GLfloat* weight_ptr = weight)
                    {
                        Delegates.glVertexWeightfvEXT(weight_ptr);
                    }
                }
            }
            
            public static 
            void VertexWeightfvEXT(ref GLfloat weight)
            {
                unsafe
                {
                    fixed (GLfloat* weight_ptr = &weight)
                    {
                        Delegates.glVertexWeightfvEXT(weight_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexWeightPointerEXT(GLsizei size, GL.Enums.EXT_vertex_weighting type, GLsizei stride, void* pointer)
            {
                Delegates.glVertexWeightPointerEXT(size, type, stride, pointer);
            }
            
            public static 
            void VertexWeightPointerEXT(GLsizei size, GL.Enums.EXT_vertex_weighting type, GLsizei stride, object pointer)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glVertexWeightPointerEXT(size, type, stride, (void*)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            void SamplePatternEXT(GL.Enums.EXT_multisample pattern)
            {
                Delegates.glSamplePatternEXT(pattern);
            }
            
            public static 
            void BeginVertexShaderEXT()
            {
                Delegates.glBeginVertexShaderEXT();
            }
            
            public static 
            void EndVertexShaderEXT()
            {
                Delegates.glEndVertexShaderEXT();
            }
            
            public static 
            void BindVertexShaderEXT(GLuint id)
            {
                Delegates.glBindVertexShaderEXT(id);
            }
            
            public static 
            GLuint GenVertexShadersEXT(GLuint range)
            {
                return Delegates.glGenVertexShadersEXT(range);
            }
            
            public static 
            void DeleteVertexShaderEXT(GLuint id)
            {
                Delegates.glDeleteVertexShaderEXT(id);
            }
            
            public static 
            void ShaderOp1EXT(GL.Enums.EXT_vertex_shader op, GLuint res, GLuint arg1)
            {
                Delegates.glShaderOp1EXT(op, res, arg1);
            }
            
            public static 
            void ShaderOp2EXT(GL.Enums.EXT_vertex_shader op, GLuint res, GLuint arg1, GLuint arg2)
            {
                Delegates.glShaderOp2EXT(op, res, arg1, arg2);
            }
            
            public static 
            void ShaderOp3EXT(GL.Enums.EXT_vertex_shader op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
            {
                Delegates.glShaderOp3EXT(op, res, arg1, arg2, arg3);
            }
            
            public static 
            void SwizzleEXT(GLuint res, GLuint @in, GL.Enums.EXT_vertex_shader outX, GL.Enums.EXT_vertex_shader outY, GL.Enums.EXT_vertex_shader outZ, GL.Enums.EXT_vertex_shader outW)
            {
                Delegates.glSwizzleEXT(res, @in, outX, outY, outZ, outW);
            }
            
            public static 
            void WriteMaskEXT(GLuint res, GLuint @in, GL.Enums.EXT_vertex_shader outX, GL.Enums.EXT_vertex_shader outY, GL.Enums.EXT_vertex_shader outZ, GL.Enums.EXT_vertex_shader outW)
            {
                Delegates.glWriteMaskEXT(res, @in, outX, outY, outZ, outW);
            }
            
            public static 
            void InsertComponentEXT(GLuint res, GLuint src, GLuint num)
            {
                Delegates.glInsertComponentEXT(res, src, num);
            }
            
            public static 
            void ExtractComponentEXT(GLuint res, GLuint src, GLuint num)
            {
                Delegates.glExtractComponentEXT(res, src, num);
            }
            
            public static 
            GLuint GenSymbolsEXT(GL.Enums.EXT_vertex_shader datatype, GL.Enums.EXT_vertex_shader storagetype, GL.Enums.EXT_vertex_shader range, GLuint components)
            {
                return Delegates.glGenSymbolsEXT(datatype, storagetype, range, components);
            }
            
            public static 
            unsafe void SetInvariantEXT(GLuint id, GL.Enums.EXT_vertex_shader type, void* addr)
            {
                Delegates.glSetInvariantEXT(id, type, addr);
            }
            
            public static 
            void SetInvariantEXT(GLuint id, GL.Enums.EXT_vertex_shader type, object addr)
            {
                System.Runtime.InteropServices.GCHandle addr_ptr = System.Runtime.InteropServices.GCHandle.Alloc(addr, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glSetInvariantEXT(id, type, (void*)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void SetLocalConstantEXT(GLuint id, GL.Enums.EXT_vertex_shader type, void* addr)
            {
                Delegates.glSetLocalConstantEXT(id, type, addr);
            }
            
            public static 
            void SetLocalConstantEXT(GLuint id, GL.Enums.EXT_vertex_shader type, object addr)
            {
                System.Runtime.InteropServices.GCHandle addr_ptr = System.Runtime.InteropServices.GCHandle.Alloc(addr, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glSetLocalConstantEXT(id, type, (void*)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void VariantbvEXT(GLuint id, GLbyte* addr)
            {
                Delegates.glVariantbvEXT(id, addr);
            }
            
            public static 
            void VariantbvEXT(GLuint id, GLbyte[] addr)
            {
                unsafe
                {
                    fixed (GLbyte* addr_ptr = addr)
                    {
                        Delegates.glVariantbvEXT(id, addr_ptr);
                    }
                }
            }
            
            public static 
            void VariantbvEXT(GLuint id, ref GLbyte addr)
            {
                unsafe
                {
                    fixed (GLbyte* addr_ptr = &addr)
                    {
                        Delegates.glVariantbvEXT(id, addr_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VariantsvEXT(GLuint id, GLshort* addr)
            {
                Delegates.glVariantsvEXT(id, addr);
            }
            
            public static 
            void VariantsvEXT(GLuint id, GLshort[] addr)
            {
                unsafe
                {
                    fixed (GLshort* addr_ptr = addr)
                    {
                        Delegates.glVariantsvEXT(id, addr_ptr);
                    }
                }
            }
            
            public static 
            void VariantsvEXT(GLuint id, ref GLshort addr)
            {
                unsafe
                {
                    fixed (GLshort* addr_ptr = &addr)
                    {
                        Delegates.glVariantsvEXT(id, addr_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VariantivEXT(GLuint id, GLint* addr)
            {
                Delegates.glVariantivEXT(id, addr);
            }
            
            public static 
            void VariantivEXT(GLuint id, GLint[] addr)
            {
                unsafe
                {
                    fixed (GLint* addr_ptr = addr)
                    {
                        Delegates.glVariantivEXT(id, addr_ptr);
                    }
                }
            }
            
            public static 
            void VariantivEXT(GLuint id, ref GLint addr)
            {
                unsafe
                {
                    fixed (GLint* addr_ptr = &addr)
                    {
                        Delegates.glVariantivEXT(id, addr_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VariantfvEXT(GLuint id, GLfloat* addr)
            {
                Delegates.glVariantfvEXT(id, addr);
            }
            
            public static 
            void VariantfvEXT(GLuint id, GLfloat[] addr)
            {
                unsafe
                {
                    fixed (GLfloat* addr_ptr = addr)
                    {
                        Delegates.glVariantfvEXT(id, addr_ptr);
                    }
                }
            }
            
            public static 
            void VariantfvEXT(GLuint id, ref GLfloat addr)
            {
                unsafe
                {
                    fixed (GLfloat* addr_ptr = &addr)
                    {
                        Delegates.glVariantfvEXT(id, addr_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VariantdvEXT(GLuint id, GLdouble* addr)
            {
                Delegates.glVariantdvEXT(id, addr);
            }
            
            public static 
            void VariantdvEXT(GLuint id, GLdouble[] addr)
            {
                unsafe
                {
                    fixed (GLdouble* addr_ptr = addr)
                    {
                        Delegates.glVariantdvEXT(id, addr_ptr);
                    }
                }
            }
            
            public static 
            void VariantdvEXT(GLuint id, ref GLdouble addr)
            {
                unsafe
                {
                    fixed (GLdouble* addr_ptr = &addr)
                    {
                        Delegates.glVariantdvEXT(id, addr_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VariantubvEXT(GLuint id, GLubyte* addr)
            {
                Delegates.glVariantubvEXT(id, addr);
            }
            
            public static 
            void VariantubvEXT(GLuint id, GLubyte[] addr)
            {
                unsafe
                {
                    fixed (GLubyte* addr_ptr = addr)
                    {
                        Delegates.glVariantubvEXT(id, addr_ptr);
                    }
                }
            }
            
            public static 
            void VariantubvEXT(GLuint id, ref GLubyte addr)
            {
                unsafe
                {
                    fixed (GLubyte* addr_ptr = &addr)
                    {
                        Delegates.glVariantubvEXT(id, addr_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VariantusvEXT(GLuint id, GLushort* addr)
            {
                Delegates.glVariantusvEXT(id, addr);
            }
            
            public static 
            void VariantusvEXT(GLuint id, GLushort[] addr)
            {
                unsafe
                {
                    fixed (GLushort* addr_ptr = addr)
                    {
                        Delegates.glVariantusvEXT(id, addr_ptr);
                    }
                }
            }
            
            public static 
            void VariantusvEXT(GLuint id, ref GLushort addr)
            {
                unsafe
                {
                    fixed (GLushort* addr_ptr = &addr)
                    {
                        Delegates.glVariantusvEXT(id, addr_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VariantuivEXT(GLuint id, GLuint* addr)
            {
                Delegates.glVariantuivEXT(id, addr);
            }
            
            public static 
            void VariantuivEXT(GLuint id, GLuint[] addr)
            {
                unsafe
                {
                    fixed (GLuint* addr_ptr = addr)
                    {
                        Delegates.glVariantuivEXT(id, addr_ptr);
                    }
                }
            }
            
            public static 
            void VariantuivEXT(GLuint id, ref GLuint addr)
            {
                unsafe
                {
                    fixed (GLuint* addr_ptr = &addr)
                    {
                        Delegates.glVariantuivEXT(id, addr_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VariantPointerEXT(GLuint id, GL.Enums.EXT_vertex_shader type, GLuint stride, void* addr)
            {
                Delegates.glVariantPointerEXT(id, type, stride, addr);
            }
            
            public static 
            void VariantPointerEXT(GLuint id, GL.Enums.EXT_vertex_shader type, GLuint stride, object addr)
            {
                System.Runtime.InteropServices.GCHandle addr_ptr = System.Runtime.InteropServices.GCHandle.Alloc(addr, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glVariantPointerEXT(id, type, stride, (void*)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
            }
            
            public static 
            void EnableVariantClientStateEXT(GLuint id)
            {
                Delegates.glEnableVariantClientStateEXT(id);
            }
            
            public static 
            void DisableVariantClientStateEXT(GLuint id)
            {
                Delegates.glDisableVariantClientStateEXT(id);
            }
            
            public static 
            GLuint BindLightParameterEXT(GL.Enums.LightName light, GL.Enums.LightParameter value)
            {
                return Delegates.glBindLightParameterEXT(light, value);
            }
            
            public static 
            GLuint BindMaterialParameterEXT(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter value)
            {
                return Delegates.glBindMaterialParameterEXT(face, value);
            }
            
            public static 
            GLuint BindTexGenParameterEXT(GL.Enums.EXT_vertex_shader unit, GL.Enums.TextureCoordName coord, GL.Enums.TextureGenParameter value)
            {
                return Delegates.glBindTexGenParameterEXT(unit, coord, value);
            }
            
            public static 
            GLuint BindTextureUnitParameterEXT(GL.Enums.EXT_vertex_shader unit, GL.Enums.EXT_vertex_shader value)
            {
                return Delegates.glBindTextureUnitParameterEXT(unit, value);
            }
            
            public static 
            GLuint BindParameterEXT(GL.Enums.EXT_vertex_shader value)
            {
                return Delegates.glBindParameterEXT(value);
            }
            
            public static 
            GLboolean IsVariantEnabledEXT(GLuint id, GL.Enums.EXT_vertex_shader cap)
            {
                return Delegates.glIsVariantEnabledEXT(id, cap);
            }
            
            public static 
            unsafe void GetVariantBooleanvEXT(GLuint id, GL.Enums.EXT_vertex_shader value, GL.Enums.Boolean* data)
            {
                Delegates.glGetVariantBooleanvEXT(id, value, data);
            }
            
            public static 
            unsafe void GetVariantIntegervEXT(GLuint id, GL.Enums.EXT_vertex_shader value, GLint* data)
            {
                Delegates.glGetVariantIntegervEXT(id, value, data);
            }
            
            public static 
            void GetVariantIntegervEXT(GLuint id, GL.Enums.EXT_vertex_shader value, GLint[] data)
            {
                unsafe
                {
                    fixed (GLint* data_ptr = data)
                    {
                        Delegates.glGetVariantIntegervEXT(id, value, data_ptr);
                    }
                }
            }
            
            public static 
            void GetVariantIntegervEXT(GLuint id, GL.Enums.EXT_vertex_shader value, out GLint data)
            {
                data = default(GLint);
                unsafe
                {
                    fixed (GLint* data_ptr = &data)
                    {
                        Delegates.glGetVariantIntegervEXT(id, value, data_ptr);
                        data = *data_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetVariantFloatvEXT(GLuint id, GL.Enums.EXT_vertex_shader value, GLfloat* data)
            {
                Delegates.glGetVariantFloatvEXT(id, value, data);
            }
            
            public static 
            void GetVariantFloatvEXT(GLuint id, GL.Enums.EXT_vertex_shader value, GLfloat[] data)
            {
                unsafe
                {
                    fixed (GLfloat* data_ptr = data)
                    {
                        Delegates.glGetVariantFloatvEXT(id, value, data_ptr);
                    }
                }
            }
            
            public static 
            void GetVariantFloatvEXT(GLuint id, GL.Enums.EXT_vertex_shader value, out GLfloat data)
            {
                data = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* data_ptr = &data)
                    {
                        Delegates.glGetVariantFloatvEXT(id, value, data_ptr);
                        data = *data_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetVariantPointervEXT(GLuint id, GL.Enums.EXT_vertex_shader value, void* data)
            {
                Delegates.glGetVariantPointervEXT(id, value, data);
            }
            
            public static 
            void GetVariantPointervEXT(GLuint id, GL.Enums.EXT_vertex_shader value, object data)
            {
                System.Runtime.InteropServices.GCHandle data_ptr = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glGetVariantPointervEXT(id, value, (void*)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void GetInvariantBooleanvEXT(GLuint id, GL.Enums.EXT_vertex_shader value, GL.Enums.Boolean* data)
            {
                Delegates.glGetInvariantBooleanvEXT(id, value, data);
            }
            
            public static 
            unsafe void GetInvariantIntegervEXT(GLuint id, GL.Enums.EXT_vertex_shader value, GLint* data)
            {
                Delegates.glGetInvariantIntegervEXT(id, value, data);
            }
            
            public static 
            void GetInvariantIntegervEXT(GLuint id, GL.Enums.EXT_vertex_shader value, GLint[] data)
            {
                unsafe
                {
                    fixed (GLint* data_ptr = data)
                    {
                        Delegates.glGetInvariantIntegervEXT(id, value, data_ptr);
                    }
                }
            }
            
            public static 
            void GetInvariantIntegervEXT(GLuint id, GL.Enums.EXT_vertex_shader value, out GLint data)
            {
                data = default(GLint);
                unsafe
                {
                    fixed (GLint* data_ptr = &data)
                    {
                        Delegates.glGetInvariantIntegervEXT(id, value, data_ptr);
                        data = *data_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetInvariantFloatvEXT(GLuint id, GL.Enums.EXT_vertex_shader value, GLfloat* data)
            {
                Delegates.glGetInvariantFloatvEXT(id, value, data);
            }
            
            public static 
            void GetInvariantFloatvEXT(GLuint id, GL.Enums.EXT_vertex_shader value, GLfloat[] data)
            {
                unsafe
                {
                    fixed (GLfloat* data_ptr = data)
                    {
                        Delegates.glGetInvariantFloatvEXT(id, value, data_ptr);
                    }
                }
            }
            
            public static 
            void GetInvariantFloatvEXT(GLuint id, GL.Enums.EXT_vertex_shader value, out GLfloat data)
            {
                data = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* data_ptr = &data)
                    {
                        Delegates.glGetInvariantFloatvEXT(id, value, data_ptr);
                        data = *data_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetLocalConstantBooleanvEXT(GLuint id, GL.Enums.EXT_vertex_shader value, GL.Enums.Boolean* data)
            {
                Delegates.glGetLocalConstantBooleanvEXT(id, value, data);
            }
            
            public static 
            unsafe void GetLocalConstantIntegervEXT(GLuint id, GL.Enums.EXT_vertex_shader value, GLint* data)
            {
                Delegates.glGetLocalConstantIntegervEXT(id, value, data);
            }
            
            public static 
            void GetLocalConstantIntegervEXT(GLuint id, GL.Enums.EXT_vertex_shader value, GLint[] data)
            {
                unsafe
                {
                    fixed (GLint* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantIntegervEXT(id, value, data_ptr);
                    }
                }
            }
            
            public static 
            void GetLocalConstantIntegervEXT(GLuint id, GL.Enums.EXT_vertex_shader value, out GLint data)
            {
                data = default(GLint);
                unsafe
                {
                    fixed (GLint* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantIntegervEXT(id, value, data_ptr);
                        data = *data_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetLocalConstantFloatvEXT(GLuint id, GL.Enums.EXT_vertex_shader value, GLfloat* data)
            {
                Delegates.glGetLocalConstantFloatvEXT(id, value, data);
            }
            
            public static 
            void GetLocalConstantFloatvEXT(GLuint id, GL.Enums.EXT_vertex_shader value, GLfloat[] data)
            {
                unsafe
                {
                    fixed (GLfloat* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantFloatvEXT(id, value, data_ptr);
                    }
                }
            }
            
            public static 
            void GetLocalConstantFloatvEXT(GLuint id, GL.Enums.EXT_vertex_shader value, out GLfloat data)
            {
                data = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantFloatvEXT(id, value, data_ptr);
                        data = *data_ptr;
                    }
                }
            }
            
            public static 
            void ActiveStencilFaceEXT(GL.Enums.EXT_stencil_two_side face)
            {
                Delegates.glActiveStencilFaceEXT(face);
            }
            
            public static 
            void DepthBoundsEXT(GLclampd zmin, GLclampd zmax)
            {
                Delegates.glDepthBoundsEXT(zmin, zmax);
            }
            
            public static 
            void BlendEquationSeparateEXT(GL.Enums.BlendEquationModeEXT modeRGB, GL.Enums.BlendEquationModeEXT modeAlpha)
            {
                Delegates.glBlendEquationSeparateEXT(modeRGB, modeAlpha);
            }
            
            public static 
            GLboolean IsRenderbufferEXT(GLuint renderbuffer)
            {
                return Delegates.glIsRenderbufferEXT(renderbuffer);
            }
            
            public static 
            void BindRenderbufferEXT(GL.Enums.EXT_framebuffer_object target, GLuint renderbuffer)
            {
                Delegates.glBindRenderbufferEXT(target, renderbuffer);
            }
            
            public static 
            unsafe void DeleteRenderbuffersEXT(GLsizei n, GLuint* renderbuffers)
            {
                Delegates.glDeleteRenderbuffersEXT(n, renderbuffers);
            }
            
            public static 
            void DeleteRenderbuffersEXT(GLsizei n, GLuint[] renderbuffers)
            {
                unsafe
                {
                    fixed (GLuint* renderbuffers_ptr = renderbuffers)
                    {
                        Delegates.glDeleteRenderbuffersEXT(n, renderbuffers_ptr);
                    }
                }
            }
            
            public static 
            void DeleteRenderbuffersEXT(GLsizei n, ref GLuint renderbuffers)
            {
                unsafe
                {
                    fixed (GLuint* renderbuffers_ptr = &renderbuffers)
                    {
                        Delegates.glDeleteRenderbuffersEXT(n, renderbuffers_ptr);
                    }
                }
            }
            
            public static 
            unsafe void GenRenderbuffersEXT(GLsizei n, GLuint* renderbuffers)
            {
                Delegates.glGenRenderbuffersEXT(n, renderbuffers);
            }
            
            public static 
            void GenRenderbuffersEXT(GLsizei n, GLuint[] renderbuffers)
            {
                unsafe
                {
                    fixed (GLuint* renderbuffers_ptr = renderbuffers)
                    {
                        Delegates.glGenRenderbuffersEXT(n, renderbuffers_ptr);
                    }
                }
            }
            
            public static 
            void GenRenderbuffersEXT(GLsizei n, out GLuint renderbuffers)
            {
                renderbuffers = default(GLuint);
                unsafe
                {
                    fixed (GLuint* renderbuffers_ptr = &renderbuffers)
                    {
                        Delegates.glGenRenderbuffersEXT(n, renderbuffers_ptr);
                        renderbuffers = *renderbuffers_ptr;
                    }
                }
            }
            
            public static 
            void RenderbufferStorageEXT(GL.Enums.EXT_framebuffer_object target, GL.Enums.EXT_framebuffer_object internalformat, GLsizei width, GLsizei height)
            {
                Delegates.glRenderbufferStorageEXT(target, internalformat, width, height);
            }
            
            public static 
            unsafe void GetRenderbufferParameterivEXT(GL.Enums.EXT_framebuffer_object target, GL.Enums.EXT_framebuffer_object pname, GLint* @params)
            {
                Delegates.glGetRenderbufferParameterivEXT(target, pname, @params);
            }
            
            public static 
            void GetRenderbufferParameterivEXT(GL.Enums.EXT_framebuffer_object target, GL.Enums.EXT_framebuffer_object pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetRenderbufferParameterivEXT(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetRenderbufferParameterivEXT(GL.Enums.EXT_framebuffer_object target, GL.Enums.EXT_framebuffer_object pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetRenderbufferParameterivEXT(target, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            GLboolean IsFramebufferEXT(GLuint framebuffer)
            {
                return Delegates.glIsFramebufferEXT(framebuffer);
            }
            
            public static 
            void BindFramebufferEXT(GL.Enums.EXT_framebuffer_object target, GLuint framebuffer)
            {
                Delegates.glBindFramebufferEXT(target, framebuffer);
            }
            
            public static 
            unsafe void DeleteFramebuffersEXT(GLsizei n, GLuint* framebuffers)
            {
                Delegates.glDeleteFramebuffersEXT(n, framebuffers);
            }
            
            public static 
            void DeleteFramebuffersEXT(GLsizei n, GLuint[] framebuffers)
            {
                unsafe
                {
                    fixed (GLuint* framebuffers_ptr = framebuffers)
                    {
                        Delegates.glDeleteFramebuffersEXT(n, framebuffers_ptr);
                    }
                }
            }
            
            public static 
            void DeleteFramebuffersEXT(GLsizei n, ref GLuint framebuffers)
            {
                unsafe
                {
                    fixed (GLuint* framebuffers_ptr = &framebuffers)
                    {
                        Delegates.glDeleteFramebuffersEXT(n, framebuffers_ptr);
                    }
                }
            }
            
            public static 
            unsafe void GenFramebuffersEXT(GLsizei n, GLuint* framebuffers)
            {
                Delegates.glGenFramebuffersEXT(n, framebuffers);
            }
            
            public static 
            void GenFramebuffersEXT(GLsizei n, GLuint[] framebuffers)
            {
                unsafe
                {
                    fixed (GLuint* framebuffers_ptr = framebuffers)
                    {
                        Delegates.glGenFramebuffersEXT(n, framebuffers_ptr);
                    }
                }
            }
            
            public static 
            void GenFramebuffersEXT(GLsizei n, out GLuint framebuffers)
            {
                framebuffers = default(GLuint);
                unsafe
                {
                    fixed (GLuint* framebuffers_ptr = &framebuffers)
                    {
                        Delegates.glGenFramebuffersEXT(n, framebuffers_ptr);
                        framebuffers = *framebuffers_ptr;
                    }
                }
            }
            
            public static 
            GL.Enums.GLenum CheckFramebufferStatusEXT(GL.Enums.EXT_framebuffer_object target)
            {
                return Delegates.glCheckFramebufferStatusEXT(target);
            }
            
            public static 
            void FramebufferTexture1DEXT(GL.Enums.EXT_framebuffer_object target, GL.Enums.EXT_framebuffer_object attachment, GL.Enums.EXT_framebuffer_object textarget, GLuint texture, GLint level)
            {
                Delegates.glFramebufferTexture1DEXT(target, attachment, textarget, texture, level);
            }
            
            public static 
            void FramebufferTexture2DEXT(GL.Enums.EXT_framebuffer_object target, GL.Enums.EXT_framebuffer_object attachment, GL.Enums.EXT_framebuffer_object textarget, GLuint texture, GLint level)
            {
                Delegates.glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
            }
            
            public static 
            void FramebufferTexture3DEXT(GL.Enums.EXT_framebuffer_object target, GL.Enums.EXT_framebuffer_object attachment, GL.Enums.EXT_framebuffer_object textarget, GLuint texture, GLint level, GLint zoffset)
            {
                Delegates.glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset);
            }
            
            public static 
            void FramebufferRenderbufferEXT(GL.Enums.EXT_framebuffer_object target, GL.Enums.EXT_framebuffer_object attachment, GL.Enums.EXT_framebuffer_object renderbuffertarget, GLuint renderbuffer)
            {
                Delegates.glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
            }
            
            public static 
            unsafe void GetFramebufferAttachmentParameterivEXT(GL.Enums.EXT_framebuffer_object target, GL.Enums.EXT_framebuffer_object attachment, GL.Enums.EXT_framebuffer_object pname, GLint* @params)
            {
                Delegates.glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, @params);
            }
            
            public static 
            void GetFramebufferAttachmentParameterivEXT(GL.Enums.EXT_framebuffer_object target, GL.Enums.EXT_framebuffer_object attachment, GL.Enums.EXT_framebuffer_object pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetFramebufferAttachmentParameterivEXT(GL.Enums.EXT_framebuffer_object target, GL.Enums.EXT_framebuffer_object attachment, GL.Enums.EXT_framebuffer_object pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            void GenerateMipmapEXT(GL.Enums.EXT_framebuffer_object target)
            {
                Delegates.glGenerateMipmapEXT(target);
            }
            
            public static 
            void StencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag)
            {
                Delegates.glStencilClearTagEXT(stencilTagBits, stencilClearTag);
            }
            
            public static 
            void BlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GL.Enums.ClearBufferMask mask, GL.Enums.EXT_framebuffer_blit filter)
            {
                Delegates.glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
            }
            
            public static 
            void RenderbufferStorageMultisampleEXT(GL.Enums.EXT_framebuffer_multisample target, GLsizei samples, GL.Enums.EXT_framebuffer_multisample internalformat, GLsizei width, GLsizei height)
            {
                Delegates.glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);
            }
            
            public static 
            unsafe void GetQueryObjecti64vEXT(GLuint id, GL.Enums.EXT_timer_query pname, GLint64EXT* @params)
            {
                Delegates.glGetQueryObjecti64vEXT(id, pname, @params);
            }
            
            public static 
            void GetQueryObjecti64vEXT(GLuint id, GL.Enums.EXT_timer_query pname, GLint64EXT[] @params)
            {
                unsafe
                {
                    fixed (GLint64EXT* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjecti64vEXT(id, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetQueryObjecti64vEXT(GLuint id, GL.Enums.EXT_timer_query pname, out GLint64EXT @params)
            {
                @params = default(GLint64EXT);
                unsafe
                {
                    fixed (GLint64EXT* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjecti64vEXT(id, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetQueryObjectui64vEXT(GLuint id, GL.Enums.EXT_timer_query pname, GLuint64EXT* @params)
            {
                Delegates.glGetQueryObjectui64vEXT(id, pname, @params);
            }
            
            public static 
            void GetQueryObjectui64vEXT(GLuint id, GL.Enums.EXT_timer_query pname, GLuint64EXT[] @params)
            {
                unsafe
                {
                    fixed (GLuint64EXT* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectui64vEXT(id, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetQueryObjectui64vEXT(GLuint id, GL.Enums.EXT_timer_query pname, out GLuint64EXT @params)
            {
                @params = default(GLuint64EXT);
                unsafe
                {
                    fixed (GLuint64EXT* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectui64vEXT(id, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void ProgramEnvParameters4fvEXT(GL.Enums.EXT_gpu_program_parameters target, GLuint index, GLsizei count, GLfloat* @params)
            {
                Delegates.glProgramEnvParameters4fvEXT(target, index, count, @params);
            }
            
            public static 
            void ProgramEnvParameters4fvEXT(GL.Enums.EXT_gpu_program_parameters target, GLuint index, GLsizei count, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameters4fvEXT(target, index, count, @params_ptr);
                    }
                }
            }
            
            public static 
            void ProgramEnvParameters4fvEXT(GL.Enums.EXT_gpu_program_parameters target, GLuint index, GLsizei count, ref GLfloat @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameters4fvEXT(target, index, count, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ProgramLocalParameters4fvEXT(GL.Enums.EXT_gpu_program_parameters target, GLuint index, GLsizei count, GLfloat* @params)
            {
                Delegates.glProgramLocalParameters4fvEXT(target, index, count, @params);
            }
            
            public static 
            void ProgramLocalParameters4fvEXT(GL.Enums.EXT_gpu_program_parameters target, GLuint index, GLsizei count, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameters4fvEXT(target, index, count, @params_ptr);
                    }
                }
            }
            
            public static 
            void ProgramLocalParameters4fvEXT(GL.Enums.EXT_gpu_program_parameters target, GLuint index, GLsizei count, ref GLfloat @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameters4fvEXT(target, index, count, @params_ptr);
                    }
                }
            }
            
            public static 
            void FramebufferTextureEXT(GL.Enums.NV_geometry_program4 target, GL.Enums.NV_geometry_program4 attachment, GLuint texture, GLint level)
            {
                Delegates.glFramebufferTextureEXT(target, attachment, texture, level);
            }
            
            public static 
            void FramebufferTextureLayerEXT(GL.Enums.NV_geometry_program4 target, GL.Enums.NV_geometry_program4 attachment, GLuint texture, GLint level, GLint layer)
            {
                Delegates.glFramebufferTextureLayerEXT(target, attachment, texture, level, layer);
            }
            
            public static 
            void FramebufferTextureFaceEXT(GL.Enums.NV_geometry_program4 target, GL.Enums.NV_geometry_program4 attachment, GLuint texture, GLint level, GL.Enums.TextureTarget face)
            {
                Delegates.glFramebufferTextureFaceEXT(target, attachment, texture, level, face);
            }
            
            public static 
            void ProgramParameteriEXT(GLuint program, GL.Enums.EXT_geometry_shader4 pname, GLint value)
            {
                Delegates.glProgramParameteriEXT(program, pname, value);
            }
            
            public static 
            void VertexAttribI1iEXT(GLuint index, GLint x)
            {
                Delegates.glVertexAttribI1iEXT(index, x);
            }
            
            public static 
            void VertexAttribI2iEXT(GLuint index, GLint x, GLint y)
            {
                Delegates.glVertexAttribI2iEXT(index, x, y);
            }
            
            public static 
            void VertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z)
            {
                Delegates.glVertexAttribI3iEXT(index, x, y, z);
            }
            
            public static 
            void VertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w)
            {
                Delegates.glVertexAttribI4iEXT(index, x, y, z, w);
            }
            
            public static 
            void VertexAttribI1uiEXT(GLuint index, GLuint x)
            {
                Delegates.glVertexAttribI1uiEXT(index, x);
            }
            
            public static 
            void VertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y)
            {
                Delegates.glVertexAttribI2uiEXT(index, x, y);
            }
            
            public static 
            void VertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z)
            {
                Delegates.glVertexAttribI3uiEXT(index, x, y, z);
            }
            
            public static 
            void VertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
            {
                Delegates.glVertexAttribI4uiEXT(index, x, y, z, w);
            }
            
            public static 
            unsafe void VertexAttribI1ivEXT(GLuint index, GLint* v)
            {
                Delegates.glVertexAttribI1ivEXT(index, v);
            }
            
            public static 
            void VertexAttribI1ivEXT(GLuint index, GLint[] v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = v)
                    {
                        Delegates.glVertexAttribI1ivEXT(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribI1ivEXT(GLuint index, ref GLint v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI1ivEXT(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribI2ivEXT(GLuint index, GLint* v)
            {
                Delegates.glVertexAttribI2ivEXT(index, v);
            }
            
            public static 
            void VertexAttribI2ivEXT(GLuint index, GLint[] v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = v)
                    {
                        Delegates.glVertexAttribI2ivEXT(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribI2ivEXT(GLuint index, ref GLint v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI2ivEXT(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribI3ivEXT(GLuint index, GLint* v)
            {
                Delegates.glVertexAttribI3ivEXT(index, v);
            }
            
            public static 
            void VertexAttribI3ivEXT(GLuint index, GLint[] v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = v)
                    {
                        Delegates.glVertexAttribI3ivEXT(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribI3ivEXT(GLuint index, ref GLint v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI3ivEXT(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribI4ivEXT(GLuint index, GLint* v)
            {
                Delegates.glVertexAttribI4ivEXT(index, v);
            }
            
            public static 
            void VertexAttribI4ivEXT(GLuint index, GLint[] v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4ivEXT(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribI4ivEXT(GLuint index, ref GLint v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4ivEXT(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribI1uivEXT(GLuint index, GLuint* v)
            {
                Delegates.glVertexAttribI1uivEXT(index, v);
            }
            
            public static 
            void VertexAttribI1uivEXT(GLuint index, GLuint[] v)
            {
                unsafe
                {
                    fixed (GLuint* v_ptr = v)
                    {
                        Delegates.glVertexAttribI1uivEXT(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribI1uivEXT(GLuint index, ref GLuint v)
            {
                unsafe
                {
                    fixed (GLuint* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI1uivEXT(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribI2uivEXT(GLuint index, GLuint* v)
            {
                Delegates.glVertexAttribI2uivEXT(index, v);
            }
            
            public static 
            void VertexAttribI2uivEXT(GLuint index, GLuint[] v)
            {
                unsafe
                {
                    fixed (GLuint* v_ptr = v)
                    {
                        Delegates.glVertexAttribI2uivEXT(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribI2uivEXT(GLuint index, ref GLuint v)
            {
                unsafe
                {
                    fixed (GLuint* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI2uivEXT(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribI3uivEXT(GLuint index, GLuint* v)
            {
                Delegates.glVertexAttribI3uivEXT(index, v);
            }
            
            public static 
            void VertexAttribI3uivEXT(GLuint index, GLuint[] v)
            {
                unsafe
                {
                    fixed (GLuint* v_ptr = v)
                    {
                        Delegates.glVertexAttribI3uivEXT(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribI3uivEXT(GLuint index, ref GLuint v)
            {
                unsafe
                {
                    fixed (GLuint* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI3uivEXT(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribI4uivEXT(GLuint index, GLuint* v)
            {
                Delegates.glVertexAttribI4uivEXT(index, v);
            }
            
            public static 
            void VertexAttribI4uivEXT(GLuint index, GLuint[] v)
            {
                unsafe
                {
                    fixed (GLuint* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4uivEXT(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribI4uivEXT(GLuint index, ref GLuint v)
            {
                unsafe
                {
                    fixed (GLuint* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4uivEXT(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribI4bvEXT(GLuint index, GLbyte* v)
            {
                Delegates.glVertexAttribI4bvEXT(index, v);
            }
            
            public static 
            void VertexAttribI4bvEXT(GLuint index, GLbyte[] v)
            {
                unsafe
                {
                    fixed (GLbyte* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4bvEXT(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribI4bvEXT(GLuint index, ref GLbyte v)
            {
                unsafe
                {
                    fixed (GLbyte* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4bvEXT(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribI4svEXT(GLuint index, GLshort* v)
            {
                Delegates.glVertexAttribI4svEXT(index, v);
            }
            
            public static 
            void VertexAttribI4svEXT(GLuint index, GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4svEXT(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribI4svEXT(GLuint index, ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4svEXT(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribI4ubvEXT(GLuint index, GLubyte* v)
            {
                Delegates.glVertexAttribI4ubvEXT(index, v);
            }
            
            public static 
            void VertexAttribI4ubvEXT(GLuint index, GLubyte[] v)
            {
                unsafe
                {
                    fixed (GLubyte* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4ubvEXT(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribI4ubvEXT(GLuint index, ref GLubyte v)
            {
                unsafe
                {
                    fixed (GLubyte* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4ubvEXT(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribI4usvEXT(GLuint index, GLushort* v)
            {
                Delegates.glVertexAttribI4usvEXT(index, v);
            }
            
            public static 
            void VertexAttribI4usvEXT(GLuint index, GLushort[] v)
            {
                unsafe
                {
                    fixed (GLushort* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4usvEXT(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribI4usvEXT(GLuint index, ref GLushort v)
            {
                unsafe
                {
                    fixed (GLushort* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4usvEXT(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribIPointerEXT(GLuint index, GLint size, GL.Enums.NV_vertex_program4 type, GLsizei stride, void* pointer)
            {
                Delegates.glVertexAttribIPointerEXT(index, size, type, stride, pointer);
            }
            
            public static 
            void VertexAttribIPointerEXT(GLuint index, GLint size, GL.Enums.NV_vertex_program4 type, GLsizei stride, object pointer)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glVertexAttribIPointerEXT(index, size, type, stride, (void*)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void GetVertexAttribIivEXT(GLuint index, GL.Enums.NV_vertex_program4 pname, GLint* @params)
            {
                Delegates.glGetVertexAttribIivEXT(index, pname, @params);
            }
            
            public static 
            void GetVertexAttribIivEXT(GLuint index, GL.Enums.NV_vertex_program4 pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribIivEXT(index, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetVertexAttribIivEXT(GLuint index, GL.Enums.NV_vertex_program4 pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribIivEXT(index, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetVertexAttribIuivEXT(GLuint index, GL.Enums.NV_vertex_program4 pname, GLuint* @params)
            {
                Delegates.glGetVertexAttribIuivEXT(index, pname, @params);
            }
            
            public static 
            void GetVertexAttribIuivEXT(GLuint index, GL.Enums.NV_vertex_program4 pname, GLuint[] @params)
            {
                unsafe
                {
                    fixed (GLuint* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribIuivEXT(index, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetVertexAttribIuivEXT(GLuint index, GL.Enums.NV_vertex_program4 pname, out GLuint @params)
            {
                @params = default(GLuint);
                unsafe
                {
                    fixed (GLuint* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribIuivEXT(index, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetUniformuivEXT(GLuint program, GLint location, GLuint* @params)
            {
                Delegates.glGetUniformuivEXT(program, location, @params);
            }
            
            public static 
            void GetUniformuivEXT(GLuint program, GLint location, GLuint[] @params)
            {
                unsafe
                {
                    fixed (GLuint* @params_ptr = @params)
                    {
                        Delegates.glGetUniformuivEXT(program, location, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetUniformuivEXT(GLuint program, GLint location, out GLuint @params)
            {
                @params = default(GLuint);
                unsafe
                {
                    fixed (GLuint* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformuivEXT(program, location, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void BindFragDataLocationEXT(GLuint program, GLuint color, System.String name)
            {
                Delegates.glBindFragDataLocationEXT(program, color, name);
            }
            
            public static 
            unsafe GLint GetFragDataLocationEXT(GLuint program, System.String name)
            {
                return Delegates.glGetFragDataLocationEXT(program, name);
            }
            
            public static 
            void Uniform1uiEXT(GLint location, GLuint v0)
            {
                Delegates.glUniform1uiEXT(location, v0);
            }
            
            public static 
            void Uniform2uiEXT(GLint location, GLuint v0, GLuint v1)
            {
                Delegates.glUniform2uiEXT(location, v0, v1);
            }
            
            public static 
            void Uniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2)
            {
                Delegates.glUniform3uiEXT(location, v0, v1, v2);
            }
            
            public static 
            void Uniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
            {
                Delegates.glUniform4uiEXT(location, v0, v1, v2, v3);
            }
            
            public static 
            unsafe void Uniform1uivEXT(GLint location, GLsizei count, GLuint* value)
            {
                Delegates.glUniform1uivEXT(location, count, value);
            }
            
            public static 
            void Uniform1uivEXT(GLint location, GLsizei count, GLuint[] value)
            {
                unsafe
                {
                    fixed (GLuint* value_ptr = value)
                    {
                        Delegates.glUniform1uivEXT(location, count, value_ptr);
                    }
                }
            }
            
            public static 
            void Uniform1uivEXT(GLint location, GLsizei count, ref GLuint value)
            {
                unsafe
                {
                    fixed (GLuint* value_ptr = &value)
                    {
                        Delegates.glUniform1uivEXT(location, count, value_ptr);
                    }
                }
            }
            
            public static 
            unsafe void Uniform2uivEXT(GLint location, GLsizei count, GLuint* value)
            {
                Delegates.glUniform2uivEXT(location, count, value);
            }
            
            public static 
            void Uniform2uivEXT(GLint location, GLsizei count, GLuint[] value)
            {
                unsafe
                {
                    fixed (GLuint* value_ptr = value)
                    {
                        Delegates.glUniform2uivEXT(location, count, value_ptr);
                    }
                }
            }
            
            public static 
            void Uniform2uivEXT(GLint location, GLsizei count, ref GLuint value)
            {
                unsafe
                {
                    fixed (GLuint* value_ptr = &value)
                    {
                        Delegates.glUniform2uivEXT(location, count, value_ptr);
                    }
                }
            }
            
            public static 
            unsafe void Uniform3uivEXT(GLint location, GLsizei count, GLuint* value)
            {
                Delegates.glUniform3uivEXT(location, count, value);
            }
            
            public static 
            void Uniform3uivEXT(GLint location, GLsizei count, GLuint[] value)
            {
                unsafe
                {
                    fixed (GLuint* value_ptr = value)
                    {
                        Delegates.glUniform3uivEXT(location, count, value_ptr);
                    }
                }
            }
            
            public static 
            void Uniform3uivEXT(GLint location, GLsizei count, ref GLuint value)
            {
                unsafe
                {
                    fixed (GLuint* value_ptr = &value)
                    {
                        Delegates.glUniform3uivEXT(location, count, value_ptr);
                    }
                }
            }
            
            public static 
            unsafe void Uniform4uivEXT(GLint location, GLsizei count, GLuint* value)
            {
                Delegates.glUniform4uivEXT(location, count, value);
            }
            
            public static 
            void Uniform4uivEXT(GLint location, GLsizei count, GLuint[] value)
            {
                unsafe
                {
                    fixed (GLuint* value_ptr = value)
                    {
                        Delegates.glUniform4uivEXT(location, count, value_ptr);
                    }
                }
            }
            
            public static 
            void Uniform4uivEXT(GLint location, GLsizei count, ref GLuint value)
            {
                unsafe
                {
                    fixed (GLuint* value_ptr = &value)
                    {
                        Delegates.glUniform4uivEXT(location, count, value_ptr);
                    }
                }
            }
            
            public static 
            void DrawArraysInstancedEXT(GL.Enums.BeginMode mode, GLint start, GLsizei count, GLsizei primcount)
            {
                Delegates.glDrawArraysInstancedEXT(mode, start, count, primcount);
            }
            
            public static 
            unsafe void DrawElementsInstancedEXT(GL.Enums.BeginMode mode, GLsizei count, GL.Enums.EXT_draw_instanced type, void* indices, GLsizei primcount)
            {
                Delegates.glDrawElementsInstancedEXT(mode, count, type, indices, primcount);
            }
            
            public static 
            void DrawElementsInstancedEXT(GL.Enums.BeginMode mode, GLsizei count, GL.Enums.EXT_draw_instanced type, object indices, GLsizei primcount)
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glDrawElementsInstancedEXT(mode, count, type, (void*)indices_ptr.AddrOfPinnedObject(), primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
            
            public static 
            void TexBufferEXT(GL.Enums.TextureTarget target, GL.Enums.EXT_texture_buffer_object internalformat, GLuint buffer)
            {
                Delegates.glTexBufferEXT(target, internalformat, buffer);
            }
            
            public static 
            unsafe void GetBooleanIndexedvEXT(GL.Enums.EXT_draw_buffers2 target, GLuint index, GL.Enums.Boolean* data)
            {
                Delegates.glGetBooleanIndexedvEXT(target, index, data);
            }
            
            public static 
            unsafe void GetIntegerIndexedvEXT(GL.Enums.EXT_draw_buffers2 target, GLuint index, GLint* data)
            {
                Delegates.glGetIntegerIndexedvEXT(target, index, data);
            }
            
            public static 
            void GetIntegerIndexedvEXT(GL.Enums.EXT_draw_buffers2 target, GLuint index, GLint[] data)
            {
                unsafe
                {
                    fixed (GLint* data_ptr = data)
                    {
                        Delegates.glGetIntegerIndexedvEXT(target, index, data_ptr);
                    }
                }
            }
            
            public static 
            void GetIntegerIndexedvEXT(GL.Enums.EXT_draw_buffers2 target, GLuint index, out GLint data)
            {
                data = default(GLint);
                unsafe
                {
                    fixed (GLint* data_ptr = &data)
                    {
                        Delegates.glGetIntegerIndexedvEXT(target, index, data_ptr);
                        data = *data_ptr;
                    }
                }
            }
            
            public static 
            void EnableIndexedEXT(GL.Enums.EXT_draw_buffers2 target, GLuint index)
            {
                Delegates.glEnableIndexedEXT(target, index);
            }
            
            public static 
            void DisableIndexedEXT(GL.Enums.EXT_draw_buffers2 target, GLuint index)
            {
                Delegates.glDisableIndexedEXT(target, index);
            }
            
            public static 
            GLboolean IsEnabledIndexedEXT(GL.Enums.EXT_draw_buffers2 target, GLuint index)
            {
                return Delegates.glIsEnabledIndexedEXT(target, index);
            }
            
            public static 
            void UniformBufferEXT(GLuint program, GLint location, GLuint buffer)
            {
                Delegates.glUniformBufferEXT(program, location, buffer);
            }
            
            public static 
            GLint GetUniformBufferSizeEXT(GLuint program, GLint location)
            {
                return Delegates.glGetUniformBufferSizeEXT(program, location);
            }
            
            public static 
            GLintptr GetUniformOffsetEXT(GLuint program, GLint location)
            {
                return Delegates.glGetUniformOffsetEXT(program, location);
            }
            
            public static 
            unsafe void TexParameterIivEXT(GL.Enums.TextureTarget target, GL.Enums.TextureParameterName pname, GLint* @params)
            {
                Delegates.glTexParameterIivEXT(target, pname, @params);
            }
            
            public static 
            void TexParameterIivEXT(GL.Enums.TextureTarget target, GL.Enums.TextureParameterName pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glTexParameterIivEXT(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void TexParameterIivEXT(GL.Enums.TextureTarget target, GL.Enums.TextureParameterName pname, ref GLint @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glTexParameterIivEXT(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexParameterIuivEXT(GL.Enums.TextureTarget target, GL.Enums.TextureParameterName pname, GLuint* @params)
            {
                Delegates.glTexParameterIuivEXT(target, pname, @params);
            }
            
            public static 
            void TexParameterIuivEXT(GL.Enums.TextureTarget target, GL.Enums.TextureParameterName pname, GLuint[] @params)
            {
                unsafe
                {
                    fixed (GLuint* @params_ptr = @params)
                    {
                        Delegates.glTexParameterIuivEXT(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void TexParameterIuivEXT(GL.Enums.TextureTarget target, GL.Enums.TextureParameterName pname, ref GLuint @params)
            {
                unsafe
                {
                    fixed (GLuint* @params_ptr = &@params)
                    {
                        Delegates.glTexParameterIuivEXT(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void GetTexParameterIivEXT(GL.Enums.TextureTarget target, GL.Enums.GetTextureParameter pname, GLint* @params)
            {
                Delegates.glGetTexParameterIivEXT(target, pname, @params);
            }
            
            public static 
            void GetTexParameterIivEXT(GL.Enums.TextureTarget target, GL.Enums.GetTextureParameter pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetTexParameterIivEXT(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetTexParameterIivEXT(GL.Enums.TextureTarget target, GL.Enums.GetTextureParameter pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetTexParameterIivEXT(target, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetTexParameterIuivEXT(GL.Enums.TextureTarget target, GL.Enums.GetTextureParameter pname, GLuint* @params)
            {
                Delegates.glGetTexParameterIuivEXT(target, pname, @params);
            }
            
            public static 
            void GetTexParameterIuivEXT(GL.Enums.TextureTarget target, GL.Enums.GetTextureParameter pname, GLuint[] @params)
            {
                unsafe
                {
                    fixed (GLuint* @params_ptr = @params)
                    {
                        Delegates.glGetTexParameterIuivEXT(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetTexParameterIuivEXT(GL.Enums.TextureTarget target, GL.Enums.GetTextureParameter pname, out GLuint @params)
            {
                @params = default(GLuint);
                unsafe
                {
                    fixed (GLuint* @params_ptr = &@params)
                    {
                        Delegates.glGetTexParameterIuivEXT(target, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            void ClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha)
            {
                Delegates.glClearColorIiEXT(red, green, blue, alpha);
            }
            
            public static 
            void ClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha)
            {
                Delegates.glClearColorIuiEXT(red, green, blue, alpha);
            }
            
        }

        public static class SGIS
        {
            public static 
            unsafe void GetTexFilterFuncSGIS(GL.Enums.TextureTarget target, GL.Enums.SGIS_texture_filter4 filter, GLfloat* weights)
            {
                Delegates.glGetTexFilterFuncSGIS(target, filter, weights);
            }
            
            public static 
            void GetTexFilterFuncSGIS(GL.Enums.TextureTarget target, GL.Enums.SGIS_texture_filter4 filter, GLfloat[] weights)
            {
                unsafe
                {
                    fixed (GLfloat* weights_ptr = weights)
                    {
                        Delegates.glGetTexFilterFuncSGIS(target, filter, weights_ptr);
                    }
                }
            }
            
            public static 
            void GetTexFilterFuncSGIS(GL.Enums.TextureTarget target, GL.Enums.SGIS_texture_filter4 filter, out GLfloat weights)
            {
                weights = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* weights_ptr = &weights)
                    {
                        Delegates.glGetTexFilterFuncSGIS(target, filter, weights_ptr);
                        weights = *weights_ptr;
                    }
                }
            }
            
            public static 
            unsafe void TexFilterFuncSGIS(GL.Enums.TextureTarget target, GL.Enums.SGIS_texture_filter4 filter, GLsizei n, GLfloat* weights)
            {
                Delegates.glTexFilterFuncSGIS(target, filter, n, weights);
            }
            
            public static 
            void TexFilterFuncSGIS(GL.Enums.TextureTarget target, GL.Enums.SGIS_texture_filter4 filter, GLsizei n, GLfloat[] weights)
            {
                unsafe
                {
                    fixed (GLfloat* weights_ptr = weights)
                    {
                        Delegates.glTexFilterFuncSGIS(target, filter, n, weights_ptr);
                    }
                }
            }
            
            public static 
            void TexFilterFuncSGIS(GL.Enums.TextureTarget target, GL.Enums.SGIS_texture_filter4 filter, GLsizei n, ref GLfloat weights)
            {
                unsafe
                {
                    fixed (GLfloat* weights_ptr = &weights)
                    {
                        Delegates.glTexFilterFuncSGIS(target, filter, n, weights_ptr);
                    }
                }
            }
            
            public static 
            void PixelTexGenParameteriSGIS(GL.Enums.PixelTexGenParameterNameSGIS pname, GLint param)
            {
                Delegates.glPixelTexGenParameteriSGIS(pname, param);
            }
            
            public static 
            unsafe void PixelTexGenParameterivSGIS(GL.Enums.PixelTexGenParameterNameSGIS pname, GLint* @params)
            {
                Delegates.glPixelTexGenParameterivSGIS(pname, @params);
            }
            
            public static 
            void PixelTexGenParameterivSGIS(GL.Enums.PixelTexGenParameterNameSGIS pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glPixelTexGenParameterivSGIS(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void PixelTexGenParameterivSGIS(GL.Enums.PixelTexGenParameterNameSGIS pname, ref GLint @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glPixelTexGenParameterivSGIS(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void PixelTexGenParameterfSGIS(GL.Enums.PixelTexGenParameterNameSGIS pname, GLfloat param)
            {
                Delegates.glPixelTexGenParameterfSGIS(pname, param);
            }
            
            public static 
            unsafe void PixelTexGenParameterfvSGIS(GL.Enums.PixelTexGenParameterNameSGIS pname, GLfloat* @params)
            {
                Delegates.glPixelTexGenParameterfvSGIS(pname, @params);
            }
            
            public static 
            void PixelTexGenParameterfvSGIS(GL.Enums.PixelTexGenParameterNameSGIS pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glPixelTexGenParameterfvSGIS(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void PixelTexGenParameterfvSGIS(GL.Enums.PixelTexGenParameterNameSGIS pname, ref GLfloat @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glPixelTexGenParameterfvSGIS(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void GetPixelTexGenParameterivSGIS(GL.Enums.PixelTexGenParameterNameSGIS pname, GLint* @params)
            {
                Delegates.glGetPixelTexGenParameterivSGIS(pname, @params);
            }
            
            public static 
            void GetPixelTexGenParameterivSGIS(GL.Enums.PixelTexGenParameterNameSGIS pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetPixelTexGenParameterivSGIS(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetPixelTexGenParameterivSGIS(GL.Enums.PixelTexGenParameterNameSGIS pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetPixelTexGenParameterivSGIS(pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetPixelTexGenParameterfvSGIS(GL.Enums.PixelTexGenParameterNameSGIS pname, GLfloat* @params)
            {
                Delegates.glGetPixelTexGenParameterfvSGIS(pname, @params);
            }
            
            public static 
            void GetPixelTexGenParameterfvSGIS(GL.Enums.PixelTexGenParameterNameSGIS pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetPixelTexGenParameterfvSGIS(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetPixelTexGenParameterfvSGIS(GL.Enums.PixelTexGenParameterNameSGIS pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetPixelTexGenParameterfvSGIS(pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void TexImage4DSGIS(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels)
            {
                Delegates.glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
            }
            
            public static 
            void TexImage4DSGIS(GL.Enums.TextureTarget target, GLint level, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object pixels)
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, (void*)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void TexSubImage4DSGIS(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* pixels)
            {
                Delegates.glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
            }
            
            public static 
            void TexSubImage4DSGIS(GL.Enums.TextureTarget target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object pixels)
            {
                System.Runtime.InteropServices.GCHandle pixels_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pixels, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, (void*)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void DetailTexFuncSGIS(GL.Enums.TextureTarget target, GLsizei n, GLfloat* points)
            {
                Delegates.glDetailTexFuncSGIS(target, n, points);
            }
            
            public static 
            void DetailTexFuncSGIS(GL.Enums.TextureTarget target, GLsizei n, GLfloat[] points)
            {
                unsafe
                {
                    fixed (GLfloat* points_ptr = points)
                    {
                        Delegates.glDetailTexFuncSGIS(target, n, points_ptr);
                    }
                }
            }
            
            public static 
            void DetailTexFuncSGIS(GL.Enums.TextureTarget target, GLsizei n, ref GLfloat points)
            {
                unsafe
                {
                    fixed (GLfloat* points_ptr = &points)
                    {
                        Delegates.glDetailTexFuncSGIS(target, n, points_ptr);
                    }
                }
            }
            
            public static 
            unsafe void GetDetailTexFuncSGIS(GL.Enums.TextureTarget target, GLfloat* points)
            {
                Delegates.glGetDetailTexFuncSGIS(target, points);
            }
            
            public static 
            void GetDetailTexFuncSGIS(GL.Enums.TextureTarget target, GLfloat[] points)
            {
                unsafe
                {
                    fixed (GLfloat* points_ptr = points)
                    {
                        Delegates.glGetDetailTexFuncSGIS(target, points_ptr);
                    }
                }
            }
            
            public static 
            void GetDetailTexFuncSGIS(GL.Enums.TextureTarget target, out GLfloat points)
            {
                points = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* points_ptr = &points)
                    {
                        Delegates.glGetDetailTexFuncSGIS(target, points_ptr);
                        points = *points_ptr;
                    }
                }
            }
            
            public static 
            unsafe void SharpenTexFuncSGIS(GL.Enums.TextureTarget target, GLsizei n, GLfloat* points)
            {
                Delegates.glSharpenTexFuncSGIS(target, n, points);
            }
            
            public static 
            void SharpenTexFuncSGIS(GL.Enums.TextureTarget target, GLsizei n, GLfloat[] points)
            {
                unsafe
                {
                    fixed (GLfloat* points_ptr = points)
                    {
                        Delegates.glSharpenTexFuncSGIS(target, n, points_ptr);
                    }
                }
            }
            
            public static 
            void SharpenTexFuncSGIS(GL.Enums.TextureTarget target, GLsizei n, ref GLfloat points)
            {
                unsafe
                {
                    fixed (GLfloat* points_ptr = &points)
                    {
                        Delegates.glSharpenTexFuncSGIS(target, n, points_ptr);
                    }
                }
            }
            
            public static 
            unsafe void GetSharpenTexFuncSGIS(GL.Enums.TextureTarget target, GLfloat* points)
            {
                Delegates.glGetSharpenTexFuncSGIS(target, points);
            }
            
            public static 
            void GetSharpenTexFuncSGIS(GL.Enums.TextureTarget target, GLfloat[] points)
            {
                unsafe
                {
                    fixed (GLfloat* points_ptr = points)
                    {
                        Delegates.glGetSharpenTexFuncSGIS(target, points_ptr);
                    }
                }
            }
            
            public static 
            void GetSharpenTexFuncSGIS(GL.Enums.TextureTarget target, out GLfloat points)
            {
                points = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* points_ptr = &points)
                    {
                        Delegates.glGetSharpenTexFuncSGIS(target, points_ptr);
                        points = *points_ptr;
                    }
                }
            }
            
            public static 
            void SamplePatternSGIS(GL.Enums.SamplePatternSGIS pattern)
            {
                Delegates.glSamplePatternSGIS(pattern);
            }
            
            public static 
            void PointParameterfSGIS(GL.Enums.SGIS_point_parameters pname, GLfloat param)
            {
                Delegates.glPointParameterfSGIS(pname, param);
            }
            
            public static 
            unsafe void PointParameterfvSGIS(GL.Enums.SGIS_point_parameters pname, GLfloat* @params)
            {
                Delegates.glPointParameterfvSGIS(pname, @params);
            }
            
            public static 
            void PointParameterfvSGIS(GL.Enums.SGIS_point_parameters pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glPointParameterfvSGIS(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void PointParameterfvSGIS(GL.Enums.SGIS_point_parameters pname, ref GLfloat @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glPointParameterfvSGIS(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void FogFuncSGIS(GLsizei n, GLfloat* points)
            {
                Delegates.glFogFuncSGIS(n, points);
            }
            
            public static 
            void FogFuncSGIS(GLsizei n, GLfloat[] points)
            {
                unsafe
                {
                    fixed (GLfloat* points_ptr = points)
                    {
                        Delegates.glFogFuncSGIS(n, points_ptr);
                    }
                }
            }
            
            public static 
            void FogFuncSGIS(GLsizei n, ref GLfloat points)
            {
                unsafe
                {
                    fixed (GLfloat* points_ptr = &points)
                    {
                        Delegates.glFogFuncSGIS(n, points_ptr);
                    }
                }
            }
            
            public static 
            unsafe void GetFogFuncSGIS(GLfloat* points)
            {
                Delegates.glGetFogFuncSGIS(points);
            }
            
            public static 
            void GetFogFuncSGIS(GLfloat[] points)
            {
                unsafe
                {
                    fixed (GLfloat* points_ptr = points)
                    {
                        Delegates.glGetFogFuncSGIS(points_ptr);
                    }
                }
            }
            
            public static 
            void GetFogFuncSGIS(out GLfloat points)
            {
                points = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* points_ptr = &points)
                    {
                        Delegates.glGetFogFuncSGIS(points_ptr);
                        points = *points_ptr;
                    }
                }
            }
            
        }

        public static class SGI
        {
            public static 
            unsafe void ColorTableSGI(GL.Enums.ColorTableTargetSGI target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* table)
            {
                Delegates.glColorTableSGI(target, internalformat, width, format, type, table);
            }
            
            public static 
            void ColorTableSGI(GL.Enums.ColorTableTargetSGI target, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object table)
            {
                System.Runtime.InteropServices.GCHandle table_ptr = System.Runtime.InteropServices.GCHandle.Alloc(table, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glColorTableSGI(target, internalformat, width, format, type, (void*)table_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        table_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void ColorTableParameterfvSGI(GL.Enums.ColorTableTargetSGI target, GL.Enums.ColorTableParameterPNameSGI pname, GLfloat* @params)
            {
                Delegates.glColorTableParameterfvSGI(target, pname, @params);
            }
            
            public static 
            void ColorTableParameterfvSGI(GL.Enums.ColorTableTargetSGI target, GL.Enums.ColorTableParameterPNameSGI pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glColorTableParameterfvSGI(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void ColorTableParameterfvSGI(GL.Enums.ColorTableTargetSGI target, GL.Enums.ColorTableParameterPNameSGI pname, ref GLfloat @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glColorTableParameterfvSGI(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ColorTableParameterivSGI(GL.Enums.ColorTableTargetSGI target, GL.Enums.ColorTableParameterPNameSGI pname, GLint* @params)
            {
                Delegates.glColorTableParameterivSGI(target, pname, @params);
            }
            
            public static 
            void ColorTableParameterivSGI(GL.Enums.ColorTableTargetSGI target, GL.Enums.ColorTableParameterPNameSGI pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glColorTableParameterivSGI(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void ColorTableParameterivSGI(GL.Enums.ColorTableTargetSGI target, GL.Enums.ColorTableParameterPNameSGI pname, ref GLint @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glColorTableParameterivSGI(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void CopyColorTableSGI(GL.Enums.ColorTableTargetSGI target, GL.Enums.PixelInternalFormat internalformat, GLint x, GLint y, GLsizei width)
            {
                Delegates.glCopyColorTableSGI(target, internalformat, x, y, width);
            }
            
            public static 
            unsafe void GetColorTableSGI(GL.Enums.ColorTableTargetSGI target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, void* table)
            {
                Delegates.glGetColorTableSGI(target, format, type, table);
            }
            
            public static 
            void GetColorTableSGI(GL.Enums.ColorTableTargetSGI target, GL.Enums.PixelFormat format, GL.Enums.PixelType type, object table)
            {
                System.Runtime.InteropServices.GCHandle table_ptr = System.Runtime.InteropServices.GCHandle.Alloc(table, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glGetColorTableSGI(target, format, type, (void*)table_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        table_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void GetColorTableParameterfvSGI(GL.Enums.ColorTableTargetSGI target, GL.Enums.GetColorTableParameterPNameSGI pname, GLfloat* @params)
            {
                Delegates.glGetColorTableParameterfvSGI(target, pname, @params);
            }
            
            public static 
            void GetColorTableParameterfvSGI(GL.Enums.ColorTableTargetSGI target, GL.Enums.GetColorTableParameterPNameSGI pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetColorTableParameterfvSGI(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetColorTableParameterfvSGI(GL.Enums.ColorTableTargetSGI target, GL.Enums.GetColorTableParameterPNameSGI pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetColorTableParameterfvSGI(target, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetColorTableParameterivSGI(GL.Enums.ColorTableTargetSGI target, GL.Enums.GetColorTableParameterPNameSGI pname, GLint* @params)
            {
                Delegates.glGetColorTableParameterivSGI(target, pname, @params);
            }
            
            public static 
            void GetColorTableParameterivSGI(GL.Enums.ColorTableTargetSGI target, GL.Enums.GetColorTableParameterPNameSGI pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetColorTableParameterivSGI(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetColorTableParameterivSGI(GL.Enums.ColorTableTargetSGI target, GL.Enums.GetColorTableParameterPNameSGI pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetColorTableParameterivSGI(target, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
        }

        public static class SGIX
        {
            public static 
            void PixelTexGenSGIX(GL.Enums.SGIX_pixel_texture mode)
            {
                Delegates.glPixelTexGenSGIX(mode);
            }
            
            public static 
            void SpriteParameterfSGIX(GL.Enums.SGIX_sprite pname, GLfloat param)
            {
                Delegates.glSpriteParameterfSGIX(pname, param);
            }
            
            public static 
            unsafe void SpriteParameterfvSGIX(GL.Enums.SGIX_sprite pname, GLfloat* @params)
            {
                Delegates.glSpriteParameterfvSGIX(pname, @params);
            }
            
            public static 
            void SpriteParameterfvSGIX(GL.Enums.SGIX_sprite pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glSpriteParameterfvSGIX(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void SpriteParameterfvSGIX(GL.Enums.SGIX_sprite pname, ref GLfloat @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glSpriteParameterfvSGIX(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void SpriteParameteriSGIX(GL.Enums.SGIX_sprite pname, GLint param)
            {
                Delegates.glSpriteParameteriSGIX(pname, param);
            }
            
            public static 
            unsafe void SpriteParameterivSGIX(GL.Enums.SGIX_sprite pname, GLint* @params)
            {
                Delegates.glSpriteParameterivSGIX(pname, @params);
            }
            
            public static 
            void SpriteParameterivSGIX(GL.Enums.SGIX_sprite pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glSpriteParameterivSGIX(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void SpriteParameterivSGIX(GL.Enums.SGIX_sprite pname, ref GLint @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glSpriteParameterivSGIX(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            GLint GetInstrumentsSGIX()
            {
                return Delegates.glGetInstrumentsSGIX();
            }
            
            public static 
            unsafe void InstrumentsBufferSGIX(GLsizei size, GLint* buffer)
            {
                Delegates.glInstrumentsBufferSGIX(size, buffer);
            }
            
            public static 
            void InstrumentsBufferSGIX(GLsizei size, GLint[] buffer)
            {
                unsafe
                {
                    fixed (GLint* buffer_ptr = buffer)
                    {
                        Delegates.glInstrumentsBufferSGIX(size, buffer_ptr);
                    }
                }
            }
            
            public static 
            void InstrumentsBufferSGIX(GLsizei size, out GLint buffer)
            {
                buffer = default(GLint);
                unsafe
                {
                    fixed (GLint* buffer_ptr = &buffer)
                    {
                        Delegates.glInstrumentsBufferSGIX(size, buffer_ptr);
                        buffer = *buffer_ptr;
                    }
                }
            }
            
            public static 
            unsafe GLint PollInstrumentsSGIX(GLint* marker_p)
            {
                return Delegates.glPollInstrumentsSGIX(marker_p);
            }
            
            public static 
            GLint PollInstrumentsSGIX(GLint[] marker_p)
            {
                unsafe
                {
                    fixed (GLint* marker_p_ptr = marker_p)
                    {
                        GLint retval = Delegates.glPollInstrumentsSGIX(marker_p_ptr);
                        return retval;
                    }
                }
            }
            
            public static 
            GLint PollInstrumentsSGIX(out GLint marker_p)
            {
                marker_p = default(GLint);
                unsafe
                {
                    fixed (GLint* marker_p_ptr = &marker_p)
                    {
                        GLint retval = Delegates.glPollInstrumentsSGIX(marker_p_ptr);
                        marker_p = *marker_p_ptr;
                        return retval;
                    }
                }
            }
            
            public static 
            void ReadInstrumentsSGIX(GLint marker)
            {
                Delegates.glReadInstrumentsSGIX(marker);
            }
            
            public static 
            void StartInstrumentsSGIX()
            {
                Delegates.glStartInstrumentsSGIX();
            }
            
            public static 
            void StopInstrumentsSGIX(GLint marker)
            {
                Delegates.glStopInstrumentsSGIX(marker);
            }
            
            public static 
            void FrameZoomSGIX(GLint factor)
            {
                Delegates.glFrameZoomSGIX(factor);
            }
            
            public static 
            void TagSampleBufferSGIX()
            {
                Delegates.glTagSampleBufferSGIX();
            }
            
            public static 
            unsafe void DeformationMap3dSGIX(GL.Enums.FfdTargetSGIX target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, GLdouble* points)
            {
                Delegates.glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
            }
            
            public static 
            void DeformationMap3dSGIX(GL.Enums.FfdTargetSGIX target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, GLdouble[] points)
            {
                unsafe
                {
                    fixed (GLdouble* points_ptr = points)
                    {
                        Delegates.glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
                    }
                }
            }
            
            public static 
            void DeformationMap3dSGIX(GL.Enums.FfdTargetSGIX target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, ref GLdouble points)
            {
                unsafe
                {
                    fixed (GLdouble* points_ptr = &points)
                    {
                        Delegates.glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
                    }
                }
            }
            
            public static 
            unsafe void DeformationMap3fSGIX(GL.Enums.FfdTargetSGIX target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, GLfloat* points)
            {
                Delegates.glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
            }
            
            public static 
            void DeformationMap3fSGIX(GL.Enums.FfdTargetSGIX target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, GLfloat[] points)
            {
                unsafe
                {
                    fixed (GLfloat* points_ptr = points)
                    {
                        Delegates.glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
                    }
                }
            }
            
            public static 
            void DeformationMap3fSGIX(GL.Enums.FfdTargetSGIX target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, ref GLfloat points)
            {
                unsafe
                {
                    fixed (GLfloat* points_ptr = &points)
                    {
                        Delegates.glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points_ptr);
                    }
                }
            }
            
            public static 
            void DeformSGIX(GL.Enums.FfdMaskSGIX mask)
            {
                Delegates.glDeformSGIX(mask);
            }
            
            public static 
            void LoadIdentityDeformationMapSGIX(GL.Enums.FfdMaskSGIX mask)
            {
                Delegates.glLoadIdentityDeformationMapSGIX(mask);
            }
            
            public static 
            unsafe void ReferencePlaneSGIX(GLdouble* equation)
            {
                Delegates.glReferencePlaneSGIX(equation);
            }
            
            public static 
            void ReferencePlaneSGIX(GLdouble[] equation)
            {
                unsafe
                {
                    fixed (GLdouble* equation_ptr = equation)
                    {
                        Delegates.glReferencePlaneSGIX(equation_ptr);
                    }
                }
            }
            
            public static 
            void ReferencePlaneSGIX(ref GLdouble equation)
            {
                unsafe
                {
                    fixed (GLdouble* equation_ptr = &equation)
                    {
                        Delegates.glReferencePlaneSGIX(equation_ptr);
                    }
                }
            }
            
            public static 
            void FlushRasterSGIX()
            {
                Delegates.glFlushRasterSGIX();
            }
            
            public static 
            unsafe void GetListParameterfvSGIX(GLuint list, GL.Enums.ListParameterName pname, GLfloat* @params)
            {
                Delegates.glGetListParameterfvSGIX(list, pname, @params);
            }
            
            public static 
            void GetListParameterfvSGIX(GLuint list, GL.Enums.ListParameterName pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetListParameterfvSGIX(list, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetListParameterfvSGIX(GLuint list, GL.Enums.ListParameterName pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetListParameterfvSGIX(list, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetListParameterivSGIX(GLuint list, GL.Enums.ListParameterName pname, GLint* @params)
            {
                Delegates.glGetListParameterivSGIX(list, pname, @params);
            }
            
            public static 
            void GetListParameterivSGIX(GLuint list, GL.Enums.ListParameterName pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetListParameterivSGIX(list, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetListParameterivSGIX(GLuint list, GL.Enums.ListParameterName pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetListParameterivSGIX(list, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            void ListParameterfSGIX(GLuint list, GL.Enums.ListParameterName pname, GLfloat param)
            {
                Delegates.glListParameterfSGIX(list, pname, param);
            }
            
            public static 
            unsafe void ListParameterfvSGIX(GLuint list, GL.Enums.ListParameterName pname, GLfloat* @params)
            {
                Delegates.glListParameterfvSGIX(list, pname, @params);
            }
            
            public static 
            void ListParameterfvSGIX(GLuint list, GL.Enums.ListParameterName pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glListParameterfvSGIX(list, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void ListParameterfvSGIX(GLuint list, GL.Enums.ListParameterName pname, ref GLfloat @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glListParameterfvSGIX(list, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void ListParameteriSGIX(GLuint list, GL.Enums.ListParameterName pname, GLint param)
            {
                Delegates.glListParameteriSGIX(list, pname, param);
            }
            
            public static 
            unsafe void ListParameterivSGIX(GLuint list, GL.Enums.ListParameterName pname, GLint* @params)
            {
                Delegates.glListParameterivSGIX(list, pname, @params);
            }
            
            public static 
            void ListParameterivSGIX(GLuint list, GL.Enums.ListParameterName pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glListParameterivSGIX(list, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void ListParameterivSGIX(GLuint list, GL.Enums.ListParameterName pname, ref GLint @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glListParameterivSGIX(list, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void FragmentColorMaterialSGIX(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter mode)
            {
                Delegates.glFragmentColorMaterialSGIX(face, mode);
            }
            
            public static 
            void FragmentLightfSGIX(GL.Enums.SGIX_fragment_lighting light, GL.Enums.SGIX_fragment_lighting pname, GLfloat param)
            {
                Delegates.glFragmentLightfSGIX(light, pname, param);
            }
            
            public static 
            unsafe void FragmentLightfvSGIX(GL.Enums.SGIX_fragment_lighting light, GL.Enums.SGIX_fragment_lighting pname, GLfloat* @params)
            {
                Delegates.glFragmentLightfvSGIX(light, pname, @params);
            }
            
            public static 
            void FragmentLightfvSGIX(GL.Enums.SGIX_fragment_lighting light, GL.Enums.SGIX_fragment_lighting pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glFragmentLightfvSGIX(light, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void FragmentLightfvSGIX(GL.Enums.SGIX_fragment_lighting light, GL.Enums.SGIX_fragment_lighting pname, ref GLfloat @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glFragmentLightfvSGIX(light, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void FragmentLightiSGIX(GL.Enums.SGIX_fragment_lighting light, GL.Enums.SGIX_fragment_lighting pname, GLint param)
            {
                Delegates.glFragmentLightiSGIX(light, pname, param);
            }
            
            public static 
            unsafe void FragmentLightivSGIX(GL.Enums.SGIX_fragment_lighting light, GL.Enums.SGIX_fragment_lighting pname, GLint* @params)
            {
                Delegates.glFragmentLightivSGIX(light, pname, @params);
            }
            
            public static 
            void FragmentLightivSGIX(GL.Enums.SGIX_fragment_lighting light, GL.Enums.SGIX_fragment_lighting pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glFragmentLightivSGIX(light, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void FragmentLightivSGIX(GL.Enums.SGIX_fragment_lighting light, GL.Enums.SGIX_fragment_lighting pname, ref GLint @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glFragmentLightivSGIX(light, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void FragmentLightModelfSGIX(GL.Enums.FragmentLightModelParameterSGIX pname, GLfloat param)
            {
                Delegates.glFragmentLightModelfSGIX(pname, param);
            }
            
            public static 
            unsafe void FragmentLightModelfvSGIX(GL.Enums.FragmentLightModelParameterSGIX pname, GLfloat* @params)
            {
                Delegates.glFragmentLightModelfvSGIX(pname, @params);
            }
            
            public static 
            void FragmentLightModelfvSGIX(GL.Enums.FragmentLightModelParameterSGIX pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glFragmentLightModelfvSGIX(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void FragmentLightModelfvSGIX(GL.Enums.FragmentLightModelParameterSGIX pname, ref GLfloat @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glFragmentLightModelfvSGIX(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void FragmentLightModeliSGIX(GL.Enums.FragmentLightModelParameterSGIX pname, GLint param)
            {
                Delegates.glFragmentLightModeliSGIX(pname, param);
            }
            
            public static 
            unsafe void FragmentLightModelivSGIX(GL.Enums.FragmentLightModelParameterSGIX pname, GLint* @params)
            {
                Delegates.glFragmentLightModelivSGIX(pname, @params);
            }
            
            public static 
            void FragmentLightModelivSGIX(GL.Enums.FragmentLightModelParameterSGIX pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glFragmentLightModelivSGIX(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void FragmentLightModelivSGIX(GL.Enums.FragmentLightModelParameterSGIX pname, ref GLint @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glFragmentLightModelivSGIX(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void FragmentMaterialfSGIX(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLfloat param)
            {
                Delegates.glFragmentMaterialfSGIX(face, pname, param);
            }
            
            public static 
            unsafe void FragmentMaterialfvSGIX(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLfloat* @params)
            {
                Delegates.glFragmentMaterialfvSGIX(face, pname, @params);
            }
            
            public static 
            void FragmentMaterialfvSGIX(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glFragmentMaterialfvSGIX(face, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void FragmentMaterialfvSGIX(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, ref GLfloat @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glFragmentMaterialfvSGIX(face, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void FragmentMaterialiSGIX(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLint param)
            {
                Delegates.glFragmentMaterialiSGIX(face, pname, param);
            }
            
            public static 
            unsafe void FragmentMaterialivSGIX(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLint* @params)
            {
                Delegates.glFragmentMaterialivSGIX(face, pname, @params);
            }
            
            public static 
            void FragmentMaterialivSGIX(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glFragmentMaterialivSGIX(face, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void FragmentMaterialivSGIX(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, ref GLint @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glFragmentMaterialivSGIX(face, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void GetFragmentLightfvSGIX(GL.Enums.SGIX_fragment_lighting light, GL.Enums.SGIX_fragment_lighting pname, GLfloat* @params)
            {
                Delegates.glGetFragmentLightfvSGIX(light, pname, @params);
            }
            
            public static 
            void GetFragmentLightfvSGIX(GL.Enums.SGIX_fragment_lighting light, GL.Enums.SGIX_fragment_lighting pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetFragmentLightfvSGIX(light, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetFragmentLightfvSGIX(GL.Enums.SGIX_fragment_lighting light, GL.Enums.SGIX_fragment_lighting pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetFragmentLightfvSGIX(light, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetFragmentLightivSGIX(GL.Enums.SGIX_fragment_lighting light, GL.Enums.SGIX_fragment_lighting pname, GLint* @params)
            {
                Delegates.glGetFragmentLightivSGIX(light, pname, @params);
            }
            
            public static 
            void GetFragmentLightivSGIX(GL.Enums.SGIX_fragment_lighting light, GL.Enums.SGIX_fragment_lighting pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetFragmentLightivSGIX(light, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetFragmentLightivSGIX(GL.Enums.SGIX_fragment_lighting light, GL.Enums.SGIX_fragment_lighting pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetFragmentLightivSGIX(light, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetFragmentMaterialfvSGIX(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLfloat* @params)
            {
                Delegates.glGetFragmentMaterialfvSGIX(face, pname, @params);
            }
            
            public static 
            void GetFragmentMaterialfvSGIX(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetFragmentMaterialfvSGIX(face, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetFragmentMaterialfvSGIX(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetFragmentMaterialfvSGIX(face, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetFragmentMaterialivSGIX(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLint* @params)
            {
                Delegates.glGetFragmentMaterialivSGIX(face, pname, @params);
            }
            
            public static 
            void GetFragmentMaterialivSGIX(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetFragmentMaterialivSGIX(face, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetFragmentMaterialivSGIX(GL.Enums.MaterialFace face, GL.Enums.MaterialParameter pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetFragmentMaterialivSGIX(face, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            void LightEnviSGIX(GL.Enums.LightEnvParameterSGIX pname, GLint param)
            {
                Delegates.glLightEnviSGIX(pname, param);
            }
            
            public static 
            void AsyncMarkerSGIX(GLuint marker)
            {
                Delegates.glAsyncMarkerSGIX(marker);
            }
            
            public static 
            unsafe GLint FinishAsyncSGIX(GLuint* markerp)
            {
                return Delegates.glFinishAsyncSGIX(markerp);
            }
            
            public static 
            GLint FinishAsyncSGIX(GLuint[] markerp)
            {
                unsafe
                {
                    fixed (GLuint* markerp_ptr = markerp)
                    {
                        GLint retval = Delegates.glFinishAsyncSGIX(markerp_ptr);
                        return retval;
                    }
                }
            }
            
            public static 
            GLint FinishAsyncSGIX(out GLuint markerp)
            {
                markerp = default(GLuint);
                unsafe
                {
                    fixed (GLuint* markerp_ptr = &markerp)
                    {
                        GLint retval = Delegates.glFinishAsyncSGIX(markerp_ptr);
                        markerp = *markerp_ptr;
                        return retval;
                    }
                }
            }
            
            public static 
            unsafe GLint PollAsyncSGIX(GLuint* markerp)
            {
                return Delegates.glPollAsyncSGIX(markerp);
            }
            
            public static 
            GLint PollAsyncSGIX(GLuint[] markerp)
            {
                unsafe
                {
                    fixed (GLuint* markerp_ptr = markerp)
                    {
                        GLint retval = Delegates.glPollAsyncSGIX(markerp_ptr);
                        return retval;
                    }
                }
            }
            
            public static 
            GLint PollAsyncSGIX(out GLuint markerp)
            {
                markerp = default(GLuint);
                unsafe
                {
                    fixed (GLuint* markerp_ptr = &markerp)
                    {
                        GLint retval = Delegates.glPollAsyncSGIX(markerp_ptr);
                        markerp = *markerp_ptr;
                        return retval;
                    }
                }
            }
            
            public static 
            GLuint GenAsyncMarkersSGIX(GLsizei range)
            {
                return Delegates.glGenAsyncMarkersSGIX(range);
            }
            
            public static 
            void DeleteAsyncMarkersSGIX(GLuint marker, GLsizei range)
            {
                Delegates.glDeleteAsyncMarkersSGIX(marker, range);
            }
            
            public static 
            GLboolean IsAsyncMarkerSGIX(GLuint marker)
            {
                return Delegates.glIsAsyncMarkerSGIX(marker);
            }
            
            public static 
            unsafe void IglooInterfaceSGIX(GL.Enums.GLenum pname, void* @params)
            {
                Delegates.glIglooInterfaceSGIX(pname, @params);
            }
            
            public static 
            void IglooInterfaceSGIX(GL.Enums.GLenum pname, object @params)
            {
                System.Runtime.InteropServices.GCHandle @params_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@params, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glIglooInterfaceSGIX(pname, (void*)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
            }
            
        }

        public static class HP
        {
            public static 
            void ImageTransformParameteriHP(GL.Enums.HP_image_transform target, GL.Enums.HP_image_transform pname, GLint param)
            {
                Delegates.glImageTransformParameteriHP(target, pname, param);
            }
            
            public static 
            void ImageTransformParameterfHP(GL.Enums.HP_image_transform target, GL.Enums.HP_image_transform pname, GLfloat param)
            {
                Delegates.glImageTransformParameterfHP(target, pname, param);
            }
            
            public static 
            unsafe void ImageTransformParameterivHP(GL.Enums.HP_image_transform target, GL.Enums.HP_image_transform pname, GLint* @params)
            {
                Delegates.glImageTransformParameterivHP(target, pname, @params);
            }
            
            public static 
            void ImageTransformParameterivHP(GL.Enums.HP_image_transform target, GL.Enums.HP_image_transform pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glImageTransformParameterivHP(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void ImageTransformParameterivHP(GL.Enums.HP_image_transform target, GL.Enums.HP_image_transform pname, ref GLint @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glImageTransformParameterivHP(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ImageTransformParameterfvHP(GL.Enums.HP_image_transform target, GL.Enums.HP_image_transform pname, GLfloat* @params)
            {
                Delegates.glImageTransformParameterfvHP(target, pname, @params);
            }
            
            public static 
            void ImageTransformParameterfvHP(GL.Enums.HP_image_transform target, GL.Enums.HP_image_transform pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glImageTransformParameterfvHP(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void ImageTransformParameterfvHP(GL.Enums.HP_image_transform target, GL.Enums.HP_image_transform pname, ref GLfloat @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glImageTransformParameterfvHP(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void GetImageTransformParameterivHP(GL.Enums.HP_image_transform target, GL.Enums.HP_image_transform pname, GLint* @params)
            {
                Delegates.glGetImageTransformParameterivHP(target, pname, @params);
            }
            
            public static 
            void GetImageTransformParameterivHP(GL.Enums.HP_image_transform target, GL.Enums.HP_image_transform pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetImageTransformParameterivHP(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetImageTransformParameterivHP(GL.Enums.HP_image_transform target, GL.Enums.HP_image_transform pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetImageTransformParameterivHP(target, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetImageTransformParameterfvHP(GL.Enums.HP_image_transform target, GL.Enums.HP_image_transform pname, GLfloat* @params)
            {
                Delegates.glGetImageTransformParameterfvHP(target, pname, @params);
            }
            
            public static 
            void GetImageTransformParameterfvHP(GL.Enums.HP_image_transform target, GL.Enums.HP_image_transform pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetImageTransformParameterfvHP(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetImageTransformParameterfvHP(GL.Enums.HP_image_transform target, GL.Enums.HP_image_transform pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetImageTransformParameterfvHP(target, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
        }

        public static class PGI
        {
            public static 
            void HintPGI(GL.Enums.PGI_misc_hints target, GLint mode)
            {
                Delegates.glHintPGI(target, mode);
            }
            
        }

        public static class SUNX
        {
            public static 
            void FinishTextureSUNX()
            {
                Delegates.glFinishTextureSUNX();
            }
            
        }

        public static class SUN
        {
            public static 
            void GlobalAlphaFactorbSUN(GLbyte factor)
            {
                Delegates.glGlobalAlphaFactorbSUN(factor);
            }
            
            public static 
            void GlobalAlphaFactorsSUN(GLshort factor)
            {
                Delegates.glGlobalAlphaFactorsSUN(factor);
            }
            
            public static 
            void GlobalAlphaFactoriSUN(GLint factor)
            {
                Delegates.glGlobalAlphaFactoriSUN(factor);
            }
            
            public static 
            void GlobalAlphaFactorfSUN(GLfloat factor)
            {
                Delegates.glGlobalAlphaFactorfSUN(factor);
            }
            
            public static 
            void GlobalAlphaFactordSUN(GLdouble factor)
            {
                Delegates.glGlobalAlphaFactordSUN(factor);
            }
            
            public static 
            void GlobalAlphaFactorubSUN(GLubyte factor)
            {
                Delegates.glGlobalAlphaFactorubSUN(factor);
            }
            
            public static 
            void GlobalAlphaFactorusSUN(GLushort factor)
            {
                Delegates.glGlobalAlphaFactorusSUN(factor);
            }
            
            public static 
            void GlobalAlphaFactoruiSUN(GLuint factor)
            {
                Delegates.glGlobalAlphaFactoruiSUN(factor);
            }
            
            public static 
            void ReplacementCodeuiSUN(GLuint code)
            {
                Delegates.glReplacementCodeuiSUN(code);
            }
            
            public static 
            void ReplacementCodeusSUN(GLushort code)
            {
                Delegates.glReplacementCodeusSUN(code);
            }
            
            public static 
            void ReplacementCodeubSUN(GLubyte code)
            {
                Delegates.glReplacementCodeubSUN(code);
            }
            
            public static 
            unsafe void ReplacementCodeuivSUN(GLuint* code)
            {
                Delegates.glReplacementCodeuivSUN(code);
            }
            
            public static 
            void ReplacementCodeuivSUN(GLuint[] code)
            {
                unsafe
                {
                    fixed (GLuint* code_ptr = code)
                    {
                        Delegates.glReplacementCodeuivSUN(code_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuivSUN(ref GLuint code)
            {
                unsafe
                {
                    fixed (GLuint* code_ptr = &code)
                    {
                        Delegates.glReplacementCodeuivSUN(code_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeusvSUN(GLushort* code)
            {
                Delegates.glReplacementCodeusvSUN(code);
            }
            
            public static 
            void ReplacementCodeusvSUN(GLushort[] code)
            {
                unsafe
                {
                    fixed (GLushort* code_ptr = code)
                    {
                        Delegates.glReplacementCodeusvSUN(code_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeusvSUN(ref GLushort code)
            {
                unsafe
                {
                    fixed (GLushort* code_ptr = &code)
                    {
                        Delegates.glReplacementCodeusvSUN(code_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeubvSUN(GLubyte* code)
            {
                Delegates.glReplacementCodeubvSUN(code);
            }
            
            public static 
            void ReplacementCodeubvSUN(GLubyte[] code)
            {
                unsafe
                {
                    fixed (GLubyte* code_ptr = code)
                    {
                        Delegates.glReplacementCodeubvSUN(code_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeubvSUN(ref GLubyte code)
            {
                unsafe
                {
                    fixed (GLubyte* code_ptr = &code)
                    {
                        Delegates.glReplacementCodeubvSUN(code_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodePointerSUN(GL.Enums.SUN_triangle_list type, GLsizei stride, void* pointer)
            {
                Delegates.glReplacementCodePointerSUN(type, stride, pointer);
            }
            
            public static 
            void ReplacementCodePointerSUN(GL.Enums.SUN_triangle_list type, GLsizei stride, object pointer)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glReplacementCodePointerSUN(type, stride, (void*)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            void Color4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
            {
                Delegates.glColor4ubVertex2fSUN(r, g, b, a, x, y);
            }
            
            public static 
            unsafe void Color4ubVertex2fvSUN(GLubyte* c, GLfloat* v)
            {
                Delegates.glColor4ubVertex2fvSUN(c, v);
            }
            
            public static 
            unsafe void Color4ubVertex2fvSUN(GLubyte* c, GLfloat[] v)
            {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glColor4ubVertex2fvSUN(c, v_ptr);
                    }
            }
            
            public static 
            unsafe void Color4ubVertex2fvSUN(GLubyte* c, ref GLfloat v)
            {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glColor4ubVertex2fvSUN(c, v_ptr);
                    }
            }
            
            public static 
            unsafe void Color4ubVertex2fvSUN(GLubyte[] c, GLfloat* v)
            {
                    fixed (GLubyte* c_ptr = c)
                    {
                        Delegates.glColor4ubVertex2fvSUN(c_ptr, v);
                    }
            }
            
            public static 
            void Color4ubVertex2fvSUN(GLubyte[] c, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLubyte* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glColor4ubVertex2fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void Color4ubVertex2fvSUN(GLubyte[] c, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLubyte* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glColor4ubVertex2fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void Color4ubVertex2fvSUN(ref GLubyte c, GLfloat* v)
            {
                    fixed (GLubyte* c_ptr = &c)
                    {
                        Delegates.glColor4ubVertex2fvSUN(c_ptr, v);
                    }
            }
            
            public static 
            void Color4ubVertex2fvSUN(ref GLubyte c, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLubyte* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glColor4ubVertex2fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void Color4ubVertex2fvSUN(ref GLubyte c, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLubyte* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glColor4ubVertex2fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void Color4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
            {
                Delegates.glColor4ubVertex3fSUN(r, g, b, a, x, y, z);
            }
            
            public static 
            unsafe void Color4ubVertex3fvSUN(GLubyte* c, GLfloat* v)
            {
                Delegates.glColor4ubVertex3fvSUN(c, v);
            }
            
            public static 
            unsafe void Color4ubVertex3fvSUN(GLubyte* c, GLfloat[] v)
            {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glColor4ubVertex3fvSUN(c, v_ptr);
                    }
            }
            
            public static 
            unsafe void Color4ubVertex3fvSUN(GLubyte* c, ref GLfloat v)
            {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glColor4ubVertex3fvSUN(c, v_ptr);
                    }
            }
            
            public static 
            unsafe void Color4ubVertex3fvSUN(GLubyte[] c, GLfloat* v)
            {
                    fixed (GLubyte* c_ptr = c)
                    {
                        Delegates.glColor4ubVertex3fvSUN(c_ptr, v);
                    }
            }
            
            public static 
            void Color4ubVertex3fvSUN(GLubyte[] c, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLubyte* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glColor4ubVertex3fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void Color4ubVertex3fvSUN(GLubyte[] c, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLubyte* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glColor4ubVertex3fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void Color4ubVertex3fvSUN(ref GLubyte c, GLfloat* v)
            {
                    fixed (GLubyte* c_ptr = &c)
                    {
                        Delegates.glColor4ubVertex3fvSUN(c_ptr, v);
                    }
            }
            
            public static 
            void Color4ubVertex3fvSUN(ref GLubyte c, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLubyte* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glColor4ubVertex3fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void Color4ubVertex3fvSUN(ref GLubyte c, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLubyte* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glColor4ubVertex3fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void Color3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
            {
                Delegates.glColor3fVertex3fSUN(r, g, b, x, y, z);
            }
            
            public static 
            unsafe void Color3fVertex3fvSUN(GLfloat* c, GLfloat* v)
            {
                Delegates.glColor3fVertex3fvSUN(c, v);
            }
            
            public static 
            unsafe void Color3fVertex3fvSUN(GLfloat* c, GLfloat[] v)
            {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glColor3fVertex3fvSUN(c, v_ptr);
                    }
            }
            
            public static 
            unsafe void Color3fVertex3fvSUN(GLfloat* c, ref GLfloat v)
            {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glColor3fVertex3fvSUN(c, v_ptr);
                    }
            }
            
            public static 
            unsafe void Color3fVertex3fvSUN(GLfloat[] c, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glColor3fVertex3fvSUN(c_ptr, v);
                    }
            }
            
            public static 
            void Color3fVertex3fvSUN(GLfloat[] c, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glColor3fVertex3fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void Color3fVertex3fvSUN(GLfloat[] c, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glColor3fVertex3fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void Color3fVertex3fvSUN(ref GLfloat c, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glColor3fVertex3fvSUN(c_ptr, v);
                    }
            }
            
            public static 
            void Color3fVertex3fvSUN(ref GLfloat c, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glColor3fVertex3fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void Color3fVertex3fvSUN(ref GLfloat c, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glColor3fVertex3fvSUN(c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void Normal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
            {
                Delegates.glNormal3fVertex3fSUN(nx, ny, nz, x, y, z);
            }
            
            public static 
            unsafe void Normal3fVertex3fvSUN(GLfloat* n, GLfloat* v)
            {
                Delegates.glNormal3fVertex3fvSUN(n, v);
            }
            
            public static 
            unsafe void Normal3fVertex3fvSUN(GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glNormal3fVertex3fvSUN(n, v_ptr);
                    }
            }
            
            public static 
            unsafe void Normal3fVertex3fvSUN(GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glNormal3fVertex3fvSUN(n, v_ptr);
                    }
            }
            
            public static 
            unsafe void Normal3fVertex3fvSUN(GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glNormal3fVertex3fvSUN(n_ptr, v);
                    }
            }
            
            public static 
            void Normal3fVertex3fvSUN(GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glNormal3fVertex3fvSUN(n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void Normal3fVertex3fvSUN(GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glNormal3fVertex3fvSUN(n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void Normal3fVertex3fvSUN(ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glNormal3fVertex3fvSUN(n_ptr, v);
                    }
            }
            
            public static 
            void Normal3fVertex3fvSUN(ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glNormal3fVertex3fvSUN(n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void Normal3fVertex3fvSUN(ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glNormal3fVertex3fvSUN(n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void Color4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
            {
                Delegates.glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z);
            }
            
            public static 
            unsafe void Color4fNormal3fVertex3fvSUN(GLfloat* c, GLfloat* n, GLfloat* v)
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(c, n, v);
            }
            
            public static 
            unsafe void Color4fNormal3fVertex3fvSUN(GLfloat* c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void Color4fNormal3fVertex3fvSUN(GLfloat* c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void Color4fNormal3fVertex3fvSUN(GLfloat* c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void Color4fNormal3fVertex3fvSUN(GLfloat* c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void Color4fNormal3fVertex3fvSUN(GLfloat* c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void Color4fNormal3fVertex3fvSUN(GLfloat* c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void Color4fNormal3fVertex3fvSUN(GLfloat* c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void Color4fNormal3fVertex3fvSUN(GLfloat* c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void Color4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void Color4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void Color4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void Color4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void Color4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void Color4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void Color4fNormal3fVertex3fvSUN(GLfloat[] c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void Color4fNormal3fVertex3fvSUN(GLfloat[] c, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void Color4fNormal3fVertex3fvSUN(GLfloat[] c, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void Color4fNormal3fVertex3fvSUN(ref GLfloat c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void Color4fNormal3fVertex3fvSUN(ref GLfloat c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void Color4fNormal3fVertex3fvSUN(ref GLfloat c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void Color4fNormal3fVertex3fvSUN(ref GLfloat c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void Color4fNormal3fVertex3fvSUN(ref GLfloat c, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void Color4fNormal3fVertex3fvSUN(ref GLfloat c, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void Color4fNormal3fVertex3fvSUN(ref GLfloat c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void Color4fNormal3fVertex3fvSUN(ref GLfloat c, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void Color4fNormal3fVertex3fvSUN(ref GLfloat c, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN(c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
            {
                Delegates.glTexCoord2fVertex3fSUN(s, t, x, y, z);
            }
            
            public static 
            unsafe void TexCoord2fVertex3fvSUN(GLfloat* tc, GLfloat* v)
            {
                Delegates.glTexCoord2fVertex3fvSUN(tc, v);
            }
            
            public static 
            unsafe void TexCoord2fVertex3fvSUN(GLfloat* tc, GLfloat[] v)
            {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fVertex3fvSUN(tc, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fVertex3fvSUN(GLfloat* tc, ref GLfloat v)
            {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fVertex3fvSUN(tc, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fVertex3fvSUN(GLfloat[] tc, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    {
                        Delegates.glTexCoord2fVertex3fvSUN(tc_ptr, v);
                    }
            }
            
            public static 
            void TexCoord2fVertex3fvSUN(GLfloat[] tc, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fVertex3fvSUN(tc_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fVertex3fvSUN(GLfloat[] tc, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fVertex3fvSUN(tc_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord2fVertex3fvSUN(ref GLfloat tc, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    {
                        Delegates.glTexCoord2fVertex3fvSUN(tc_ptr, v);
                    }
            }
            
            public static 
            void TexCoord2fVertex3fvSUN(ref GLfloat tc, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fVertex3fvSUN(tc_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fVertex3fvSUN(ref GLfloat tc, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fVertex3fvSUN(tc_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
            {
                Delegates.glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w);
            }
            
            public static 
            unsafe void TexCoord4fVertex4fvSUN(GLfloat* tc, GLfloat* v)
            {
                Delegates.glTexCoord4fVertex4fvSUN(tc, v);
            }
            
            public static 
            unsafe void TexCoord4fVertex4fvSUN(GLfloat* tc, GLfloat[] v)
            {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fVertex4fvSUN(tc, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fVertex4fvSUN(GLfloat* tc, ref GLfloat v)
            {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fVertex4fvSUN(tc, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fVertex4fvSUN(GLfloat[] tc, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    {
                        Delegates.glTexCoord4fVertex4fvSUN(tc_ptr, v);
                    }
            }
            
            public static 
            void TexCoord4fVertex4fvSUN(GLfloat[] tc, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fVertex4fvSUN(tc_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord4fVertex4fvSUN(GLfloat[] tc, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fVertex4fvSUN(tc_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord4fVertex4fvSUN(ref GLfloat tc, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    {
                        Delegates.glTexCoord4fVertex4fvSUN(tc_ptr, v);
                    }
            }
            
            public static 
            void TexCoord4fVertex4fvSUN(ref GLfloat tc, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fVertex4fvSUN(tc_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord4fVertex4fvSUN(ref GLfloat tc, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fVertex4fvSUN(tc_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
            {
                Delegates.glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z);
            }
            
            public static 
            unsafe void TexCoord2fColor4ubVertex3fvSUN(GLfloat* tc, GLubyte* c, GLfloat* v)
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, c, v);
            }
            
            public static 
            unsafe void TexCoord2fColor4ubVertex3fvSUN(GLfloat* tc, GLubyte* c, GLfloat[] v)
            {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, c, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4ubVertex3fvSUN(GLfloat* tc, GLubyte* c, ref GLfloat v)
            {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, c, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4ubVertex3fvSUN(GLfloat* tc, GLubyte[] c, GLfloat* v)
            {
                    fixed (GLubyte* c_ptr = c)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, c_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4ubVertex3fvSUN(GLfloat* tc, GLubyte[] c, GLfloat[] v)
            {
                    fixed (GLubyte* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, c_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4ubVertex3fvSUN(GLfloat* tc, GLubyte[] c, ref GLfloat v)
            {
                    fixed (GLubyte* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, c_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4ubVertex3fvSUN(GLfloat* tc, ref GLubyte c, GLfloat* v)
            {
                    fixed (GLubyte* c_ptr = &c)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, c_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4ubVertex3fvSUN(GLfloat* tc, ref GLubyte c, GLfloat[] v)
            {
                    fixed (GLubyte* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, c_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4ubVertex3fvSUN(GLfloat* tc, ref GLubyte c, ref GLfloat v)
            {
                    fixed (GLubyte* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, c_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte* c, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc_ptr, c, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte* c, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc_ptr, c, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte* c, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc_ptr, c, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLubyte* c_ptr = c)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc_ptr, c_ptr, v);
                    }
            }
            
            public static 
            void TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLubyte* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLubyte* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, ref GLubyte c, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLubyte* c_ptr = &c)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc_ptr, c_ptr, v);
                    }
            }
            
            public static 
            void TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, ref GLubyte c, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLubyte* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, ref GLubyte c, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLubyte* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord2fColor4ubVertex3fvSUN(ref GLfloat tc, GLubyte* c, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc_ptr, c, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4ubVertex3fvSUN(ref GLfloat tc, GLubyte* c, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc_ptr, c, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4ubVertex3fvSUN(ref GLfloat tc, GLubyte* c, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc_ptr, c, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4ubVertex3fvSUN(ref GLfloat tc, GLubyte[] c, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLubyte* c_ptr = c)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc_ptr, c_ptr, v);
                    }
            }
            
            public static 
            void TexCoord2fColor4ubVertex3fvSUN(ref GLfloat tc, GLubyte[] c, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLubyte* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fColor4ubVertex3fvSUN(ref GLfloat tc, GLubyte[] c, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLubyte* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord2fColor4ubVertex3fvSUN(ref GLfloat tc, ref GLubyte c, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLubyte* c_ptr = &c)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc_ptr, c_ptr, v);
                    }
            }
            
            public static 
            void TexCoord2fColor4ubVertex3fvSUN(ref GLfloat tc, ref GLubyte c, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLubyte* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fColor4ubVertex3fvSUN(ref GLfloat tc, ref GLubyte c, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLubyte* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
            {
                Delegates.glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z);
            }
            
            public static 
            unsafe void TexCoord2fColor3fVertex3fvSUN(GLfloat* tc, GLfloat* c, GLfloat* v)
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, c, v);
            }
            
            public static 
            unsafe void TexCoord2fColor3fVertex3fvSUN(GLfloat* tc, GLfloat* c, GLfloat[] v)
            {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, c, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor3fVertex3fvSUN(GLfloat* tc, GLfloat* c, ref GLfloat v)
            {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, c, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor3fVertex3fvSUN(GLfloat* tc, GLfloat[] c, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, c_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor3fVertex3fvSUN(GLfloat* tc, GLfloat[] c, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, c_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor3fVertex3fvSUN(GLfloat* tc, GLfloat[] c, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, c_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor3fVertex3fvSUN(GLfloat* tc, ref GLfloat c, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, c_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor3fVertex3fvSUN(GLfloat* tc, ref GLfloat c, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, c_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor3fVertex3fvSUN(GLfloat* tc, ref GLfloat c, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, c_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat* c, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc_ptr, c, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat* c, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc_ptr, c, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat* c, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc_ptr, c, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc_ptr, c_ptr, v);
                    }
            }
            
            public static 
            void TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, ref GLfloat c, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc_ptr, c_ptr, v);
                    }
            }
            
            public static 
            void TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, ref GLfloat c, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, ref GLfloat c, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord2fColor3fVertex3fvSUN(ref GLfloat tc, GLfloat* c, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc_ptr, c, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor3fVertex3fvSUN(ref GLfloat tc, GLfloat* c, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc_ptr, c, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor3fVertex3fvSUN(ref GLfloat tc, GLfloat* c, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc_ptr, c, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor3fVertex3fvSUN(ref GLfloat tc, GLfloat[] c, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc_ptr, c_ptr, v);
                    }
            }
            
            public static 
            void TexCoord2fColor3fVertex3fvSUN(ref GLfloat tc, GLfloat[] c, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fColor3fVertex3fvSUN(ref GLfloat tc, GLfloat[] c, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord2fColor3fVertex3fvSUN(ref GLfloat tc, ref GLfloat c, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc_ptr, c_ptr, v);
                    }
            }
            
            public static 
            void TexCoord2fColor3fVertex3fvSUN(ref GLfloat tc, ref GLfloat c, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fColor3fVertex3fvSUN(ref GLfloat tc, ref GLfloat c, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN(tc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
            {
                Delegates.glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z);
            }
            
            public static 
            unsafe void TexCoord2fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat* n, GLfloat* v)
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, n, v);
            }
            
            public static 
            unsafe void TexCoord2fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fNormal3fVertex3fvSUN(GLfloat* tc, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fNormal3fVertex3fvSUN(GLfloat* tc, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fNormal3fVertex3fvSUN(GLfloat* tc, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord2fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void TexCoord2fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord2fNormal3fVertex3fvSUN(ref GLfloat tc, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void TexCoord2fNormal3fVertex3fvSUN(ref GLfloat tc, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fNormal3fVertex3fvSUN(ref GLfloat tc, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z);
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat* c, GLfloat* n, GLfloat* v)
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v);
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat* c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat* c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat* c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat* c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat* c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat* c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat* c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat* c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat[] c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat[] c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat[] c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat[] c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat[] c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, ref GLfloat c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, ref GLfloat c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, ref GLfloat c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, ref GLfloat c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, ref GLfloat c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat* tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat* c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c, n, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat* c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat* c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat* c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat* c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat* c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat* c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat* c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat* c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, ref GLfloat c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, ref GLfloat c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, ref GLfloat c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, ref GLfloat c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, ref GLfloat c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat* c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c, n, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat* c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat* c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat* c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat* c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat* c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat* c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat* c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat* c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat[] c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat[] c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat[] c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat[] c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat[] c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, ref GLfloat c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, ref GLfloat c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, ref GLfloat c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, ref GLfloat c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, ref GLfloat c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, GLfloat* c, GLfloat* n, GLfloat* v)
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v);
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, GLfloat* c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, GLfloat* c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, GLfloat* c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, GLfloat* c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, GLfloat* c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, GLfloat* c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, GLfloat* c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, GLfloat* c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, GLfloat[] c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, GLfloat[] c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, GLfloat[] c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, GLfloat[] c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, GLfloat[] c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, ref GLfloat c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, ref GLfloat c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, ref GLfloat c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, ref GLfloat c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, ref GLfloat c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat* tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat* c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c, n, v);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat* c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat* c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat* c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat* c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat* c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat* c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat* c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat* c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, ref GLfloat c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, ref GLfloat c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, ref GLfloat c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, ref GLfloat c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, ref GLfloat c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat* c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c, n, v);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat* c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat* c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat* c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat* c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat* c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat* c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat* c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat* c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat[] c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat[] c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat[] c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat[] c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat[] c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, ref GLfloat c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, ref GLfloat c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, ref GLfloat c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, ref GLfloat c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, ref GLfloat c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z)
            {
                Delegates.glReplacementCodeuiVertex3fSUN(rc, x, y, z);
            }
            
            public static 
            unsafe void ReplacementCodeuiVertex3fvSUN(GLuint* rc, GLfloat* v)
            {
                Delegates.glReplacementCodeuiVertex3fvSUN(rc, v);
            }
            
            public static 
            unsafe void ReplacementCodeuiVertex3fvSUN(GLuint* rc, GLfloat[] v)
            {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiVertex3fvSUN(rc, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiVertex3fvSUN(GLuint* rc, ref GLfloat v)
            {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiVertex3fvSUN(rc, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiVertex3fvSUN(GLuint[] rc, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    {
                        Delegates.glReplacementCodeuiVertex3fvSUN(rc_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiVertex3fvSUN(GLuint[] rc, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiVertex3fvSUN(rc_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiVertex3fvSUN(GLuint[] rc, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiVertex3fvSUN(rc_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiVertex3fvSUN(ref GLuint rc, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    {
                        Delegates.glReplacementCodeuiVertex3fvSUN(rc_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiVertex3fvSUN(ref GLuint rc, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiVertex3fvSUN(rc_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiVertex3fvSUN(ref GLuint rc, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiVertex3fvSUN(rc_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z);
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint* rc, GLubyte* c, GLfloat* v)
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v);
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint* rc, GLubyte* c, GLfloat[] v)
            {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint* rc, GLubyte* c, ref GLfloat v)
            {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint* rc, GLubyte[] c, GLfloat* v)
            {
                    fixed (GLubyte* c_ptr = c)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, c_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint* rc, GLubyte[] c, GLfloat[] v)
            {
                    fixed (GLubyte* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, c_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint* rc, GLubyte[] c, ref GLfloat v)
            {
                    fixed (GLubyte* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, c_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint* rc, ref GLubyte c, GLfloat* v)
            {
                    fixed (GLubyte* c_ptr = &c)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, c_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint* rc, ref GLubyte c, GLfloat[] v)
            {
                    fixed (GLubyte* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, c_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint* rc, ref GLubyte c, ref GLfloat v)
            {
                    fixed (GLubyte* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, c_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte* c, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc_ptr, c, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte* c, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc_ptr, c, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte* c, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc_ptr, c, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLubyte* c_ptr = c)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc_ptr, c_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLubyte* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLubyte* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, ref GLubyte c, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLubyte* c_ptr = &c)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc_ptr, c_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, ref GLubyte c, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLubyte* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, ref GLubyte c, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLubyte* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(ref GLuint rc, GLubyte* c, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc_ptr, c, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(ref GLuint rc, GLubyte* c, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc_ptr, c, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(ref GLuint rc, GLubyte* c, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc_ptr, c, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(ref GLuint rc, GLubyte[] c, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLubyte* c_ptr = c)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc_ptr, c_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiColor4ubVertex3fvSUN(ref GLuint rc, GLubyte[] c, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLubyte* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiColor4ubVertex3fvSUN(ref GLuint rc, GLubyte[] c, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLubyte* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3fvSUN(ref GLuint rc, ref GLubyte c, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLubyte* c_ptr = &c)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc_ptr, c_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiColor4ubVertex3fvSUN(ref GLuint rc, ref GLubyte c, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLubyte* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiColor4ubVertex3fvSUN(ref GLuint rc, ref GLubyte c, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLubyte* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
            {
                Delegates.glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z);
            }
            
            public static 
            unsafe void ReplacementCodeuiColor3fVertex3fvSUN(GLuint* rc, GLfloat* c, GLfloat* v)
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v);
            }
            
            public static 
            unsafe void ReplacementCodeuiColor3fVertex3fvSUN(GLuint* rc, GLfloat* c, GLfloat[] v)
            {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor3fVertex3fvSUN(GLuint* rc, GLfloat* c, ref GLfloat v)
            {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor3fVertex3fvSUN(GLuint* rc, GLfloat[] c, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, c_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor3fVertex3fvSUN(GLuint* rc, GLfloat[] c, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, c_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor3fVertex3fvSUN(GLuint* rc, GLfloat[] c, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, c_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor3fVertex3fvSUN(GLuint* rc, ref GLfloat c, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, c_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor3fVertex3fvSUN(GLuint* rc, ref GLfloat c, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, c_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor3fVertex3fvSUN(GLuint* rc, ref GLfloat c, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, c_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat* c, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc_ptr, c, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat* c, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc_ptr, c, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat* c, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc_ptr, c, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc_ptr, c_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, ref GLfloat c, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc_ptr, c_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, ref GLfloat c, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, ref GLfloat c, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor3fVertex3fvSUN(ref GLuint rc, GLfloat* c, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc_ptr, c, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor3fVertex3fvSUN(ref GLuint rc, GLfloat* c, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc_ptr, c, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor3fVertex3fvSUN(ref GLuint rc, GLfloat* c, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc_ptr, c, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor3fVertex3fvSUN(ref GLuint rc, GLfloat[] c, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc_ptr, c_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiColor3fVertex3fvSUN(ref GLuint rc, GLfloat[] c, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiColor3fVertex3fvSUN(ref GLuint rc, GLfloat[] c, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor3fVertex3fvSUN(ref GLuint rc, ref GLfloat c, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc_ptr, c_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiColor3fVertex3fvSUN(ref GLuint rc, ref GLfloat c, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiColor3fVertex3fvSUN(ref GLuint rc, ref GLfloat c, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc_ptr, c_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z);
            }
            
            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint* rc, GLfloat* n, GLfloat* v)
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v);
            }
            
            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint* rc, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint* rc, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z);
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* c, GLfloat* n, GLfloat* v)
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v);
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z);
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat* v)
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v);
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat[] v)
            {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint* rc, GLfloat* tc, ref GLfloat v)
            {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint* rc, GLfloat[] tc, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint* rc, ref GLfloat tc, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc_ptr, tc, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc_ptr, tc, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat* tc, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc_ptr, tc, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc_ptr, tc_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc_ptr, tc_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc_ptr, tc_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc_ptr, tc_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc_ptr, tc_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc_ptr, tc_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc_ptr, tc, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc_ptr, tc, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref GLuint rc, GLfloat* tc, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc_ptr, tc, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc_ptr, tc_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc_ptr, tc_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc_ptr, tc_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc_ptr, tc_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc_ptr, tc_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc_ptr, tc_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z);
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat* n, GLfloat* v)
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v);
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat* c, GLfloat* n, GLfloat* v)
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v);
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat* c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat* c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat* c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat* c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat* c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat* c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat* c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat* c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat[] c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat[] c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat[] c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat[] c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat[] c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, ref GLfloat c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, ref GLfloat c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, ref GLfloat c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, ref GLfloat c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, ref GLfloat c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat* tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat* c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat* c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat* c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat* c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat* c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat* c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat* c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat* c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat* c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat[] c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat[] c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat[] c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat[] c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, ref GLfloat c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, ref GLfloat c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, ref GLfloat c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, ref GLfloat c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, ref GLfloat c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, GLfloat[] tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat* c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat* c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat* c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat* c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat* c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat* c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat* c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat* c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat* c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat[] c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat[] c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat[] c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat[] c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat[] c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, ref GLfloat c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, ref GLfloat c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, ref GLfloat c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, ref GLfloat c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, ref GLfloat c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint* rc, ref GLfloat tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat* c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat* c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat* c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat* c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat* c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat* c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat* c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat* c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat* c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat[] c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat[] c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat[] c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat[] c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat[] c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, ref GLfloat c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, ref GLfloat c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, ref GLfloat c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, ref GLfloat c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, ref GLfloat c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat* tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat* c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat* c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat* c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat* c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat* c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat* c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat* c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat* c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat* c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat* c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat* c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat* c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat* c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat* c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat* c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat* c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat* c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat* c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat* c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat* c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat* c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat* c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat* c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat* c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat* c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat* c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat* c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat[] c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat[] c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat[] c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat[] c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat[] c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, ref GLfloat c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, ref GLfloat c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, ref GLfloat c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, ref GLfloat c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, ref GLfloat c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat* tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc, c_ptr, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat* c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat* c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat* c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat* c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat* c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat* c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat* c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat* c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat* c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat* c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat* c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat* c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat* c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat* c, GLfloat[] n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat* c, GLfloat[] n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat* c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n_ptr, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat* c, ref GLfloat n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat* c, ref GLfloat n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c, n_ptr, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat c, GLfloat* n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n, v);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat c, GLfloat* n, GLfloat[] v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat c, GLfloat* n, ref GLfloat v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n, v_ptr);
                    }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat c, GLfloat[] n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat c, ref GLfloat n, GLfloat* v)
            {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v);
                    }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLuint* rc_ptr = &rc)
                    fixed (GLfloat* tc_ptr = &tc)
                    fixed (GLfloat* c_ptr = &c)
                    fixed (GLfloat* n_ptr = &n)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc_ptr, tc_ptr, c_ptr, n_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void DrawMeshArraysSUN(GL.Enums.BeginMode mode, GLint first, GLsizei count, GLsizei width)
            {
                Delegates.glDrawMeshArraysSUN(mode, first, count, width);
            }
            
        }

        public static class INGR
        {
            public static 
            void BlendFuncSeparateINGR(GL.Enums.GLenum sfactorRGB, GL.Enums.GLenum dfactorRGB, GL.Enums.GLenum sfactorAlpha, GL.Enums.GLenum dfactorAlpha)
            {
                Delegates.glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
            }
            
        }

        public static class NV
        {
            public static 
            void FlushVertexArrayRangeNV()
            {
                Delegates.glFlushVertexArrayRangeNV();
            }
            
            public static 
            unsafe void VertexArrayRangeNV(GLsizei length, void* pointer)
            {
                Delegates.glVertexArrayRangeNV(length, pointer);
            }
            
            public static 
            void VertexArrayRangeNV(GLsizei length, object pointer)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glVertexArrayRangeNV(length, (void*)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void CombinerParameterfvNV(GL.Enums.NV_register_combiners pname, GLfloat* @params)
            {
                Delegates.glCombinerParameterfvNV(pname, @params);
            }
            
            public static 
            void CombinerParameterfvNV(GL.Enums.NV_register_combiners pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glCombinerParameterfvNV(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void CombinerParameterfvNV(GL.Enums.NV_register_combiners pname, ref GLfloat @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glCombinerParameterfvNV(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void CombinerParameterfNV(GL.Enums.NV_register_combiners pname, GLfloat param)
            {
                Delegates.glCombinerParameterfNV(pname, param);
            }
            
            public static 
            unsafe void CombinerParameterivNV(GL.Enums.NV_register_combiners pname, GLint* @params)
            {
                Delegates.glCombinerParameterivNV(pname, @params);
            }
            
            public static 
            void CombinerParameterivNV(GL.Enums.NV_register_combiners pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glCombinerParameterivNV(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void CombinerParameterivNV(GL.Enums.NV_register_combiners pname, ref GLint @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glCombinerParameterivNV(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void CombinerParameteriNV(GL.Enums.NV_register_combiners pname, GLint param)
            {
                Delegates.glCombinerParameteriNV(pname, param);
            }
            
            public static 
            void CombinerInputNV(GL.Enums.NV_register_combiners stage, GL.Enums.NV_register_combiners portion, GL.Enums.NV_register_combiners variable, GL.Enums.NV_register_combiners input, GL.Enums.NV_register_combiners mapping, GL.Enums.NV_register_combiners componentUsage)
            {
                Delegates.glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage);
            }
            
            public static 
            void FinalCombinerInputNV(GL.Enums.NV_register_combiners variable, GL.Enums.NV_register_combiners input, GL.Enums.NV_register_combiners mapping, GL.Enums.NV_register_combiners componentUsage)
            {
                Delegates.glFinalCombinerInputNV(variable, input, mapping, componentUsage);
            }
            
            public static 
            unsafe void GetCombinerInputParameterfvNV(GL.Enums.NV_register_combiners stage, GL.Enums.NV_register_combiners portion, GL.Enums.NV_register_combiners variable, GL.Enums.NV_register_combiners pname, GLfloat* @params)
            {
                Delegates.glGetCombinerInputParameterfvNV(stage, portion, variable, pname, @params);
            }
            
            public static 
            void GetCombinerInputParameterfvNV(GL.Enums.NV_register_combiners stage, GL.Enums.NV_register_combiners portion, GL.Enums.NV_register_combiners variable, GL.Enums.NV_register_combiners pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetCombinerInputParameterfvNV(stage, portion, variable, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetCombinerInputParameterfvNV(GL.Enums.NV_register_combiners stage, GL.Enums.NV_register_combiners portion, GL.Enums.NV_register_combiners variable, GL.Enums.NV_register_combiners pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetCombinerInputParameterfvNV(stage, portion, variable, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetCombinerInputParameterivNV(GL.Enums.NV_register_combiners stage, GL.Enums.NV_register_combiners portion, GL.Enums.NV_register_combiners variable, GL.Enums.NV_register_combiners pname, GLint* @params)
            {
                Delegates.glGetCombinerInputParameterivNV(stage, portion, variable, pname, @params);
            }
            
            public static 
            void GetCombinerInputParameterivNV(GL.Enums.NV_register_combiners stage, GL.Enums.NV_register_combiners portion, GL.Enums.NV_register_combiners variable, GL.Enums.NV_register_combiners pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetCombinerInputParameterivNV(stage, portion, variable, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetCombinerInputParameterivNV(GL.Enums.NV_register_combiners stage, GL.Enums.NV_register_combiners portion, GL.Enums.NV_register_combiners variable, GL.Enums.NV_register_combiners pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetCombinerInputParameterivNV(stage, portion, variable, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetCombinerOutputParameterfvNV(GL.Enums.NV_register_combiners stage, GL.Enums.NV_register_combiners portion, GL.Enums.NV_register_combiners pname, GLfloat* @params)
            {
                Delegates.glGetCombinerOutputParameterfvNV(stage, portion, pname, @params);
            }
            
            public static 
            void GetCombinerOutputParameterfvNV(GL.Enums.NV_register_combiners stage, GL.Enums.NV_register_combiners portion, GL.Enums.NV_register_combiners pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetCombinerOutputParameterfvNV(stage, portion, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetCombinerOutputParameterfvNV(GL.Enums.NV_register_combiners stage, GL.Enums.NV_register_combiners portion, GL.Enums.NV_register_combiners pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetCombinerOutputParameterfvNV(stage, portion, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetCombinerOutputParameterivNV(GL.Enums.NV_register_combiners stage, GL.Enums.NV_register_combiners portion, GL.Enums.NV_register_combiners pname, GLint* @params)
            {
                Delegates.glGetCombinerOutputParameterivNV(stage, portion, pname, @params);
            }
            
            public static 
            void GetCombinerOutputParameterivNV(GL.Enums.NV_register_combiners stage, GL.Enums.NV_register_combiners portion, GL.Enums.NV_register_combiners pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetCombinerOutputParameterivNV(stage, portion, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetCombinerOutputParameterivNV(GL.Enums.NV_register_combiners stage, GL.Enums.NV_register_combiners portion, GL.Enums.NV_register_combiners pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetCombinerOutputParameterivNV(stage, portion, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetFinalCombinerInputParameterfvNV(GL.Enums.NV_register_combiners variable, GL.Enums.NV_register_combiners pname, GLfloat* @params)
            {
                Delegates.glGetFinalCombinerInputParameterfvNV(variable, pname, @params);
            }
            
            public static 
            void GetFinalCombinerInputParameterfvNV(GL.Enums.NV_register_combiners variable, GL.Enums.NV_register_combiners pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetFinalCombinerInputParameterfvNV(variable, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetFinalCombinerInputParameterfvNV(GL.Enums.NV_register_combiners variable, GL.Enums.NV_register_combiners pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetFinalCombinerInputParameterfvNV(variable, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetFinalCombinerInputParameterivNV(GL.Enums.NV_register_combiners variable, GL.Enums.NV_register_combiners pname, GLint* @params)
            {
                Delegates.glGetFinalCombinerInputParameterivNV(variable, pname, @params);
            }
            
            public static 
            void GetFinalCombinerInputParameterivNV(GL.Enums.NV_register_combiners variable, GL.Enums.NV_register_combiners pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetFinalCombinerInputParameterivNV(variable, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetFinalCombinerInputParameterivNV(GL.Enums.NV_register_combiners variable, GL.Enums.NV_register_combiners pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetFinalCombinerInputParameterivNV(variable, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void DeleteFencesNV(GLsizei n, GLuint* fences)
            {
                Delegates.glDeleteFencesNV(n, fences);
            }
            
            public static 
            void DeleteFencesNV(GLsizei n, GLuint[] fences)
            {
                unsafe
                {
                    fixed (GLuint* fences_ptr = fences)
                    {
                        Delegates.glDeleteFencesNV(n, fences_ptr);
                    }
                }
            }
            
            public static 
            void DeleteFencesNV(GLsizei n, ref GLuint fences)
            {
                unsafe
                {
                    fixed (GLuint* fences_ptr = &fences)
                    {
                        Delegates.glDeleteFencesNV(n, fences_ptr);
                    }
                }
            }
            
            public static 
            unsafe void GenFencesNV(GLsizei n, GLuint* fences)
            {
                Delegates.glGenFencesNV(n, fences);
            }
            
            public static 
            void GenFencesNV(GLsizei n, GLuint[] fences)
            {
                unsafe
                {
                    fixed (GLuint* fences_ptr = fences)
                    {
                        Delegates.glGenFencesNV(n, fences_ptr);
                    }
                }
            }
            
            public static 
            void GenFencesNV(GLsizei n, out GLuint fences)
            {
                fences = default(GLuint);
                unsafe
                {
                    fixed (GLuint* fences_ptr = &fences)
                    {
                        Delegates.glGenFencesNV(n, fences_ptr);
                        fences = *fences_ptr;
                    }
                }
            }
            
            public static 
            GLboolean IsFenceNV(GLuint fence)
            {
                return Delegates.glIsFenceNV(fence);
            }
            
            public static 
            GLboolean TestFenceNV(GLuint fence)
            {
                return Delegates.glTestFenceNV(fence);
            }
            
            public static 
            unsafe void GetFenceivNV(GLuint fence, GL.Enums.NV_fence pname, GLint* @params)
            {
                Delegates.glGetFenceivNV(fence, pname, @params);
            }
            
            public static 
            void GetFenceivNV(GLuint fence, GL.Enums.NV_fence pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetFenceivNV(fence, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetFenceivNV(GLuint fence, GL.Enums.NV_fence pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetFenceivNV(fence, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            void FinishFenceNV(GLuint fence)
            {
                Delegates.glFinishFenceNV(fence);
            }
            
            public static 
            void SetFenceNV(GLuint fence, GL.Enums.NV_fence condition)
            {
                Delegates.glSetFenceNV(fence, condition);
            }
            
            public static 
            unsafe void MapControlPointsNV(GL.Enums.NV_evaluators target, GLuint index, GL.Enums.NV_evaluators type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GL.Enums.Boolean packed, void* points)
            {
                Delegates.glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points);
            }
            
            public static 
            void MapControlPointsNV(GL.Enums.NV_evaluators target, GLuint index, GL.Enums.NV_evaluators type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GL.Enums.Boolean packed, object points)
            {
                System.Runtime.InteropServices.GCHandle points_ptr = System.Runtime.InteropServices.GCHandle.Alloc(points, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, (void*)points_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        points_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void MapParameterivNV(GL.Enums.NV_evaluators target, GL.Enums.NV_evaluators pname, GLint* @params)
            {
                Delegates.glMapParameterivNV(target, pname, @params);
            }
            
            public static 
            void MapParameterivNV(GL.Enums.NV_evaluators target, GL.Enums.NV_evaluators pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glMapParameterivNV(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void MapParameterivNV(GL.Enums.NV_evaluators target, GL.Enums.NV_evaluators pname, ref GLint @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glMapParameterivNV(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void MapParameterfvNV(GL.Enums.NV_evaluators target, GL.Enums.NV_evaluators pname, GLfloat* @params)
            {
                Delegates.glMapParameterfvNV(target, pname, @params);
            }
            
            public static 
            void MapParameterfvNV(GL.Enums.NV_evaluators target, GL.Enums.NV_evaluators pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glMapParameterfvNV(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void MapParameterfvNV(GL.Enums.NV_evaluators target, GL.Enums.NV_evaluators pname, ref GLfloat @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glMapParameterfvNV(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void GetMapControlPointsNV(GL.Enums.NV_evaluators target, GLuint index, GL.Enums.NV_evaluators type, GLsizei ustride, GLsizei vstride, GL.Enums.Boolean packed, void* points)
            {
                Delegates.glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points);
            }
            
            public static 
            void GetMapControlPointsNV(GL.Enums.NV_evaluators target, GLuint index, GL.Enums.NV_evaluators type, GLsizei ustride, GLsizei vstride, GL.Enums.Boolean packed, object points)
            {
                System.Runtime.InteropServices.GCHandle points_ptr = System.Runtime.InteropServices.GCHandle.Alloc(points, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, (void*)points_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        points_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void GetMapParameterivNV(GL.Enums.NV_evaluators target, GL.Enums.NV_evaluators pname, GLint* @params)
            {
                Delegates.glGetMapParameterivNV(target, pname, @params);
            }
            
            public static 
            void GetMapParameterivNV(GL.Enums.NV_evaluators target, GL.Enums.NV_evaluators pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetMapParameterivNV(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetMapParameterivNV(GL.Enums.NV_evaluators target, GL.Enums.NV_evaluators pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetMapParameterivNV(target, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetMapParameterfvNV(GL.Enums.NV_evaluators target, GL.Enums.NV_evaluators pname, GLfloat* @params)
            {
                Delegates.glGetMapParameterfvNV(target, pname, @params);
            }
            
            public static 
            void GetMapParameterfvNV(GL.Enums.NV_evaluators target, GL.Enums.NV_evaluators pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetMapParameterfvNV(target, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetMapParameterfvNV(GL.Enums.NV_evaluators target, GL.Enums.NV_evaluators pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetMapParameterfvNV(target, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetMapAttribParameterivNV(GL.Enums.NV_evaluators target, GLuint index, GL.Enums.NV_evaluators pname, GLint* @params)
            {
                Delegates.glGetMapAttribParameterivNV(target, index, pname, @params);
            }
            
            public static 
            void GetMapAttribParameterivNV(GL.Enums.NV_evaluators target, GLuint index, GL.Enums.NV_evaluators pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetMapAttribParameterivNV(target, index, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetMapAttribParameterivNV(GL.Enums.NV_evaluators target, GLuint index, GL.Enums.NV_evaluators pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetMapAttribParameterivNV(target, index, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetMapAttribParameterfvNV(GL.Enums.NV_evaluators target, GLuint index, GL.Enums.NV_evaluators pname, GLfloat* @params)
            {
                Delegates.glGetMapAttribParameterfvNV(target, index, pname, @params);
            }
            
            public static 
            void GetMapAttribParameterfvNV(GL.Enums.NV_evaluators target, GLuint index, GL.Enums.NV_evaluators pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetMapAttribParameterfvNV(target, index, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetMapAttribParameterfvNV(GL.Enums.NV_evaluators target, GLuint index, GL.Enums.NV_evaluators pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetMapAttribParameterfvNV(target, index, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            void EvalMapsNV(GL.Enums.NV_evaluators target, GL.Enums.NV_evaluators mode)
            {
                Delegates.glEvalMapsNV(target, mode);
            }
            
            public static 
            unsafe void CombinerStageParameterfvNV(GL.Enums.NV_register_combiners2 stage, GL.Enums.NV_register_combiners2 pname, GLfloat* @params)
            {
                Delegates.glCombinerStageParameterfvNV(stage, pname, @params);
            }
            
            public static 
            void CombinerStageParameterfvNV(GL.Enums.NV_register_combiners2 stage, GL.Enums.NV_register_combiners2 pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glCombinerStageParameterfvNV(stage, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void CombinerStageParameterfvNV(GL.Enums.NV_register_combiners2 stage, GL.Enums.NV_register_combiners2 pname, ref GLfloat @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glCombinerStageParameterfvNV(stage, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void GetCombinerStageParameterfvNV(GL.Enums.NV_register_combiners2 stage, GL.Enums.NV_register_combiners2 pname, GLfloat* @params)
            {
                Delegates.glGetCombinerStageParameterfvNV(stage, pname, @params);
            }
            
            public static 
            void GetCombinerStageParameterfvNV(GL.Enums.NV_register_combiners2 stage, GL.Enums.NV_register_combiners2 pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetCombinerStageParameterfvNV(stage, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetCombinerStageParameterfvNV(GL.Enums.NV_register_combiners2 stage, GL.Enums.NV_register_combiners2 pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetCombinerStageParameterfvNV(stage, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe GLboolean AreProgramsResidentNV(GLsizei n, GLuint* programs, GL.Enums.Boolean* residences)
            {
                return Delegates.glAreProgramsResidentNV(n, programs, residences);
            }
            
            public static 
            unsafe GLboolean AreProgramsResidentNV(GLsizei n, GLuint[] programs, GL.Enums.Boolean* residences)
            {
                residences = default(GL.Enums.Boolean*);
                    fixed (GLuint* programs_ptr = programs)
                    {
                        GLboolean retval = Delegates.glAreProgramsResidentNV(n, programs_ptr, residences);
                        return retval;
                    }
            }
            
            public static 
            unsafe GLboolean AreProgramsResidentNV(GLsizei n, ref GLuint programs, GL.Enums.Boolean* residences)
            {
                residences = default(GL.Enums.Boolean*);
                    fixed (GLuint* programs_ptr = &programs)
                    {
                        GLboolean retval = Delegates.glAreProgramsResidentNV(n, programs_ptr, residences);
                        return retval;
                    }
            }
            
            public static 
            void BindProgramNV(GL.Enums.NV_vertex_program target, GLuint id)
            {
                Delegates.glBindProgramNV(target, id);
            }
            
            public static 
            unsafe void DeleteProgramsNV(GLsizei n, GLuint* programs)
            {
                Delegates.glDeleteProgramsNV(n, programs);
            }
            
            public static 
            void DeleteProgramsNV(GLsizei n, GLuint[] programs)
            {
                unsafe
                {
                    fixed (GLuint* programs_ptr = programs)
                    {
                        Delegates.glDeleteProgramsNV(n, programs_ptr);
                    }
                }
            }
            
            public static 
            void DeleteProgramsNV(GLsizei n, ref GLuint programs)
            {
                unsafe
                {
                    fixed (GLuint* programs_ptr = &programs)
                    {
                        Delegates.glDeleteProgramsNV(n, programs_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ExecuteProgramNV(GL.Enums.NV_vertex_program target, GLuint id, GLfloat* @params)
            {
                Delegates.glExecuteProgramNV(target, id, @params);
            }
            
            public static 
            void ExecuteProgramNV(GL.Enums.NV_vertex_program target, GLuint id, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glExecuteProgramNV(target, id, @params_ptr);
                    }
                }
            }
            
            public static 
            void ExecuteProgramNV(GL.Enums.NV_vertex_program target, GLuint id, ref GLfloat @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glExecuteProgramNV(target, id, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void GenProgramsNV(GLsizei n, GLuint* programs)
            {
                Delegates.glGenProgramsNV(n, programs);
            }
            
            public static 
            void GenProgramsNV(GLsizei n, GLuint[] programs)
            {
                unsafe
                {
                    fixed (GLuint* programs_ptr = programs)
                    {
                        Delegates.glGenProgramsNV(n, programs_ptr);
                    }
                }
            }
            
            public static 
            void GenProgramsNV(GLsizei n, out GLuint programs)
            {
                programs = default(GLuint);
                unsafe
                {
                    fixed (GLuint* programs_ptr = &programs)
                    {
                        Delegates.glGenProgramsNV(n, programs_ptr);
                        programs = *programs_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetProgramParameterdvNV(GL.Enums.NV_vertex_program target, GLuint index, GL.Enums.NV_vertex_program pname, GLdouble* @params)
            {
                Delegates.glGetProgramParameterdvNV(target, index, pname, @params);
            }
            
            public static 
            void GetProgramParameterdvNV(GL.Enums.NV_vertex_program target, GLuint index, GL.Enums.NV_vertex_program pname, GLdouble[] @params)
            {
                unsafe
                {
                    fixed (GLdouble* @params_ptr = @params)
                    {
                        Delegates.glGetProgramParameterdvNV(target, index, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetProgramParameterdvNV(GL.Enums.NV_vertex_program target, GLuint index, GL.Enums.NV_vertex_program pname, out GLdouble @params)
            {
                @params = default(GLdouble);
                unsafe
                {
                    fixed (GLdouble* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramParameterdvNV(target, index, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetProgramParameterfvNV(GL.Enums.NV_vertex_program target, GLuint index, GL.Enums.NV_vertex_program pname, GLfloat* @params)
            {
                Delegates.glGetProgramParameterfvNV(target, index, pname, @params);
            }
            
            public static 
            void GetProgramParameterfvNV(GL.Enums.NV_vertex_program target, GLuint index, GL.Enums.NV_vertex_program pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetProgramParameterfvNV(target, index, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetProgramParameterfvNV(GL.Enums.NV_vertex_program target, GLuint index, GL.Enums.NV_vertex_program pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramParameterfvNV(target, index, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetProgramivNV(GLuint id, GL.Enums.NV_vertex_program pname, GLint* @params)
            {
                Delegates.glGetProgramivNV(id, pname, @params);
            }
            
            public static 
            void GetProgramivNV(GLuint id, GL.Enums.NV_vertex_program pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetProgramivNV(id, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetProgramivNV(GLuint id, GL.Enums.NV_vertex_program pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramivNV(id, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetProgramStringNV(GLuint id, GL.Enums.NV_vertex_program pname, GLubyte* program)
            {
                Delegates.glGetProgramStringNV(id, pname, program);
            }
            
            public static 
            void GetProgramStringNV(GLuint id, GL.Enums.NV_vertex_program pname, GLubyte[] program)
            {
                unsafe
                {
                    fixed (GLubyte* program_ptr = program)
                    {
                        Delegates.glGetProgramStringNV(id, pname, program_ptr);
                    }
                }
            }
            
            public static 
            void GetProgramStringNV(GLuint id, GL.Enums.NV_vertex_program pname, out GLubyte program)
            {
                program = default(GLubyte);
                unsafe
                {
                    fixed (GLubyte* program_ptr = &program)
                    {
                        Delegates.glGetProgramStringNV(id, pname, program_ptr);
                        program = *program_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetTrackMatrixivNV(GL.Enums.NV_vertex_program target, GLuint address, GL.Enums.NV_vertex_program pname, GLint* @params)
            {
                Delegates.glGetTrackMatrixivNV(target, address, pname, @params);
            }
            
            public static 
            void GetTrackMatrixivNV(GL.Enums.NV_vertex_program target, GLuint address, GL.Enums.NV_vertex_program pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetTrackMatrixivNV(target, address, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetTrackMatrixivNV(GL.Enums.NV_vertex_program target, GLuint address, GL.Enums.NV_vertex_program pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetTrackMatrixivNV(target, address, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetVertexAttribdvNV(GLuint index, GL.Enums.NV_vertex_program pname, GLdouble* @params)
            {
                Delegates.glGetVertexAttribdvNV(index, pname, @params);
            }
            
            public static 
            void GetVertexAttribdvNV(GLuint index, GL.Enums.NV_vertex_program pname, GLdouble[] @params)
            {
                unsafe
                {
                    fixed (GLdouble* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribdvNV(index, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetVertexAttribdvNV(GLuint index, GL.Enums.NV_vertex_program pname, out GLdouble @params)
            {
                @params = default(GLdouble);
                unsafe
                {
                    fixed (GLdouble* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribdvNV(index, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetVertexAttribfvNV(GLuint index, GL.Enums.NV_vertex_program pname, GLfloat* @params)
            {
                Delegates.glGetVertexAttribfvNV(index, pname, @params);
            }
            
            public static 
            void GetVertexAttribfvNV(GLuint index, GL.Enums.NV_vertex_program pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribfvNV(index, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetVertexAttribfvNV(GLuint index, GL.Enums.NV_vertex_program pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribfvNV(index, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetVertexAttribivNV(GLuint index, GL.Enums.NV_vertex_program pname, GLint* @params)
            {
                Delegates.glGetVertexAttribivNV(index, pname, @params);
            }
            
            public static 
            void GetVertexAttribivNV(GLuint index, GL.Enums.NV_vertex_program pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribivNV(index, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetVertexAttribivNV(GLuint index, GL.Enums.NV_vertex_program pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribivNV(index, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetVertexAttribPointervNV(GLuint index, GL.Enums.NV_vertex_program pname, void* pointer)
            {
                Delegates.glGetVertexAttribPointervNV(index, pname, pointer);
            }
            
            public static 
            void GetVertexAttribPointervNV(GLuint index, GL.Enums.NV_vertex_program pname, object pointer)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glGetVertexAttribPointervNV(index, pname, (void*)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            GLboolean IsProgramNV(GLuint id)
            {
                return Delegates.glIsProgramNV(id);
            }
            
            public static 
            unsafe void LoadProgramNV(GL.Enums.NV_vertex_program target, GLuint id, GLsizei len, GLubyte* program)
            {
                Delegates.glLoadProgramNV(target, id, len, program);
            }
            
            public static 
            void LoadProgramNV(GL.Enums.NV_vertex_program target, GLuint id, GLsizei len, GLubyte[] program)
            {
                unsafe
                {
                    fixed (GLubyte* program_ptr = program)
                    {
                        Delegates.glLoadProgramNV(target, id, len, program_ptr);
                    }
                }
            }
            
            public static 
            void LoadProgramNV(GL.Enums.NV_vertex_program target, GLuint id, GLsizei len, ref GLubyte program)
            {
                unsafe
                {
                    fixed (GLubyte* program_ptr = &program)
                    {
                        Delegates.glLoadProgramNV(target, id, len, program_ptr);
                    }
                }
            }
            
            public static 
            void ProgramParameter4dNV(GL.Enums.NV_vertex_program target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
            {
                Delegates.glProgramParameter4dNV(target, index, x, y, z, w);
            }
            
            public static 
            unsafe void ProgramParameter4dvNV(GL.Enums.NV_vertex_program target, GLuint index, GLdouble* v)
            {
                Delegates.glProgramParameter4dvNV(target, index, v);
            }
            
            public static 
            void ProgramParameter4dvNV(GL.Enums.NV_vertex_program target, GLuint index, GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glProgramParameter4dvNV(target, index, v_ptr);
                    }
                }
            }
            
            public static 
            void ProgramParameter4dvNV(GL.Enums.NV_vertex_program target, GLuint index, ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glProgramParameter4dvNV(target, index, v_ptr);
                    }
                }
            }
            
            public static 
            void ProgramParameter4fNV(GL.Enums.NV_vertex_program target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
            {
                Delegates.glProgramParameter4fNV(target, index, x, y, z, w);
            }
            
            public static 
            unsafe void ProgramParameter4fvNV(GL.Enums.NV_vertex_program target, GLuint index, GLfloat* v)
            {
                Delegates.glProgramParameter4fvNV(target, index, v);
            }
            
            public static 
            void ProgramParameter4fvNV(GL.Enums.NV_vertex_program target, GLuint index, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glProgramParameter4fvNV(target, index, v_ptr);
                    }
                }
            }
            
            public static 
            void ProgramParameter4fvNV(GL.Enums.NV_vertex_program target, GLuint index, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glProgramParameter4fvNV(target, index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ProgramParameters4dvNV(GL.Enums.NV_vertex_program target, GLuint index, GLuint count, GLdouble* v)
            {
                Delegates.glProgramParameters4dvNV(target, index, count, v);
            }
            
            public static 
            void ProgramParameters4dvNV(GL.Enums.NV_vertex_program target, GLuint index, GLuint count, GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glProgramParameters4dvNV(target, index, count, v_ptr);
                    }
                }
            }
            
            public static 
            void ProgramParameters4dvNV(GL.Enums.NV_vertex_program target, GLuint index, GLuint count, ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glProgramParameters4dvNV(target, index, count, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ProgramParameters4fvNV(GL.Enums.NV_vertex_program target, GLuint index, GLuint count, GLfloat* v)
            {
                Delegates.glProgramParameters4fvNV(target, index, count, v);
            }
            
            public static 
            void ProgramParameters4fvNV(GL.Enums.NV_vertex_program target, GLuint index, GLuint count, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glProgramParameters4fvNV(target, index, count, v_ptr);
                    }
                }
            }
            
            public static 
            void ProgramParameters4fvNV(GL.Enums.NV_vertex_program target, GLuint index, GLuint count, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glProgramParameters4fvNV(target, index, count, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void RequestResidentProgramsNV(GLsizei n, GLuint* programs)
            {
                Delegates.glRequestResidentProgramsNV(n, programs);
            }
            
            public static 
            void RequestResidentProgramsNV(GLsizei n, GLuint[] programs)
            {
                unsafe
                {
                    fixed (GLuint* programs_ptr = programs)
                    {
                        Delegates.glRequestResidentProgramsNV(n, programs_ptr);
                    }
                }
            }
            
            public static 
            void RequestResidentProgramsNV(GLsizei n, ref GLuint programs)
            {
                unsafe
                {
                    fixed (GLuint* programs_ptr = &programs)
                    {
                        Delegates.glRequestResidentProgramsNV(n, programs_ptr);
                    }
                }
            }
            
            public static 
            void TrackMatrixNV(GL.Enums.NV_vertex_program target, GLuint address, GL.Enums.NV_vertex_program matrix, GL.Enums.NV_vertex_program transform)
            {
                Delegates.glTrackMatrixNV(target, address, matrix, transform);
            }
            
            public static 
            unsafe void VertexAttribPointerNV(GLuint index, GLint fsize, GL.Enums.NV_vertex_program type, GLsizei stride, void* pointer)
            {
                Delegates.glVertexAttribPointerNV(index, fsize, type, stride, pointer);
            }
            
            public static 
            void VertexAttribPointerNV(GLuint index, GLint fsize, GL.Enums.NV_vertex_program type, GLsizei stride, object pointer)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glVertexAttribPointerNV(index, fsize, type, stride, (void*)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            void VertexAttrib1dNV(GLuint index, GLdouble x)
            {
                Delegates.glVertexAttrib1dNV(index, x);
            }
            
            public static 
            unsafe void VertexAttrib1dvNV(GLuint index, GLdouble* v)
            {
                Delegates.glVertexAttrib1dvNV(index, v);
            }
            
            public static 
            void VertexAttrib1dvNV(GLuint index, GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glVertexAttrib1dvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib1dvNV(GLuint index, ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib1dvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib1fNV(GLuint index, GLfloat x)
            {
                Delegates.glVertexAttrib1fNV(index, x);
            }
            
            public static 
            unsafe void VertexAttrib1fvNV(GLuint index, GLfloat* v)
            {
                Delegates.glVertexAttrib1fvNV(index, v);
            }
            
            public static 
            void VertexAttrib1fvNV(GLuint index, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glVertexAttrib1fvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib1fvNV(GLuint index, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib1fvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib1sNV(GLuint index, GLshort x)
            {
                Delegates.glVertexAttrib1sNV(index, x);
            }
            
            public static 
            unsafe void VertexAttrib1svNV(GLuint index, GLshort* v)
            {
                Delegates.glVertexAttrib1svNV(index, v);
            }
            
            public static 
            void VertexAttrib1svNV(GLuint index, GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glVertexAttrib1svNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib1svNV(GLuint index, ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib1svNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)
            {
                Delegates.glVertexAttrib2dNV(index, x, y);
            }
            
            public static 
            unsafe void VertexAttrib2dvNV(GLuint index, GLdouble* v)
            {
                Delegates.glVertexAttrib2dvNV(index, v);
            }
            
            public static 
            void VertexAttrib2dvNV(GLuint index, GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2dvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib2dvNV(GLuint index, ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2dvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y)
            {
                Delegates.glVertexAttrib2fNV(index, x, y);
            }
            
            public static 
            unsafe void VertexAttrib2fvNV(GLuint index, GLfloat* v)
            {
                Delegates.glVertexAttrib2fvNV(index, v);
            }
            
            public static 
            void VertexAttrib2fvNV(GLuint index, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2fvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib2fvNV(GLuint index, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2fvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib2sNV(GLuint index, GLshort x, GLshort y)
            {
                Delegates.glVertexAttrib2sNV(index, x, y);
            }
            
            public static 
            unsafe void VertexAttrib2svNV(GLuint index, GLshort* v)
            {
                Delegates.glVertexAttrib2svNV(index, v);
            }
            
            public static 
            void VertexAttrib2svNV(GLuint index, GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2svNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib2svNV(GLuint index, ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2svNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)
            {
                Delegates.glVertexAttrib3dNV(index, x, y, z);
            }
            
            public static 
            unsafe void VertexAttrib3dvNV(GLuint index, GLdouble* v)
            {
                Delegates.glVertexAttrib3dvNV(index, v);
            }
            
            public static 
            void VertexAttrib3dvNV(GLuint index, GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3dvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib3dvNV(GLuint index, ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3dvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z)
            {
                Delegates.glVertexAttrib3fNV(index, x, y, z);
            }
            
            public static 
            unsafe void VertexAttrib3fvNV(GLuint index, GLfloat* v)
            {
                Delegates.glVertexAttrib3fvNV(index, v);
            }
            
            public static 
            void VertexAttrib3fvNV(GLuint index, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3fvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib3fvNV(GLuint index, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3fvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)
            {
                Delegates.glVertexAttrib3sNV(index, x, y, z);
            }
            
            public static 
            unsafe void VertexAttrib3svNV(GLuint index, GLshort* v)
            {
                Delegates.glVertexAttrib3svNV(index, v);
            }
            
            public static 
            void VertexAttrib3svNV(GLuint index, GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3svNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib3svNV(GLuint index, ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3svNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
            {
                Delegates.glVertexAttrib4dNV(index, x, y, z, w);
            }
            
            public static 
            unsafe void VertexAttrib4dvNV(GLuint index, GLdouble* v)
            {
                Delegates.glVertexAttrib4dvNV(index, v);
            }
            
            public static 
            void VertexAttrib4dvNV(GLuint index, GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4dvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4dvNV(GLuint index, ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4dvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
            {
                Delegates.glVertexAttrib4fNV(index, x, y, z, w);
            }
            
            public static 
            unsafe void VertexAttrib4fvNV(GLuint index, GLfloat* v)
            {
                Delegates.glVertexAttrib4fvNV(index, v);
            }
            
            public static 
            void VertexAttrib4fvNV(GLuint index, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4fvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4fvNV(GLuint index, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4fvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
            {
                Delegates.glVertexAttrib4sNV(index, x, y, z, w);
            }
            
            public static 
            unsafe void VertexAttrib4svNV(GLuint index, GLshort* v)
            {
                Delegates.glVertexAttrib4svNV(index, v);
            }
            
            public static 
            void VertexAttrib4svNV(GLuint index, GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4svNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4svNV(GLuint index, ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4svNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
            {
                Delegates.glVertexAttrib4ubNV(index, x, y, z, w);
            }
            
            public static 
            unsafe void VertexAttrib4ubvNV(GLuint index, GLubyte* v)
            {
                Delegates.glVertexAttrib4ubvNV(index, v);
            }
            
            public static 
            void VertexAttrib4ubvNV(GLuint index, GLubyte[] v)
            {
                unsafe
                {
                    fixed (GLubyte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4ubvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4ubvNV(GLuint index, ref GLubyte v)
            {
                unsafe
                {
                    fixed (GLubyte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4ubvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribs1dvNV(GLuint index, GLsizei count, GLdouble* v)
            {
                Delegates.glVertexAttribs1dvNV(index, count, v);
            }
            
            public static 
            void VertexAttribs1dvNV(GLuint index, GLsizei count, GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glVertexAttribs1dvNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribs1dvNV(GLuint index, GLsizei count, ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs1dvNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribs1fvNV(GLuint index, GLsizei count, GLfloat* v)
            {
                Delegates.glVertexAttribs1fvNV(index, count, v);
            }
            
            public static 
            void VertexAttribs1fvNV(GLuint index, GLsizei count, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glVertexAttribs1fvNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribs1fvNV(GLuint index, GLsizei count, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs1fvNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribs1svNV(GLuint index, GLsizei count, GLshort* v)
            {
                Delegates.glVertexAttribs1svNV(index, count, v);
            }
            
            public static 
            void VertexAttribs1svNV(GLuint index, GLsizei count, GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glVertexAttribs1svNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribs1svNV(GLuint index, GLsizei count, ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs1svNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribs2dvNV(GLuint index, GLsizei count, GLdouble* v)
            {
                Delegates.glVertexAttribs2dvNV(index, count, v);
            }
            
            public static 
            void VertexAttribs2dvNV(GLuint index, GLsizei count, GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glVertexAttribs2dvNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribs2dvNV(GLuint index, GLsizei count, ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs2dvNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribs2fvNV(GLuint index, GLsizei count, GLfloat* v)
            {
                Delegates.glVertexAttribs2fvNV(index, count, v);
            }
            
            public static 
            void VertexAttribs2fvNV(GLuint index, GLsizei count, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glVertexAttribs2fvNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribs2fvNV(GLuint index, GLsizei count, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs2fvNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribs2svNV(GLuint index, GLsizei count, GLshort* v)
            {
                Delegates.glVertexAttribs2svNV(index, count, v);
            }
            
            public static 
            void VertexAttribs2svNV(GLuint index, GLsizei count, GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glVertexAttribs2svNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribs2svNV(GLuint index, GLsizei count, ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs2svNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribs3dvNV(GLuint index, GLsizei count, GLdouble* v)
            {
                Delegates.glVertexAttribs3dvNV(index, count, v);
            }
            
            public static 
            void VertexAttribs3dvNV(GLuint index, GLsizei count, GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glVertexAttribs3dvNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribs3dvNV(GLuint index, GLsizei count, ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs3dvNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribs3fvNV(GLuint index, GLsizei count, GLfloat* v)
            {
                Delegates.glVertexAttribs3fvNV(index, count, v);
            }
            
            public static 
            void VertexAttribs3fvNV(GLuint index, GLsizei count, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glVertexAttribs3fvNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribs3fvNV(GLuint index, GLsizei count, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs3fvNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribs3svNV(GLuint index, GLsizei count, GLshort* v)
            {
                Delegates.glVertexAttribs3svNV(index, count, v);
            }
            
            public static 
            void VertexAttribs3svNV(GLuint index, GLsizei count, GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glVertexAttribs3svNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribs3svNV(GLuint index, GLsizei count, ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs3svNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribs4dvNV(GLuint index, GLsizei count, GLdouble* v)
            {
                Delegates.glVertexAttribs4dvNV(index, count, v);
            }
            
            public static 
            void VertexAttribs4dvNV(GLuint index, GLsizei count, GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4dvNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribs4dvNV(GLuint index, GLsizei count, ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4dvNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribs4fvNV(GLuint index, GLsizei count, GLfloat* v)
            {
                Delegates.glVertexAttribs4fvNV(index, count, v);
            }
            
            public static 
            void VertexAttribs4fvNV(GLuint index, GLsizei count, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4fvNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribs4fvNV(GLuint index, GLsizei count, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4fvNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribs4svNV(GLuint index, GLsizei count, GLshort* v)
            {
                Delegates.glVertexAttribs4svNV(index, count, v);
            }
            
            public static 
            void VertexAttribs4svNV(GLuint index, GLsizei count, GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4svNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribs4svNV(GLuint index, GLsizei count, ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4svNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribs4ubvNV(GLuint index, GLsizei count, GLubyte* v)
            {
                Delegates.glVertexAttribs4ubvNV(index, count, v);
            }
            
            public static 
            void VertexAttribs4ubvNV(GLuint index, GLsizei count, GLubyte[] v)
            {
                unsafe
                {
                    fixed (GLubyte* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4ubvNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribs4ubvNV(GLuint index, GLsizei count, ref GLubyte v)
            {
                unsafe
                {
                    fixed (GLubyte* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4ubvNV(index, count, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void GenOcclusionQueriesNV(GLsizei n, GLuint* ids)
            {
                Delegates.glGenOcclusionQueriesNV(n, ids);
            }
            
            public static 
            void GenOcclusionQueriesNV(GLsizei n, GLuint[] ids)
            {
                unsafe
                {
                    fixed (GLuint* ids_ptr = ids)
                    {
                        Delegates.glGenOcclusionQueriesNV(n, ids_ptr);
                    }
                }
            }
            
            public static 
            void GenOcclusionQueriesNV(GLsizei n, out GLuint ids)
            {
                ids = default(GLuint);
                unsafe
                {
                    fixed (GLuint* ids_ptr = &ids)
                    {
                        Delegates.glGenOcclusionQueriesNV(n, ids_ptr);
                        ids = *ids_ptr;
                    }
                }
            }
            
            public static 
            unsafe void DeleteOcclusionQueriesNV(GLsizei n, GLuint* ids)
            {
                Delegates.glDeleteOcclusionQueriesNV(n, ids);
            }
            
            public static 
            void DeleteOcclusionQueriesNV(GLsizei n, GLuint[] ids)
            {
                unsafe
                {
                    fixed (GLuint* ids_ptr = ids)
                    {
                        Delegates.glDeleteOcclusionQueriesNV(n, ids_ptr);
                    }
                }
            }
            
            public static 
            void DeleteOcclusionQueriesNV(GLsizei n, ref GLuint ids)
            {
                unsafe
                {
                    fixed (GLuint* ids_ptr = &ids)
                    {
                        Delegates.glDeleteOcclusionQueriesNV(n, ids_ptr);
                    }
                }
            }
            
            public static 
            GLboolean IsOcclusionQueryNV(GLuint id)
            {
                return Delegates.glIsOcclusionQueryNV(id);
            }
            
            public static 
            void BeginOcclusionQueryNV(GLuint id)
            {
                Delegates.glBeginOcclusionQueryNV(id);
            }
            
            public static 
            void EndOcclusionQueryNV()
            {
                Delegates.glEndOcclusionQueryNV();
            }
            
            public static 
            unsafe void GetOcclusionQueryivNV(GLuint id, GL.Enums.NV_occlusion_query pname, GLint* @params)
            {
                Delegates.glGetOcclusionQueryivNV(id, pname, @params);
            }
            
            public static 
            void GetOcclusionQueryivNV(GLuint id, GL.Enums.NV_occlusion_query pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetOcclusionQueryivNV(id, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetOcclusionQueryivNV(GLuint id, GL.Enums.NV_occlusion_query pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetOcclusionQueryivNV(id, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetOcclusionQueryuivNV(GLuint id, GL.Enums.NV_occlusion_query pname, GLuint* @params)
            {
                Delegates.glGetOcclusionQueryuivNV(id, pname, @params);
            }
            
            public static 
            void GetOcclusionQueryuivNV(GLuint id, GL.Enums.NV_occlusion_query pname, GLuint[] @params)
            {
                unsafe
                {
                    fixed (GLuint* @params_ptr = @params)
                    {
                        Delegates.glGetOcclusionQueryuivNV(id, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetOcclusionQueryuivNV(GLuint id, GL.Enums.NV_occlusion_query pname, out GLuint @params)
            {
                @params = default(GLuint);
                unsafe
                {
                    fixed (GLuint* @params_ptr = &@params)
                    {
                        Delegates.glGetOcclusionQueryuivNV(id, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            void PointParameteriNV(GL.Enums.NV_point_sprite pname, GLint param)
            {
                Delegates.glPointParameteriNV(pname, param);
            }
            
            public static 
            unsafe void PointParameterivNV(GL.Enums.NV_point_sprite pname, GLint* @params)
            {
                Delegates.glPointParameterivNV(pname, @params);
            }
            
            public static 
            void PointParameterivNV(GL.Enums.NV_point_sprite pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glPointParameterivNV(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void PointParameterivNV(GL.Enums.NV_point_sprite pname, ref GLint @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glPointParameterivNV(pname, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ProgramNamedParameter4fNV(GLuint id, GLsizei len, GLubyte* name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
            {
                Delegates.glProgramNamedParameter4fNV(id, len, name, x, y, z, w);
            }
            
            public static 
            void ProgramNamedParameter4fNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
            {
                unsafe
                {
                    fixed (GLubyte* name_ptr = name)
                    {
                        Delegates.glProgramNamedParameter4fNV(id, len, name_ptr, x, y, z, w);
                    }
                }
            }
            
            public static 
            void ProgramNamedParameter4fNV(GLuint id, GLsizei len, ref GLubyte name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
            {
                unsafe
                {
                    fixed (GLubyte* name_ptr = &name)
                    {
                        Delegates.glProgramNamedParameter4fNV(id, len, name_ptr, x, y, z, w);
                    }
                }
            }
            
            public static 
            unsafe void ProgramNamedParameter4dNV(GLuint id, GLsizei len, GLubyte* name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
            {
                Delegates.glProgramNamedParameter4dNV(id, len, name, x, y, z, w);
            }
            
            public static 
            void ProgramNamedParameter4dNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
            {
                unsafe
                {
                    fixed (GLubyte* name_ptr = name)
                    {
                        Delegates.glProgramNamedParameter4dNV(id, len, name_ptr, x, y, z, w);
                    }
                }
            }
            
            public static 
            void ProgramNamedParameter4dNV(GLuint id, GLsizei len, ref GLubyte name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
            {
                unsafe
                {
                    fixed (GLubyte* name_ptr = &name)
                    {
                        Delegates.glProgramNamedParameter4dNV(id, len, name_ptr, x, y, z, w);
                    }
                }
            }
            
            public static 
            unsafe void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte* name, GLfloat* v)
            {
                Delegates.glProgramNamedParameter4fvNV(id, len, name, v);
            }
            
            public static 
            unsafe void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte* name, GLfloat[] v)
            {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glProgramNamedParameter4fvNV(id, len, name, v_ptr);
                    }
            }
            
            public static 
            unsafe void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte* name, ref GLfloat v)
            {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glProgramNamedParameter4fvNV(id, len, name, v_ptr);
                    }
            }
            
            public static 
            unsafe void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat* v)
            {
                    fixed (GLubyte* name_ptr = name)
                    {
                        Delegates.glProgramNamedParameter4fvNV(id, len, name_ptr, v);
                    }
            }
            
            public static 
            void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLubyte* name_ptr = name)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glProgramNamedParameter4fvNV(id, len, name_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLubyte* name_ptr = name)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glProgramNamedParameter4fvNV(id, len, name_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, ref GLubyte name, GLfloat* v)
            {
                    fixed (GLubyte* name_ptr = &name)
                    {
                        Delegates.glProgramNamedParameter4fvNV(id, len, name_ptr, v);
                    }
            }
            
            public static 
            void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, ref GLubyte name, GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLubyte* name_ptr = &name)
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glProgramNamedParameter4fvNV(id, len, name_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, ref GLubyte name, ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLubyte* name_ptr = &name)
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glProgramNamedParameter4fvNV(id, len, name_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte* name, GLdouble* v)
            {
                Delegates.glProgramNamedParameter4dvNV(id, len, name, v);
            }
            
            public static 
            unsafe void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte* name, GLdouble[] v)
            {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glProgramNamedParameter4dvNV(id, len, name, v_ptr);
                    }
            }
            
            public static 
            unsafe void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte* name, ref GLdouble v)
            {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glProgramNamedParameter4dvNV(id, len, name, v_ptr);
                    }
            }
            
            public static 
            unsafe void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble* v)
            {
                    fixed (GLubyte* name_ptr = name)
                    {
                        Delegates.glProgramNamedParameter4dvNV(id, len, name_ptr, v);
                    }
            }
            
            public static 
            void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLubyte* name_ptr = name)
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glProgramNamedParameter4dvNV(id, len, name_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLubyte* name_ptr = name)
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glProgramNamedParameter4dvNV(id, len, name_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, ref GLubyte name, GLdouble* v)
            {
                    fixed (GLubyte* name_ptr = &name)
                    {
                        Delegates.glProgramNamedParameter4dvNV(id, len, name_ptr, v);
                    }
            }
            
            public static 
            void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, ref GLubyte name, GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLubyte* name_ptr = &name)
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glProgramNamedParameter4dvNV(id, len, name_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, ref GLubyte name, ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLubyte* name_ptr = &name)
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glProgramNamedParameter4dvNV(id, len, name_ptr, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte* name, GLfloat* @params)
            {
                Delegates.glGetProgramNamedParameterfvNV(id, len, name, @params);
            }
            
            public static 
            unsafe void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte* name, GLfloat[] @params)
            {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetProgramNamedParameterfvNV(id, len, name, @params_ptr);
                    }
            }
            
            public static 
            unsafe void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte* name, out GLfloat @params)
            {
                @params = default(GLfloat);
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramNamedParameterfvNV(id, len, name, @params_ptr);
                        @params = *@params_ptr;
                    }
            }
            
            public static 
            unsafe void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat* @params)
            {
                @params = default(GLfloat*);
                    fixed (GLubyte* name_ptr = name)
                    {
                        Delegates.glGetProgramNamedParameterfvNV(id, len, name_ptr, @params);
                    }
            }
            
            public static 
            void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLubyte* name_ptr = name)
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetProgramNamedParameterfvNV(id, len, name_ptr, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLubyte* name_ptr = name)
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramNamedParameterfvNV(id, len, name_ptr, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, ref GLubyte name, GLfloat* @params)
            {
                @params = default(GLfloat*);
                    fixed (GLubyte* name_ptr = &name)
                    {
                        Delegates.glGetProgramNamedParameterfvNV(id, len, name_ptr, @params);
                    }
            }
            
            public static 
            void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, ref GLubyte name, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLubyte* name_ptr = &name)
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetProgramNamedParameterfvNV(id, len, name_ptr, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, ref GLubyte name, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLubyte* name_ptr = &name)
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramNamedParameterfvNV(id, len, name_ptr, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte* name, GLdouble* @params)
            {
                Delegates.glGetProgramNamedParameterdvNV(id, len, name, @params);
            }
            
            public static 
            unsafe void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte* name, GLdouble[] @params)
            {
                    fixed (GLdouble* @params_ptr = @params)
                    {
                        Delegates.glGetProgramNamedParameterdvNV(id, len, name, @params_ptr);
                    }
            }
            
            public static 
            unsafe void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte* name, out GLdouble @params)
            {
                @params = default(GLdouble);
                    fixed (GLdouble* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramNamedParameterdvNV(id, len, name, @params_ptr);
                        @params = *@params_ptr;
                    }
            }
            
            public static 
            unsafe void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble* @params)
            {
                @params = default(GLdouble*);
                    fixed (GLubyte* name_ptr = name)
                    {
                        Delegates.glGetProgramNamedParameterdvNV(id, len, name_ptr, @params);
                    }
            }
            
            public static 
            void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble[] @params)
            {
                unsafe
                {
                    fixed (GLubyte* name_ptr = name)
                    fixed (GLdouble* @params_ptr = @params)
                    {
                        Delegates.glGetProgramNamedParameterdvNV(id, len, name_ptr, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, out GLdouble @params)
            {
                @params = default(GLdouble);
                unsafe
                {
                    fixed (GLubyte* name_ptr = name)
                    fixed (GLdouble* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramNamedParameterdvNV(id, len, name_ptr, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, ref GLubyte name, GLdouble* @params)
            {
                @params = default(GLdouble*);
                    fixed (GLubyte* name_ptr = &name)
                    {
                        Delegates.glGetProgramNamedParameterdvNV(id, len, name_ptr, @params);
                    }
            }
            
            public static 
            void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, ref GLubyte name, GLdouble[] @params)
            {
                unsafe
                {
                    fixed (GLubyte* name_ptr = &name)
                    fixed (GLdouble* @params_ptr = @params)
                    {
                        Delegates.glGetProgramNamedParameterdvNV(id, len, name_ptr, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, ref GLubyte name, out GLdouble @params)
            {
                @params = default(GLdouble);
                unsafe
                {
                    fixed (GLubyte* name_ptr = &name)
                    fixed (GLdouble* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramNamedParameterdvNV(id, len, name_ptr, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            void Vertex2hNV(GLhalfNV x, GLhalfNV y)
            {
                Delegates.glVertex2hNV(x, y);
            }
            
            public static 
            unsafe void Vertex2hvNV(GLhalfNV* v)
            {
                Delegates.glVertex2hvNV(v);
            }
            
            public static 
            void Vertex2hvNV(GLhalfNV[] v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = v)
                    {
                        Delegates.glVertex2hvNV(v_ptr);
                    }
                }
            }
            
            public static 
            void Vertex2hvNV(ref GLhalfNV v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = &v)
                    {
                        Delegates.glVertex2hvNV(v_ptr);
                    }
                }
            }
            
            public static 
            void Vertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z)
            {
                Delegates.glVertex3hNV(x, y, z);
            }
            
            public static 
            unsafe void Vertex3hvNV(GLhalfNV* v)
            {
                Delegates.glVertex3hvNV(v);
            }
            
            public static 
            void Vertex3hvNV(GLhalfNV[] v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = v)
                    {
                        Delegates.glVertex3hvNV(v_ptr);
                    }
                }
            }
            
            public static 
            void Vertex3hvNV(ref GLhalfNV v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = &v)
                    {
                        Delegates.glVertex3hvNV(v_ptr);
                    }
                }
            }
            
            public static 
            void Vertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
            {
                Delegates.glVertex4hNV(x, y, z, w);
            }
            
            public static 
            unsafe void Vertex4hvNV(GLhalfNV* v)
            {
                Delegates.glVertex4hvNV(v);
            }
            
            public static 
            void Vertex4hvNV(GLhalfNV[] v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = v)
                    {
                        Delegates.glVertex4hvNV(v_ptr);
                    }
                }
            }
            
            public static 
            void Vertex4hvNV(ref GLhalfNV v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = &v)
                    {
                        Delegates.glVertex4hvNV(v_ptr);
                    }
                }
            }
            
            public static 
            void Normal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
            {
                Delegates.glNormal3hNV(nx, ny, nz);
            }
            
            public static 
            unsafe void Normal3hvNV(GLhalfNV* v)
            {
                Delegates.glNormal3hvNV(v);
            }
            
            public static 
            void Normal3hvNV(GLhalfNV[] v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = v)
                    {
                        Delegates.glNormal3hvNV(v_ptr);
                    }
                }
            }
            
            public static 
            void Normal3hvNV(ref GLhalfNV v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = &v)
                    {
                        Delegates.glNormal3hvNV(v_ptr);
                    }
                }
            }
            
            public static 
            void Color3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
            {
                Delegates.glColor3hNV(red, green, blue);
            }
            
            public static 
            unsafe void Color3hvNV(GLhalfNV* v)
            {
                Delegates.glColor3hvNV(v);
            }
            
            public static 
            void Color3hvNV(GLhalfNV[] v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = v)
                    {
                        Delegates.glColor3hvNV(v_ptr);
                    }
                }
            }
            
            public static 
            void Color3hvNV(ref GLhalfNV v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = &v)
                    {
                        Delegates.glColor3hvNV(v_ptr);
                    }
                }
            }
            
            public static 
            void Color4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
            {
                Delegates.glColor4hNV(red, green, blue, alpha);
            }
            
            public static 
            unsafe void Color4hvNV(GLhalfNV* v)
            {
                Delegates.glColor4hvNV(v);
            }
            
            public static 
            void Color4hvNV(GLhalfNV[] v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = v)
                    {
                        Delegates.glColor4hvNV(v_ptr);
                    }
                }
            }
            
            public static 
            void Color4hvNV(ref GLhalfNV v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = &v)
                    {
                        Delegates.glColor4hvNV(v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord1hNV(GLhalfNV s)
            {
                Delegates.glTexCoord1hNV(s);
            }
            
            public static 
            unsafe void TexCoord1hvNV(GLhalfNV* v)
            {
                Delegates.glTexCoord1hvNV(v);
            }
            
            public static 
            void TexCoord1hvNV(GLhalfNV[] v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = v)
                    {
                        Delegates.glTexCoord1hvNV(v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord1hvNV(ref GLhalfNV v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = &v)
                    {
                        Delegates.glTexCoord1hvNV(v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2hNV(GLhalfNV s, GLhalfNV t)
            {
                Delegates.glTexCoord2hNV(s, t);
            }
            
            public static 
            unsafe void TexCoord2hvNV(GLhalfNV* v)
            {
                Delegates.glTexCoord2hvNV(v);
            }
            
            public static 
            void TexCoord2hvNV(GLhalfNV[] v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = v)
                    {
                        Delegates.glTexCoord2hvNV(v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord2hvNV(ref GLhalfNV v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = &v)
                    {
                        Delegates.glTexCoord2hvNV(v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r)
            {
                Delegates.glTexCoord3hNV(s, t, r);
            }
            
            public static 
            unsafe void TexCoord3hvNV(GLhalfNV* v)
            {
                Delegates.glTexCoord3hvNV(v);
            }
            
            public static 
            void TexCoord3hvNV(GLhalfNV[] v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = v)
                    {
                        Delegates.glTexCoord3hvNV(v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord3hvNV(ref GLhalfNV v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = &v)
                    {
                        Delegates.glTexCoord3hvNV(v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
            {
                Delegates.glTexCoord4hNV(s, t, r, q);
            }
            
            public static 
            unsafe void TexCoord4hvNV(GLhalfNV* v)
            {
                Delegates.glTexCoord4hvNV(v);
            }
            
            public static 
            void TexCoord4hvNV(GLhalfNV[] v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = v)
                    {
                        Delegates.glTexCoord4hvNV(v_ptr);
                    }
                }
            }
            
            public static 
            void TexCoord4hvNV(ref GLhalfNV v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = &v)
                    {
                        Delegates.glTexCoord4hvNV(v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord1hNV(GL.Enums.NV_half_float target, GLhalfNV s)
            {
                Delegates.glMultiTexCoord1hNV(target, s);
            }
            
            public static 
            unsafe void MultiTexCoord1hvNV(GL.Enums.NV_half_float target, GLhalfNV* v)
            {
                Delegates.glMultiTexCoord1hvNV(target, v);
            }
            
            public static 
            void MultiTexCoord1hvNV(GL.Enums.NV_half_float target, GLhalfNV[] v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord1hvNV(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord1hvNV(GL.Enums.NV_half_float target, ref GLhalfNV v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord1hvNV(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord2hNV(GL.Enums.NV_half_float target, GLhalfNV s, GLhalfNV t)
            {
                Delegates.glMultiTexCoord2hNV(target, s, t);
            }
            
            public static 
            unsafe void MultiTexCoord2hvNV(GL.Enums.NV_half_float target, GLhalfNV* v)
            {
                Delegates.glMultiTexCoord2hvNV(target, v);
            }
            
            public static 
            void MultiTexCoord2hvNV(GL.Enums.NV_half_float target, GLhalfNV[] v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2hvNV(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord2hvNV(GL.Enums.NV_half_float target, ref GLhalfNV v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2hvNV(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord3hNV(GL.Enums.NV_half_float target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
            {
                Delegates.glMultiTexCoord3hNV(target, s, t, r);
            }
            
            public static 
            unsafe void MultiTexCoord3hvNV(GL.Enums.NV_half_float target, GLhalfNV* v)
            {
                Delegates.glMultiTexCoord3hvNV(target, v);
            }
            
            public static 
            void MultiTexCoord3hvNV(GL.Enums.NV_half_float target, GLhalfNV[] v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3hvNV(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord3hvNV(GL.Enums.NV_half_float target, ref GLhalfNV v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3hvNV(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord4hNV(GL.Enums.NV_half_float target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
            {
                Delegates.glMultiTexCoord4hNV(target, s, t, r, q);
            }
            
            public static 
            unsafe void MultiTexCoord4hvNV(GL.Enums.NV_half_float target, GLhalfNV* v)
            {
                Delegates.glMultiTexCoord4hvNV(target, v);
            }
            
            public static 
            void MultiTexCoord4hvNV(GL.Enums.NV_half_float target, GLhalfNV[] v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4hvNV(target, v_ptr);
                    }
                }
            }
            
            public static 
            void MultiTexCoord4hvNV(GL.Enums.NV_half_float target, ref GLhalfNV v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4hvNV(target, v_ptr);
                    }
                }
            }
            
            public static 
            void FogCoordhNV(GLhalfNV fog)
            {
                Delegates.glFogCoordhNV(fog);
            }
            
            public static 
            unsafe void FogCoordhvNV(GLhalfNV* fog)
            {
                Delegates.glFogCoordhvNV(fog);
            }
            
            public static 
            void FogCoordhvNV(GLhalfNV[] fog)
            {
                unsafe
                {
                    fixed (GLhalfNV* fog_ptr = fog)
                    {
                        Delegates.glFogCoordhvNV(fog_ptr);
                    }
                }
            }
            
            public static 
            void FogCoordhvNV(ref GLhalfNV fog)
            {
                unsafe
                {
                    fixed (GLhalfNV* fog_ptr = &fog)
                    {
                        Delegates.glFogCoordhvNV(fog_ptr);
                    }
                }
            }
            
            public static 
            void SecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
            {
                Delegates.glSecondaryColor3hNV(red, green, blue);
            }
            
            public static 
            unsafe void SecondaryColor3hvNV(GLhalfNV* v)
            {
                Delegates.glSecondaryColor3hvNV(v);
            }
            
            public static 
            void SecondaryColor3hvNV(GLhalfNV[] v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3hvNV(v_ptr);
                    }
                }
            }
            
            public static 
            void SecondaryColor3hvNV(ref GLhalfNV v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3hvNV(v_ptr);
                    }
                }
            }
            
            public static 
            void VertexWeighthNV(GLhalfNV weight)
            {
                Delegates.glVertexWeighthNV(weight);
            }
            
            public static 
            unsafe void VertexWeighthvNV(GLhalfNV* weight)
            {
                Delegates.glVertexWeighthvNV(weight);
            }
            
            public static 
            void VertexWeighthvNV(GLhalfNV[] weight)
            {
                unsafe
                {
                    fixed (GLhalfNV* weight_ptr = weight)
                    {
                        Delegates.glVertexWeighthvNV(weight_ptr);
                    }
                }
            }
            
            public static 
            void VertexWeighthvNV(ref GLhalfNV weight)
            {
                unsafe
                {
                    fixed (GLhalfNV* weight_ptr = &weight)
                    {
                        Delegates.glVertexWeighthvNV(weight_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib1hNV(GLuint index, GLhalfNV x)
            {
                Delegates.glVertexAttrib1hNV(index, x);
            }
            
            public static 
            unsafe void VertexAttrib1hvNV(GLuint index, GLhalfNV* v)
            {
                Delegates.glVertexAttrib1hvNV(index, v);
            }
            
            public static 
            void VertexAttrib1hvNV(GLuint index, GLhalfNV[] v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = v)
                    {
                        Delegates.glVertexAttrib1hvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib1hvNV(GLuint index, ref GLhalfNV v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib1hvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y)
            {
                Delegates.glVertexAttrib2hNV(index, x, y);
            }
            
            public static 
            unsafe void VertexAttrib2hvNV(GLuint index, GLhalfNV* v)
            {
                Delegates.glVertexAttrib2hvNV(index, v);
            }
            
            public static 
            void VertexAttrib2hvNV(GLuint index, GLhalfNV[] v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2hvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib2hvNV(GLuint index, ref GLhalfNV v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2hvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
            {
                Delegates.glVertexAttrib3hNV(index, x, y, z);
            }
            
            public static 
            unsafe void VertexAttrib3hvNV(GLuint index, GLhalfNV* v)
            {
                Delegates.glVertexAttrib3hvNV(index, v);
            }
            
            public static 
            void VertexAttrib3hvNV(GLuint index, GLhalfNV[] v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3hvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib3hvNV(GLuint index, ref GLhalfNV v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3hvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
            {
                Delegates.glVertexAttrib4hNV(index, x, y, z, w);
            }
            
            public static 
            unsafe void VertexAttrib4hvNV(GLuint index, GLhalfNV* v)
            {
                Delegates.glVertexAttrib4hvNV(index, v);
            }
            
            public static 
            void VertexAttrib4hvNV(GLuint index, GLhalfNV[] v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4hvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttrib4hvNV(GLuint index, ref GLhalfNV v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4hvNV(index, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribs1hvNV(GLuint index, GLsizei n, GLhalfNV* v)
            {
                Delegates.glVertexAttribs1hvNV(index, n, v);
            }
            
            public static 
            void VertexAttribs1hvNV(GLuint index, GLsizei n, GLhalfNV[] v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = v)
                    {
                        Delegates.glVertexAttribs1hvNV(index, n, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribs1hvNV(GLuint index, GLsizei n, ref GLhalfNV v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs1hvNV(index, n, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribs2hvNV(GLuint index, GLsizei n, GLhalfNV* v)
            {
                Delegates.glVertexAttribs2hvNV(index, n, v);
            }
            
            public static 
            void VertexAttribs2hvNV(GLuint index, GLsizei n, GLhalfNV[] v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = v)
                    {
                        Delegates.glVertexAttribs2hvNV(index, n, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribs2hvNV(GLuint index, GLsizei n, ref GLhalfNV v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs2hvNV(index, n, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribs3hvNV(GLuint index, GLsizei n, GLhalfNV* v)
            {
                Delegates.glVertexAttribs3hvNV(index, n, v);
            }
            
            public static 
            void VertexAttribs3hvNV(GLuint index, GLsizei n, GLhalfNV[] v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = v)
                    {
                        Delegates.glVertexAttribs3hvNV(index, n, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribs3hvNV(GLuint index, GLsizei n, ref GLhalfNV v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs3hvNV(index, n, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void VertexAttribs4hvNV(GLuint index, GLsizei n, GLhalfNV* v)
            {
                Delegates.glVertexAttribs4hvNV(index, n, v);
            }
            
            public static 
            void VertexAttribs4hvNV(GLuint index, GLsizei n, GLhalfNV[] v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4hvNV(index, n, v_ptr);
                    }
                }
            }
            
            public static 
            void VertexAttribs4hvNV(GLuint index, GLsizei n, ref GLhalfNV v)
            {
                unsafe
                {
                    fixed (GLhalfNV* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4hvNV(index, n, v_ptr);
                    }
                }
            }
            
            public static 
            unsafe void PixelDataRangeNV(GL.Enums.NV_pixel_data_range target, GLsizei length, void* pointer)
            {
                Delegates.glPixelDataRangeNV(target, length, pointer);
            }
            
            public static 
            void PixelDataRangeNV(GL.Enums.NV_pixel_data_range target, GLsizei length, object pointer)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glPixelDataRangeNV(target, length, (void*)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            void FlushPixelDataRangeNV(GL.Enums.NV_pixel_data_range target)
            {
                Delegates.glFlushPixelDataRangeNV(target);
            }
            
            public static 
            void PrimitiveRestartNV()
            {
                Delegates.glPrimitiveRestartNV();
            }
            
            public static 
            void PrimitiveRestartIndexNV(GLuint index)
            {
                Delegates.glPrimitiveRestartIndexNV(index);
            }
            
            public static 
            void ProgramLocalParameterI4iNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLint x, GLint y, GLint z, GLint w)
            {
                Delegates.glProgramLocalParameterI4iNV(target, index, x, y, z, w);
            }
            
            public static 
            unsafe void ProgramLocalParameterI4ivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLint* @params)
            {
                Delegates.glProgramLocalParameterI4ivNV(target, index, @params);
            }
            
            public static 
            void ProgramLocalParameterI4ivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameterI4ivNV(target, index, @params_ptr);
                    }
                }
            }
            
            public static 
            void ProgramLocalParameterI4ivNV(GL.Enums.NV_gpu_program4 target, GLuint index, ref GLint @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameterI4ivNV(target, index, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ProgramLocalParametersI4ivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLsizei count, GLint* @params)
            {
                Delegates.glProgramLocalParametersI4ivNV(target, index, count, @params);
            }
            
            public static 
            void ProgramLocalParametersI4ivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLsizei count, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParametersI4ivNV(target, index, count, @params_ptr);
                    }
                }
            }
            
            public static 
            void ProgramLocalParametersI4ivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLsizei count, ref GLint @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParametersI4ivNV(target, index, count, @params_ptr);
                    }
                }
            }
            
            public static 
            void ProgramLocalParameterI4uiNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
            {
                Delegates.glProgramLocalParameterI4uiNV(target, index, x, y, z, w);
            }
            
            public static 
            unsafe void ProgramLocalParameterI4uivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLuint* @params)
            {
                Delegates.glProgramLocalParameterI4uivNV(target, index, @params);
            }
            
            public static 
            void ProgramLocalParameterI4uivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLuint[] @params)
            {
                unsafe
                {
                    fixed (GLuint* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameterI4uivNV(target, index, @params_ptr);
                    }
                }
            }
            
            public static 
            void ProgramLocalParameterI4uivNV(GL.Enums.NV_gpu_program4 target, GLuint index, ref GLuint @params)
            {
                unsafe
                {
                    fixed (GLuint* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameterI4uivNV(target, index, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ProgramLocalParametersI4uivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLsizei count, GLuint* @params)
            {
                Delegates.glProgramLocalParametersI4uivNV(target, index, count, @params);
            }
            
            public static 
            void ProgramLocalParametersI4uivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLsizei count, GLuint[] @params)
            {
                unsafe
                {
                    fixed (GLuint* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParametersI4uivNV(target, index, count, @params_ptr);
                    }
                }
            }
            
            public static 
            void ProgramLocalParametersI4uivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLsizei count, ref GLuint @params)
            {
                unsafe
                {
                    fixed (GLuint* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParametersI4uivNV(target, index, count, @params_ptr);
                    }
                }
            }
            
            public static 
            void ProgramEnvParameterI4iNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLint x, GLint y, GLint z, GLint w)
            {
                Delegates.glProgramEnvParameterI4iNV(target, index, x, y, z, w);
            }
            
            public static 
            unsafe void ProgramEnvParameterI4ivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLint* @params)
            {
                Delegates.glProgramEnvParameterI4ivNV(target, index, @params);
            }
            
            public static 
            void ProgramEnvParameterI4ivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameterI4ivNV(target, index, @params_ptr);
                    }
                }
            }
            
            public static 
            void ProgramEnvParameterI4ivNV(GL.Enums.NV_gpu_program4 target, GLuint index, ref GLint @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameterI4ivNV(target, index, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ProgramEnvParametersI4ivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLsizei count, GLint* @params)
            {
                Delegates.glProgramEnvParametersI4ivNV(target, index, count, @params);
            }
            
            public static 
            void ProgramEnvParametersI4ivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLsizei count, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParametersI4ivNV(target, index, count, @params_ptr);
                    }
                }
            }
            
            public static 
            void ProgramEnvParametersI4ivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLsizei count, ref GLint @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParametersI4ivNV(target, index, count, @params_ptr);
                    }
                }
            }
            
            public static 
            void ProgramEnvParameterI4uiNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
            {
                Delegates.glProgramEnvParameterI4uiNV(target, index, x, y, z, w);
            }
            
            public static 
            unsafe void ProgramEnvParameterI4uivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLuint* @params)
            {
                Delegates.glProgramEnvParameterI4uivNV(target, index, @params);
            }
            
            public static 
            void ProgramEnvParameterI4uivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLuint[] @params)
            {
                unsafe
                {
                    fixed (GLuint* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameterI4uivNV(target, index, @params_ptr);
                    }
                }
            }
            
            public static 
            void ProgramEnvParameterI4uivNV(GL.Enums.NV_gpu_program4 target, GLuint index, ref GLuint @params)
            {
                unsafe
                {
                    fixed (GLuint* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameterI4uivNV(target, index, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ProgramEnvParametersI4uivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLsizei count, GLuint* @params)
            {
                Delegates.glProgramEnvParametersI4uivNV(target, index, count, @params);
            }
            
            public static 
            void ProgramEnvParametersI4uivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLsizei count, GLuint[] @params)
            {
                unsafe
                {
                    fixed (GLuint* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParametersI4uivNV(target, index, count, @params_ptr);
                    }
                }
            }
            
            public static 
            void ProgramEnvParametersI4uivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLsizei count, ref GLuint @params)
            {
                unsafe
                {
                    fixed (GLuint* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParametersI4uivNV(target, index, count, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void GetProgramLocalParameterIivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLint* @params)
            {
                Delegates.glGetProgramLocalParameterIivNV(target, index, @params);
            }
            
            public static 
            void GetProgramLocalParameterIivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterIivNV(target, index, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetProgramLocalParameterIivNV(GL.Enums.NV_gpu_program4 target, GLuint index, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterIivNV(target, index, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetProgramLocalParameterIuivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLuint* @params)
            {
                Delegates.glGetProgramLocalParameterIuivNV(target, index, @params);
            }
            
            public static 
            void GetProgramLocalParameterIuivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLuint[] @params)
            {
                unsafe
                {
                    fixed (GLuint* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterIuivNV(target, index, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetProgramLocalParameterIuivNV(GL.Enums.NV_gpu_program4 target, GLuint index, out GLuint @params)
            {
                @params = default(GLuint);
                unsafe
                {
                    fixed (GLuint* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterIuivNV(target, index, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetProgramEnvParameterIivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLint* @params)
            {
                Delegates.glGetProgramEnvParameterIivNV(target, index, @params);
            }
            
            public static 
            void GetProgramEnvParameterIivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterIivNV(target, index, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetProgramEnvParameterIivNV(GL.Enums.NV_gpu_program4 target, GLuint index, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterIivNV(target, index, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetProgramEnvParameterIuivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLuint* @params)
            {
                Delegates.glGetProgramEnvParameterIuivNV(target, index, @params);
            }
            
            public static 
            void GetProgramEnvParameterIuivNV(GL.Enums.NV_gpu_program4 target, GLuint index, GLuint[] @params)
            {
                unsafe
                {
                    fixed (GLuint* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterIuivNV(target, index, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetProgramEnvParameterIuivNV(GL.Enums.NV_gpu_program4 target, GLuint index, out GLuint @params)
            {
                @params = default(GLuint);
                unsafe
                {
                    fixed (GLuint* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterIuivNV(target, index, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            void ProgramVertexLimitNV(GL.Enums.NV_geometry_program4 target, GLint limit)
            {
                Delegates.glProgramVertexLimitNV(target, limit);
            }
            
            public static 
            void DepthRangedNV(GLdouble zNear, GLdouble zFar)
            {
                Delegates.glDepthRangedNV(zNear, zFar);
            }
            
            public static 
            void ClearDepthdNV(GLdouble depth)
            {
                Delegates.glClearDepthdNV(depth);
            }
            
            public static 
            void DepthBoundsdNV(GLdouble zmin, GLdouble zmax)
            {
                Delegates.glDepthBoundsdNV(zmin, zmax);
            }
            
            public static 
            void RenderbufferStorageMultisampleCoverageNV(GL.Enums.NV_framebuffer_multisample_coverage target, GLsizei coverageSamples, GLsizei colorSamples, GL.Enums.PixelInternalFormat internalformat, GLsizei width, GLsizei height)
            {
                Delegates.glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height);
            }
            
            public static 
            unsafe void ProgramBufferParametersfvNV(GL.Enums.NV_parameter_buffer_object target, GLuint buffer, GLuint index, GLsizei count, GLfloat* @params)
            {
                Delegates.glProgramBufferParametersfvNV(target, buffer, index, count, @params);
            }
            
            public static 
            void ProgramBufferParametersfvNV(GL.Enums.NV_parameter_buffer_object target, GLuint buffer, GLuint index, GLsizei count, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glProgramBufferParametersfvNV(target, buffer, index, count, @params_ptr);
                    }
                }
            }
            
            public static 
            void ProgramBufferParametersfvNV(GL.Enums.NV_parameter_buffer_object target, GLuint buffer, GLuint index, GLsizei count, ref GLfloat @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glProgramBufferParametersfvNV(target, buffer, index, count, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ProgramBufferParametersIivNV(GL.Enums.NV_parameter_buffer_object target, GLuint buffer, GLuint index, GLsizei count, GLint* @params)
            {
                Delegates.glProgramBufferParametersIivNV(target, buffer, index, count, @params);
            }
            
            public static 
            void ProgramBufferParametersIivNV(GL.Enums.NV_parameter_buffer_object target, GLuint buffer, GLuint index, GLsizei count, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glProgramBufferParametersIivNV(target, buffer, index, count, @params_ptr);
                    }
                }
            }
            
            public static 
            void ProgramBufferParametersIivNV(GL.Enums.NV_parameter_buffer_object target, GLuint buffer, GLuint index, GLsizei count, ref GLint @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glProgramBufferParametersIivNV(target, buffer, index, count, @params_ptr);
                    }
                }
            }
            
            public static 
            unsafe void ProgramBufferParametersIuivNV(GL.Enums.NV_parameter_buffer_object target, GLuint buffer, GLuint index, GLsizei count, GLuint* @params)
            {
                Delegates.glProgramBufferParametersIuivNV(target, buffer, index, count, @params);
            }
            
            public static 
            void ProgramBufferParametersIuivNV(GL.Enums.NV_parameter_buffer_object target, GLuint buffer, GLuint index, GLsizei count, GLuint[] @params)
            {
                unsafe
                {
                    fixed (GLuint* @params_ptr = @params)
                    {
                        Delegates.glProgramBufferParametersIuivNV(target, buffer, index, count, @params_ptr);
                    }
                }
            }
            
            public static 
            void ProgramBufferParametersIuivNV(GL.Enums.NV_parameter_buffer_object target, GLuint buffer, GLuint index, GLsizei count, ref GLuint @params)
            {
                unsafe
                {
                    fixed (GLuint* @params_ptr = &@params)
                    {
                        Delegates.glProgramBufferParametersIuivNV(target, buffer, index, count, @params_ptr);
                    }
                }
            }
            
            public static 
            void BeginTransformFeedbackNV(GL.Enums.NV_transform_feedback primitiveMode)
            {
                Delegates.glBeginTransformFeedbackNV(primitiveMode);
            }
            
            public static 
            void EndTransformFeedbackNV()
            {
                Delegates.glEndTransformFeedbackNV();
            }
            
            public static 
            unsafe void TransformFeedbackAttribsNV(GLuint count, GLint* attribs, GL.Enums.NV_transform_feedback bufferMode)
            {
                Delegates.glTransformFeedbackAttribsNV(count, attribs, bufferMode);
            }
            
            public static 
            void TransformFeedbackAttribsNV(GLuint count, GLint[] attribs, GL.Enums.NV_transform_feedback bufferMode)
            {
                unsafe
                {
                    fixed (GLint* attribs_ptr = attribs)
                    {
                        Delegates.glTransformFeedbackAttribsNV(count, attribs_ptr, bufferMode);
                    }
                }
            }
            
            public static 
            void TransformFeedbackAttribsNV(GLuint count, ref GLint attribs, GL.Enums.NV_transform_feedback bufferMode)
            {
                unsafe
                {
                    fixed (GLint* attribs_ptr = &attribs)
                    {
                        Delegates.glTransformFeedbackAttribsNV(count, attribs_ptr, bufferMode);
                    }
                }
            }
            
            public static 
            void BindBufferRangeNV(GL.Enums.NV_transform_feedback target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
            {
                Delegates.glBindBufferRangeNV(target, index, buffer, offset, size);
            }
            
            public static 
            void BindBufferOffsetNV(GL.Enums.NV_transform_feedback target, GLuint index, GLuint buffer, GLintptr offset)
            {
                Delegates.glBindBufferOffsetNV(target, index, buffer, offset);
            }
            
            public static 
            void BindBufferBaseNV(GL.Enums.NV_transform_feedback target, GLuint index, GLuint buffer)
            {
                Delegates.glBindBufferBaseNV(target, index, buffer);
            }
            
            public static 
            unsafe void TransformFeedbackVaryingsNV(GLuint program, GLsizei count, GLint* locations, GL.Enums.NV_transform_feedback bufferMode)
            {
                Delegates.glTransformFeedbackVaryingsNV(program, count, locations, bufferMode);
            }
            
            public static 
            void TransformFeedbackVaryingsNV(GLuint program, GLsizei count, GLint[] locations, GL.Enums.NV_transform_feedback bufferMode)
            {
                unsafe
                {
                    fixed (GLint* locations_ptr = locations)
                    {
                        Delegates.glTransformFeedbackVaryingsNV(program, count, locations_ptr, bufferMode);
                    }
                }
            }
            
            public static 
            void TransformFeedbackVaryingsNV(GLuint program, GLsizei count, ref GLint locations, GL.Enums.NV_transform_feedback bufferMode)
            {
                unsafe
                {
                    fixed (GLint* locations_ptr = &locations)
                    {
                        Delegates.glTransformFeedbackVaryingsNV(program, count, locations_ptr, bufferMode);
                    }
                }
            }
            
            public static 
            unsafe void ActiveVaryingNV(GLuint program, System.String name)
            {
                Delegates.glActiveVaryingNV(program, name);
            }
            
            public static 
            unsafe GLint GetVaryingLocationNV(GLuint program, System.String name)
            {
                return Delegates.glGetVaryingLocationNV(program, name);
            }
            
            public static 
            unsafe void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GL.Enums.NV_transform_feedback* type, System.Text.StringBuilder name)
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, length, size, type, name);
            }
            
            public static 
            unsafe void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GL.Enums.NV_transform_feedback[] type, System.Text.StringBuilder name)
            {
                length = default(GLsizei*);
                size = default(GLsizei*);
                name = default(System.Text.StringBuilder);
                    fixed (GL.Enums.NV_transform_feedback* type_ptr = type)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length, size, type_ptr, name);
                    }
            }
            
            public static 
            unsafe void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, out GL.Enums.NV_transform_feedback type, System.Text.StringBuilder name)
            {
                length = default(GLsizei*);
                size = default(GLsizei*);
                type = default(GL.Enums.NV_transform_feedback);
                name = default(System.Text.StringBuilder);
                    fixed (GL.Enums.NV_transform_feedback* type_ptr = &type)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length, size, type_ptr, name);
                        type = *type_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei[] size, GL.Enums.NV_transform_feedback* type, System.Text.StringBuilder name)
            {
                length = default(GLsizei*);
                type = default(GL.Enums.NV_transform_feedback*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* size_ptr = size)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length, size_ptr, type, name);
                    }
            }
            
            public static 
            unsafe void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei[] size, GL.Enums.NV_transform_feedback[] type, System.Text.StringBuilder name)
            {
                length = default(GLsizei*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* size_ptr = size)
                    fixed (GL.Enums.NV_transform_feedback* type_ptr = type)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length, size_ptr, type_ptr, name);
                    }
            }
            
            public static 
            unsafe void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei[] size, out GL.Enums.NV_transform_feedback type, System.Text.StringBuilder name)
            {
                length = default(GLsizei*);
                type = default(GL.Enums.NV_transform_feedback);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* size_ptr = size)
                    fixed (GL.Enums.NV_transform_feedback* type_ptr = &type)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length, size_ptr, type_ptr, name);
                        type = *type_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, out GLsizei size, GL.Enums.NV_transform_feedback* type, System.Text.StringBuilder name)
            {
                length = default(GLsizei*);
                size = default(GLsizei);
                type = default(GL.Enums.NV_transform_feedback*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* size_ptr = &size)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length, size_ptr, type, name);
                        size = *size_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, out GLsizei size, GL.Enums.NV_transform_feedback[] type, System.Text.StringBuilder name)
            {
                length = default(GLsizei*);
                size = default(GLsizei);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* size_ptr = &size)
                    fixed (GL.Enums.NV_transform_feedback* type_ptr = type)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length, size_ptr, type_ptr, name);
                        size = *size_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, out GLsizei size, out GL.Enums.NV_transform_feedback type, System.Text.StringBuilder name)
            {
                length = default(GLsizei*);
                size = default(GLsizei);
                type = default(GL.Enums.NV_transform_feedback);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* size_ptr = &size)
                    fixed (GL.Enums.NV_transform_feedback* type_ptr = &type)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length, size_ptr, type_ptr, name);
                        size = *size_ptr;
                        type = *type_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLsizei* size, GL.Enums.NV_transform_feedback* type, System.Text.StringBuilder name)
            {
                size = default(GLsizei*);
                type = default(GL.Enums.NV_transform_feedback*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = length)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length_ptr, size, type, name);
                    }
            }
            
            public static 
            unsafe void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLsizei* size, GL.Enums.NV_transform_feedback[] type, System.Text.StringBuilder name)
            {
                size = default(GLsizei*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = length)
                    fixed (GL.Enums.NV_transform_feedback* type_ptr = type)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length_ptr, size, type_ptr, name);
                    }
            }
            
            public static 
            unsafe void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLsizei* size, out GL.Enums.NV_transform_feedback type, System.Text.StringBuilder name)
            {
                size = default(GLsizei*);
                type = default(GL.Enums.NV_transform_feedback);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = length)
                    fixed (GL.Enums.NV_transform_feedback* type_ptr = &type)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length_ptr, size, type_ptr, name);
                        type = *type_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLsizei[] size, GL.Enums.NV_transform_feedback* type, System.Text.StringBuilder name)
            {
                type = default(GL.Enums.NV_transform_feedback*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = length)
                    fixed (GLsizei* size_ptr = size)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type, name);
                    }
            }
            
            public static 
            void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLsizei[] size, GL.Enums.NV_transform_feedback[] type, System.Text.StringBuilder name)
            {
                name = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = length)
                    fixed (GLsizei* size_ptr = size)
                    fixed (GL.Enums.NV_transform_feedback* type_ptr = type)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type_ptr, name);
                    }
                }
            }
            
            public static 
            void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLsizei[] size, out GL.Enums.NV_transform_feedback type, System.Text.StringBuilder name)
            {
                type = default(GL.Enums.NV_transform_feedback);
                name = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = length)
                    fixed (GLsizei* size_ptr = size)
                    fixed (GL.Enums.NV_transform_feedback* type_ptr = &type)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type_ptr, name);
                        type = *type_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, out GLsizei size, GL.Enums.NV_transform_feedback* type, System.Text.StringBuilder name)
            {
                size = default(GLsizei);
                type = default(GL.Enums.NV_transform_feedback*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = length)
                    fixed (GLsizei* size_ptr = &size)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type, name);
                        size = *size_ptr;
                    }
            }
            
            public static 
            void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, out GLsizei size, GL.Enums.NV_transform_feedback[] type, System.Text.StringBuilder name)
            {
                size = default(GLsizei);
                name = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = length)
                    fixed (GLsizei* size_ptr = &size)
                    fixed (GL.Enums.NV_transform_feedback* type_ptr = type)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type_ptr, name);
                        size = *size_ptr;
                    }
                }
            }
            
            public static 
            void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, out GLsizei size, out GL.Enums.NV_transform_feedback type, System.Text.StringBuilder name)
            {
                size = default(GLsizei);
                type = default(GL.Enums.NV_transform_feedback);
                name = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = length)
                    fixed (GLsizei* size_ptr = &size)
                    fixed (GL.Enums.NV_transform_feedback* type_ptr = &type)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type_ptr, name);
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLsizei* size, GL.Enums.NV_transform_feedback* type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                size = default(GLsizei*);
                type = default(GL.Enums.NV_transform_feedback*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = &length)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length_ptr, size, type, name);
                        length = *length_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLsizei* size, GL.Enums.NV_transform_feedback[] type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                size = default(GLsizei*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = &length)
                    fixed (GL.Enums.NV_transform_feedback* type_ptr = type)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length_ptr, size, type_ptr, name);
                        length = *length_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLsizei* size, out GL.Enums.NV_transform_feedback type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                size = default(GLsizei*);
                type = default(GL.Enums.NV_transform_feedback);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = &length)
                    fixed (GL.Enums.NV_transform_feedback* type_ptr = &type)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length_ptr, size, type_ptr, name);
                        length = *length_ptr;
                        type = *type_ptr;
                    }
            }
            
            public static 
            unsafe void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLsizei[] size, GL.Enums.NV_transform_feedback* type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                type = default(GL.Enums.NV_transform_feedback*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = &length)
                    fixed (GLsizei* size_ptr = size)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type, name);
                        length = *length_ptr;
                    }
            }
            
            public static 
            void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLsizei[] size, GL.Enums.NV_transform_feedback[] type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                name = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = &length)
                    fixed (GLsizei* size_ptr = size)
                    fixed (GL.Enums.NV_transform_feedback* type_ptr = type)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type_ptr, name);
                        length = *length_ptr;
                    }
                }
            }
            
            public static 
            void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLsizei[] size, out GL.Enums.NV_transform_feedback type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                type = default(GL.Enums.NV_transform_feedback);
                name = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = &length)
                    fixed (GLsizei* size_ptr = size)
                    fixed (GL.Enums.NV_transform_feedback* type_ptr = &type)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type_ptr, name);
                        length = *length_ptr;
                        type = *type_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, out GLsizei size, GL.Enums.NV_transform_feedback* type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                size = default(GLsizei);
                type = default(GL.Enums.NV_transform_feedback*);
                name = default(System.Text.StringBuilder);
                    fixed (GLsizei* length_ptr = &length)
                    fixed (GLsizei* size_ptr = &size)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type, name);
                        length = *length_ptr;
                        size = *size_ptr;
                    }
            }
            
            public static 
            void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, out GLsizei size, GL.Enums.NV_transform_feedback[] type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                size = default(GLsizei);
                name = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = &length)
                    fixed (GLsizei* size_ptr = &size)
                    fixed (GL.Enums.NV_transform_feedback* type_ptr = type)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type_ptr, name);
                        length = *length_ptr;
                        size = *size_ptr;
                    }
                }
            }
            
            public static 
            void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, out GLsizei size, out GL.Enums.NV_transform_feedback type, System.Text.StringBuilder name)
            {
                length = default(GLsizei);
                size = default(GLsizei);
                type = default(GL.Enums.NV_transform_feedback);
                name = default(System.Text.StringBuilder);
                unsafe
                {
                    fixed (GLsizei* length_ptr = &length)
                    fixed (GLsizei* size_ptr = &size)
                    fixed (GL.Enums.NV_transform_feedback* type_ptr = &type)
                    {
                        Delegates.glGetActiveVaryingNV(program, index, bufSize, length_ptr, size_ptr, type_ptr, name);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint* location)
            {
                Delegates.glGetTransformFeedbackVaryingNV(program, index, location);
            }
            
            public static 
            void GetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint[] location)
            {
                unsafe
                {
                    fixed (GLint* location_ptr = location)
                    {
                        Delegates.glGetTransformFeedbackVaryingNV(program, index, location_ptr);
                    }
                }
            }
            
            public static 
            void GetTransformFeedbackVaryingNV(GLuint program, GLuint index, out GLint location)
            {
                location = default(GLint);
                unsafe
                {
                    fixed (GLint* location_ptr = &location)
                    {
                        Delegates.glGetTransformFeedbackVaryingNV(program, index, location_ptr);
                        location = *location_ptr;
                    }
                }
            }
            
        }

        public static class MESA
        {
            public static 
            void ResizeBuffersMESA()
            {
                Delegates.glResizeBuffersMESA();
            }
            
            public static 
            void WindowPos2dMESA(GLdouble x, GLdouble y)
            {
                Delegates.glWindowPos2dMESA(x, y);
            }
            
            public static 
            unsafe void WindowPos2dvMESA(GLdouble* v)
            {
                Delegates.glWindowPos2dvMESA(v);
            }
            
            public static 
            void WindowPos2dvMESA(GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glWindowPos2dvMESA(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos2dvMESA(ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glWindowPos2dvMESA(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos2fMESA(GLfloat x, GLfloat y)
            {
                Delegates.glWindowPos2fMESA(x, y);
            }
            
            public static 
            unsafe void WindowPos2fvMESA(GLfloat* v)
            {
                Delegates.glWindowPos2fvMESA(v);
            }
            
            public static 
            void WindowPos2fvMESA(GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glWindowPos2fvMESA(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos2fvMESA(ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glWindowPos2fvMESA(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos2iMESA(GLint x, GLint y)
            {
                Delegates.glWindowPos2iMESA(x, y);
            }
            
            public static 
            unsafe void WindowPos2ivMESA(GLint* v)
            {
                Delegates.glWindowPos2ivMESA(v);
            }
            
            public static 
            void WindowPos2ivMESA(GLint[] v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = v)
                    {
                        Delegates.glWindowPos2ivMESA(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos2ivMESA(ref GLint v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = &v)
                    {
                        Delegates.glWindowPos2ivMESA(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos2sMESA(GLshort x, GLshort y)
            {
                Delegates.glWindowPos2sMESA(x, y);
            }
            
            public static 
            unsafe void WindowPos2svMESA(GLshort* v)
            {
                Delegates.glWindowPos2svMESA(v);
            }
            
            public static 
            void WindowPos2svMESA(GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glWindowPos2svMESA(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos2svMESA(ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glWindowPos2svMESA(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z)
            {
                Delegates.glWindowPos3dMESA(x, y, z);
            }
            
            public static 
            unsafe void WindowPos3dvMESA(GLdouble* v)
            {
                Delegates.glWindowPos3dvMESA(v);
            }
            
            public static 
            void WindowPos3dvMESA(GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glWindowPos3dvMESA(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos3dvMESA(ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glWindowPos3dvMESA(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z)
            {
                Delegates.glWindowPos3fMESA(x, y, z);
            }
            
            public static 
            unsafe void WindowPos3fvMESA(GLfloat* v)
            {
                Delegates.glWindowPos3fvMESA(v);
            }
            
            public static 
            void WindowPos3fvMESA(GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glWindowPos3fvMESA(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos3fvMESA(ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glWindowPos3fvMESA(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos3iMESA(GLint x, GLint y, GLint z)
            {
                Delegates.glWindowPos3iMESA(x, y, z);
            }
            
            public static 
            unsafe void WindowPos3ivMESA(GLint* v)
            {
                Delegates.glWindowPos3ivMESA(v);
            }
            
            public static 
            void WindowPos3ivMESA(GLint[] v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = v)
                    {
                        Delegates.glWindowPos3ivMESA(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos3ivMESA(ref GLint v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = &v)
                    {
                        Delegates.glWindowPos3ivMESA(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos3sMESA(GLshort x, GLshort y, GLshort z)
            {
                Delegates.glWindowPos3sMESA(x, y, z);
            }
            
            public static 
            unsafe void WindowPos3svMESA(GLshort* v)
            {
                Delegates.glWindowPos3svMESA(v);
            }
            
            public static 
            void WindowPos3svMESA(GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glWindowPos3svMESA(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos3svMESA(ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glWindowPos3svMESA(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
            {
                Delegates.glWindowPos4dMESA(x, y, z, w);
            }
            
            public static 
            unsafe void WindowPos4dvMESA(GLdouble* v)
            {
                Delegates.glWindowPos4dvMESA(v);
            }
            
            public static 
            void WindowPos4dvMESA(GLdouble[] v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = v)
                    {
                        Delegates.glWindowPos4dvMESA(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos4dvMESA(ref GLdouble v)
            {
                unsafe
                {
                    fixed (GLdouble* v_ptr = &v)
                    {
                        Delegates.glWindowPos4dvMESA(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
            {
                Delegates.glWindowPos4fMESA(x, y, z, w);
            }
            
            public static 
            unsafe void WindowPos4fvMESA(GLfloat* v)
            {
                Delegates.glWindowPos4fvMESA(v);
            }
            
            public static 
            void WindowPos4fvMESA(GLfloat[] v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = v)
                    {
                        Delegates.glWindowPos4fvMESA(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos4fvMESA(ref GLfloat v)
            {
                unsafe
                {
                    fixed (GLfloat* v_ptr = &v)
                    {
                        Delegates.glWindowPos4fvMESA(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos4iMESA(GLint x, GLint y, GLint z, GLint w)
            {
                Delegates.glWindowPos4iMESA(x, y, z, w);
            }
            
            public static 
            unsafe void WindowPos4ivMESA(GLint* v)
            {
                Delegates.glWindowPos4ivMESA(v);
            }
            
            public static 
            void WindowPos4ivMESA(GLint[] v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = v)
                    {
                        Delegates.glWindowPos4ivMESA(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos4ivMESA(ref GLint v)
            {
                unsafe
                {
                    fixed (GLint* v_ptr = &v)
                    {
                        Delegates.glWindowPos4ivMESA(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w)
            {
                Delegates.glWindowPos4sMESA(x, y, z, w);
            }
            
            public static 
            unsafe void WindowPos4svMESA(GLshort* v)
            {
                Delegates.glWindowPos4svMESA(v);
            }
            
            public static 
            void WindowPos4svMESA(GLshort[] v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = v)
                    {
                        Delegates.glWindowPos4svMESA(v_ptr);
                    }
                }
            }
            
            public static 
            void WindowPos4svMESA(ref GLshort v)
            {
                unsafe
                {
                    fixed (GLshort* v_ptr = &v)
                    {
                        Delegates.glWindowPos4svMESA(v_ptr);
                    }
                }
            }
            
        }

        public static class IBM
        {
            public static 
            unsafe void MultiModeDrawArraysIBM(GL.Enums.BeginMode* mode, GLint* first, GLsizei* count, GLsizei primcount, GLint modestride)
            {
                Delegates.glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride);
            }
            
            public static 
            unsafe void MultiModeDrawArraysIBM(GL.Enums.BeginMode* mode, GLint* first, GLsizei[] count, GLsizei primcount, GLint modestride)
            {
                    fixed (GLsizei* count_ptr = count)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode, first, count_ptr, primcount, modestride);
                    }
            }
            
            public static 
            unsafe void MultiModeDrawArraysIBM(GL.Enums.BeginMode* mode, GLint* first, ref GLsizei count, GLsizei primcount, GLint modestride)
            {
                    fixed (GLsizei* count_ptr = &count)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode, first, count_ptr, primcount, modestride);
                    }
            }
            
            public static 
            unsafe void MultiModeDrawArraysIBM(GL.Enums.BeginMode* mode, GLint[] first, GLsizei* count, GLsizei primcount, GLint modestride)
            {
                    fixed (GLint* first_ptr = first)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode, first_ptr, count, primcount, modestride);
                    }
            }
            
            public static 
            unsafe void MultiModeDrawArraysIBM(GL.Enums.BeginMode* mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)
            {
                    fixed (GLint* first_ptr = first)
                    fixed (GLsizei* count_ptr = count)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode, first_ptr, count_ptr, primcount, modestride);
                    }
            }
            
            public static 
            unsafe void MultiModeDrawArraysIBM(GL.Enums.BeginMode* mode, GLint[] first, ref GLsizei count, GLsizei primcount, GLint modestride)
            {
                    fixed (GLint* first_ptr = first)
                    fixed (GLsizei* count_ptr = &count)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode, first_ptr, count_ptr, primcount, modestride);
                    }
            }
            
            public static 
            unsafe void MultiModeDrawArraysIBM(GL.Enums.BeginMode* mode, ref GLint first, GLsizei* count, GLsizei primcount, GLint modestride)
            {
                    fixed (GLint* first_ptr = &first)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode, first_ptr, count, primcount, modestride);
                    }
            }
            
            public static 
            unsafe void MultiModeDrawArraysIBM(GL.Enums.BeginMode* mode, ref GLint first, GLsizei[] count, GLsizei primcount, GLint modestride)
            {
                    fixed (GLint* first_ptr = &first)
                    fixed (GLsizei* count_ptr = count)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode, first_ptr, count_ptr, primcount, modestride);
                    }
            }
            
            public static 
            unsafe void MultiModeDrawArraysIBM(GL.Enums.BeginMode* mode, ref GLint first, ref GLsizei count, GLsizei primcount, GLint modestride)
            {
                    fixed (GLint* first_ptr = &first)
                    fixed (GLsizei* count_ptr = &count)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode, first_ptr, count_ptr, primcount, modestride);
                    }
            }
            
            public static 
            unsafe void MultiModeDrawArraysIBM(GL.Enums.BeginMode[] mode, GLint* first, GLsizei* count, GLsizei primcount, GLint modestride)
            {
                    fixed (GL.Enums.BeginMode* mode_ptr = mode)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode_ptr, first, count, primcount, modestride);
                    }
            }
            
            public static 
            unsafe void MultiModeDrawArraysIBM(GL.Enums.BeginMode[] mode, GLint* first, GLsizei[] count, GLsizei primcount, GLint modestride)
            {
                    fixed (GL.Enums.BeginMode* mode_ptr = mode)
                    fixed (GLsizei* count_ptr = count)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode_ptr, first, count_ptr, primcount, modestride);
                    }
            }
            
            public static 
            unsafe void MultiModeDrawArraysIBM(GL.Enums.BeginMode[] mode, GLint* first, ref GLsizei count, GLsizei primcount, GLint modestride)
            {
                    fixed (GL.Enums.BeginMode* mode_ptr = mode)
                    fixed (GLsizei* count_ptr = &count)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode_ptr, first, count_ptr, primcount, modestride);
                    }
            }
            
            public static 
            unsafe void MultiModeDrawArraysIBM(GL.Enums.BeginMode[] mode, GLint[] first, GLsizei* count, GLsizei primcount, GLint modestride)
            {
                    fixed (GL.Enums.BeginMode* mode_ptr = mode)
                    fixed (GLint* first_ptr = first)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode_ptr, first_ptr, count, primcount, modestride);
                    }
            }
            
            public static 
            void MultiModeDrawArraysIBM(GL.Enums.BeginMode[] mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)
            {
                unsafe
                {
                    fixed (GL.Enums.BeginMode* mode_ptr = mode)
                    fixed (GLint* first_ptr = first)
                    fixed (GLsizei* count_ptr = count)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode_ptr, first_ptr, count_ptr, primcount, modestride);
                    }
                }
            }
            
            public static 
            void MultiModeDrawArraysIBM(GL.Enums.BeginMode[] mode, GLint[] first, ref GLsizei count, GLsizei primcount, GLint modestride)
            {
                unsafe
                {
                    fixed (GL.Enums.BeginMode* mode_ptr = mode)
                    fixed (GLint* first_ptr = first)
                    fixed (GLsizei* count_ptr = &count)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode_ptr, first_ptr, count_ptr, primcount, modestride);
                    }
                }
            }
            
            public static 
            unsafe void MultiModeDrawArraysIBM(GL.Enums.BeginMode[] mode, ref GLint first, GLsizei* count, GLsizei primcount, GLint modestride)
            {
                    fixed (GL.Enums.BeginMode* mode_ptr = mode)
                    fixed (GLint* first_ptr = &first)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode_ptr, first_ptr, count, primcount, modestride);
                    }
            }
            
            public static 
            void MultiModeDrawArraysIBM(GL.Enums.BeginMode[] mode, ref GLint first, GLsizei[] count, GLsizei primcount, GLint modestride)
            {
                unsafe
                {
                    fixed (GL.Enums.BeginMode* mode_ptr = mode)
                    fixed (GLint* first_ptr = &first)
                    fixed (GLsizei* count_ptr = count)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode_ptr, first_ptr, count_ptr, primcount, modestride);
                    }
                }
            }
            
            public static 
            void MultiModeDrawArraysIBM(GL.Enums.BeginMode[] mode, ref GLint first, ref GLsizei count, GLsizei primcount, GLint modestride)
            {
                unsafe
                {
                    fixed (GL.Enums.BeginMode* mode_ptr = mode)
                    fixed (GLint* first_ptr = &first)
                    fixed (GLsizei* count_ptr = &count)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode_ptr, first_ptr, count_ptr, primcount, modestride);
                    }
                }
            }
            
            public static 
            unsafe void MultiModeDrawArraysIBM(ref GL.Enums.BeginMode mode, GLint* first, GLsizei* count, GLsizei primcount, GLint modestride)
            {
                    fixed (GL.Enums.BeginMode* mode_ptr = &mode)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode_ptr, first, count, primcount, modestride);
                    }
            }
            
            public static 
            unsafe void MultiModeDrawArraysIBM(ref GL.Enums.BeginMode mode, GLint* first, GLsizei[] count, GLsizei primcount, GLint modestride)
            {
                    fixed (GL.Enums.BeginMode* mode_ptr = &mode)
                    fixed (GLsizei* count_ptr = count)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode_ptr, first, count_ptr, primcount, modestride);
                    }
            }
            
            public static 
            unsafe void MultiModeDrawArraysIBM(ref GL.Enums.BeginMode mode, GLint* first, ref GLsizei count, GLsizei primcount, GLint modestride)
            {
                    fixed (GL.Enums.BeginMode* mode_ptr = &mode)
                    fixed (GLsizei* count_ptr = &count)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode_ptr, first, count_ptr, primcount, modestride);
                    }
            }
            
            public static 
            unsafe void MultiModeDrawArraysIBM(ref GL.Enums.BeginMode mode, GLint[] first, GLsizei* count, GLsizei primcount, GLint modestride)
            {
                    fixed (GL.Enums.BeginMode* mode_ptr = &mode)
                    fixed (GLint* first_ptr = first)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode_ptr, first_ptr, count, primcount, modestride);
                    }
            }
            
            public static 
            void MultiModeDrawArraysIBM(ref GL.Enums.BeginMode mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)
            {
                unsafe
                {
                    fixed (GL.Enums.BeginMode* mode_ptr = &mode)
                    fixed (GLint* first_ptr = first)
                    fixed (GLsizei* count_ptr = count)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode_ptr, first_ptr, count_ptr, primcount, modestride);
                    }
                }
            }
            
            public static 
            void MultiModeDrawArraysIBM(ref GL.Enums.BeginMode mode, GLint[] first, ref GLsizei count, GLsizei primcount, GLint modestride)
            {
                unsafe
                {
                    fixed (GL.Enums.BeginMode* mode_ptr = &mode)
                    fixed (GLint* first_ptr = first)
                    fixed (GLsizei* count_ptr = &count)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode_ptr, first_ptr, count_ptr, primcount, modestride);
                    }
                }
            }
            
            public static 
            unsafe void MultiModeDrawArraysIBM(ref GL.Enums.BeginMode mode, ref GLint first, GLsizei* count, GLsizei primcount, GLint modestride)
            {
                    fixed (GL.Enums.BeginMode* mode_ptr = &mode)
                    fixed (GLint* first_ptr = &first)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode_ptr, first_ptr, count, primcount, modestride);
                    }
            }
            
            public static 
            void MultiModeDrawArraysIBM(ref GL.Enums.BeginMode mode, ref GLint first, GLsizei[] count, GLsizei primcount, GLint modestride)
            {
                unsafe
                {
                    fixed (GL.Enums.BeginMode* mode_ptr = &mode)
                    fixed (GLint* first_ptr = &first)
                    fixed (GLsizei* count_ptr = count)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode_ptr, first_ptr, count_ptr, primcount, modestride);
                    }
                }
            }
            
            public static 
            void MultiModeDrawArraysIBM(ref GL.Enums.BeginMode mode, ref GLint first, ref GLsizei count, GLsizei primcount, GLint modestride)
            {
                unsafe
                {
                    fixed (GL.Enums.BeginMode* mode_ptr = &mode)
                    fixed (GLint* first_ptr = &first)
                    fixed (GLsizei* count_ptr = &count)
                    {
                        Delegates.glMultiModeDrawArraysIBM(mode_ptr, first_ptr, count_ptr, primcount, modestride);
                    }
                }
            }
            
            public static 
            unsafe void MultiModeDrawElementsIBM(GL.Enums.BeginMode* mode, GLsizei* count, GL.Enums.IBM_multimode_draw_arrays type, void* indices, GLsizei primcount, GLint modestride)
            {
                Delegates.glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride);
            }
            
            public static 
            unsafe void MultiModeDrawElementsIBM(GL.Enums.BeginMode* mode, GLsizei* count, GL.Enums.IBM_multimode_draw_arrays type, object indices, GLsizei primcount, GLint modestride)
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiModeDrawElementsIBM(mode, count, type, (void*)indices_ptr.AddrOfPinnedObject(), primcount, modestride);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
            }
            
            public static 
            unsafe void MultiModeDrawElementsIBM(GL.Enums.BeginMode* mode, GLsizei[] count, GL.Enums.IBM_multimode_draw_arrays type, void* indices, GLsizei primcount, GLint modestride)
            {
                    fixed (GLsizei* count_ptr = count)
                    {
                        Delegates.glMultiModeDrawElementsIBM(mode, count_ptr, type, indices, primcount, modestride);
                    }
            }
            
            public static 
            unsafe void MultiModeDrawElementsIBM(GL.Enums.BeginMode* mode, GLsizei[] count, GL.Enums.IBM_multimode_draw_arrays type, object indices, GLsizei primcount, GLint modestride)
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                    fixed (GLsizei* count_ptr = count)
                    try
                    {
                        Delegates.glMultiModeDrawElementsIBM(mode, count_ptr, type, (void*)indices_ptr.AddrOfPinnedObject(), primcount, modestride);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
            }
            
            public static 
            unsafe void MultiModeDrawElementsIBM(GL.Enums.BeginMode* mode, ref GLsizei count, GL.Enums.IBM_multimode_draw_arrays type, void* indices, GLsizei primcount, GLint modestride)
            {
                    fixed (GLsizei* count_ptr = &count)
                    {
                        Delegates.glMultiModeDrawElementsIBM(mode, count_ptr, type, indices, primcount, modestride);
                    }
            }
            
            public static 
            unsafe void MultiModeDrawElementsIBM(GL.Enums.BeginMode* mode, ref GLsizei count, GL.Enums.IBM_multimode_draw_arrays type, object indices, GLsizei primcount, GLint modestride)
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                    fixed (GLsizei* count_ptr = &count)
                    try
                    {
                        Delegates.glMultiModeDrawElementsIBM(mode, count_ptr, type, (void*)indices_ptr.AddrOfPinnedObject(), primcount, modestride);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
            }
            
            public static 
            unsafe void MultiModeDrawElementsIBM(GL.Enums.BeginMode[] mode, GLsizei* count, GL.Enums.IBM_multimode_draw_arrays type, void* indices, GLsizei primcount, GLint modestride)
            {
                    fixed (GL.Enums.BeginMode* mode_ptr = mode)
                    {
                        Delegates.glMultiModeDrawElementsIBM(mode_ptr, count, type, indices, primcount, modestride);
                    }
            }
            
            public static 
            unsafe void MultiModeDrawElementsIBM(GL.Enums.BeginMode[] mode, GLsizei* count, GL.Enums.IBM_multimode_draw_arrays type, object indices, GLsizei primcount, GLint modestride)
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                    fixed (GL.Enums.BeginMode* mode_ptr = mode)
                    try
                    {
                        Delegates.glMultiModeDrawElementsIBM(mode_ptr, count, type, (void*)indices_ptr.AddrOfPinnedObject(), primcount, modestride);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
            }
            
            public static 
            unsafe void MultiModeDrawElementsIBM(GL.Enums.BeginMode[] mode, GLsizei[] count, GL.Enums.IBM_multimode_draw_arrays type, void* indices, GLsizei primcount, GLint modestride)
            {
                    fixed (GL.Enums.BeginMode* mode_ptr = mode)
                    fixed (GLsizei* count_ptr = count)
                    {
                        Delegates.glMultiModeDrawElementsIBM(mode_ptr, count_ptr, type, indices, primcount, modestride);
                    }
            }
            
            public static 
            void MultiModeDrawElementsIBM(GL.Enums.BeginMode[] mode, GLsizei[] count, GL.Enums.IBM_multimode_draw_arrays type, object indices, GLsizei primcount, GLint modestride)
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    fixed (GL.Enums.BeginMode* mode_ptr = mode)
                    fixed (GLsizei* count_ptr = count)
                    try
                    {
                        Delegates.glMultiModeDrawElementsIBM(mode_ptr, count_ptr, type, (void*)indices_ptr.AddrOfPinnedObject(), primcount, modestride);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void MultiModeDrawElementsIBM(GL.Enums.BeginMode[] mode, ref GLsizei count, GL.Enums.IBM_multimode_draw_arrays type, void* indices, GLsizei primcount, GLint modestride)
            {
                    fixed (GL.Enums.BeginMode* mode_ptr = mode)
                    fixed (GLsizei* count_ptr = &count)
                    {
                        Delegates.glMultiModeDrawElementsIBM(mode_ptr, count_ptr, type, indices, primcount, modestride);
                    }
            }
            
            public static 
            void MultiModeDrawElementsIBM(GL.Enums.BeginMode[] mode, ref GLsizei count, GL.Enums.IBM_multimode_draw_arrays type, object indices, GLsizei primcount, GLint modestride)
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    fixed (GL.Enums.BeginMode* mode_ptr = mode)
                    fixed (GLsizei* count_ptr = &count)
                    try
                    {
                        Delegates.glMultiModeDrawElementsIBM(mode_ptr, count_ptr, type, (void*)indices_ptr.AddrOfPinnedObject(), primcount, modestride);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void MultiModeDrawElementsIBM(ref GL.Enums.BeginMode mode, GLsizei* count, GL.Enums.IBM_multimode_draw_arrays type, void* indices, GLsizei primcount, GLint modestride)
            {
                    fixed (GL.Enums.BeginMode* mode_ptr = &mode)
                    {
                        Delegates.glMultiModeDrawElementsIBM(mode_ptr, count, type, indices, primcount, modestride);
                    }
            }
            
            public static 
            unsafe void MultiModeDrawElementsIBM(ref GL.Enums.BeginMode mode, GLsizei* count, GL.Enums.IBM_multimode_draw_arrays type, object indices, GLsizei primcount, GLint modestride)
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                    fixed (GL.Enums.BeginMode* mode_ptr = &mode)
                    try
                    {
                        Delegates.glMultiModeDrawElementsIBM(mode_ptr, count, type, (void*)indices_ptr.AddrOfPinnedObject(), primcount, modestride);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
            }
            
            public static 
            unsafe void MultiModeDrawElementsIBM(ref GL.Enums.BeginMode mode, GLsizei[] count, GL.Enums.IBM_multimode_draw_arrays type, void* indices, GLsizei primcount, GLint modestride)
            {
                    fixed (GL.Enums.BeginMode* mode_ptr = &mode)
                    fixed (GLsizei* count_ptr = count)
                    {
                        Delegates.glMultiModeDrawElementsIBM(mode_ptr, count_ptr, type, indices, primcount, modestride);
                    }
            }
            
            public static 
            void MultiModeDrawElementsIBM(ref GL.Enums.BeginMode mode, GLsizei[] count, GL.Enums.IBM_multimode_draw_arrays type, object indices, GLsizei primcount, GLint modestride)
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    fixed (GL.Enums.BeginMode* mode_ptr = &mode)
                    fixed (GLsizei* count_ptr = count)
                    try
                    {
                        Delegates.glMultiModeDrawElementsIBM(mode_ptr, count_ptr, type, (void*)indices_ptr.AddrOfPinnedObject(), primcount, modestride);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void MultiModeDrawElementsIBM(ref GL.Enums.BeginMode mode, ref GLsizei count, GL.Enums.IBM_multimode_draw_arrays type, void* indices, GLsizei primcount, GLint modestride)
            {
                    fixed (GL.Enums.BeginMode* mode_ptr = &mode)
                    fixed (GLsizei* count_ptr = &count)
                    {
                        Delegates.glMultiModeDrawElementsIBM(mode_ptr, count_ptr, type, indices, primcount, modestride);
                    }
            }
            
            public static 
            void MultiModeDrawElementsIBM(ref GL.Enums.BeginMode mode, ref GLsizei count, GL.Enums.IBM_multimode_draw_arrays type, object indices, GLsizei primcount, GLint modestride)
            {
                System.Runtime.InteropServices.GCHandle indices_ptr = System.Runtime.InteropServices.GCHandle.Alloc(indices, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    fixed (GL.Enums.BeginMode* mode_ptr = &mode)
                    fixed (GLsizei* count_ptr = &count)
                    try
                    {
                        Delegates.glMultiModeDrawElementsIBM(mode_ptr, count_ptr, type, (void*)indices_ptr.AddrOfPinnedObject(), primcount, modestride);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void ColorPointerListIBM(GLint size, GL.Enums.ColorPointerType type, GLint stride, void* pointer, GLint ptrstride)
            {
                Delegates.glColorPointerListIBM(size, type, stride, pointer, ptrstride);
            }
            
            public static 
            void ColorPointerListIBM(GLint size, GL.Enums.ColorPointerType type, GLint stride, object pointer, GLint ptrstride)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glColorPointerListIBM(size, type, stride, (void*)pointer_ptr.AddrOfPinnedObject(), ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void SecondaryColorPointerListIBM(GLint size, GL.Enums.IBM_vertex_array_lists type, GLint stride, void* pointer, GLint ptrstride)
            {
                Delegates.glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride);
            }
            
            public static 
            void SecondaryColorPointerListIBM(GLint size, GL.Enums.IBM_vertex_array_lists type, GLint stride, object pointer, GLint ptrstride)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glSecondaryColorPointerListIBM(size, type, stride, (void*)pointer_ptr.AddrOfPinnedObject(), ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void EdgeFlagPointerListIBM(GLint stride, GLboolean* pointer, GLint ptrstride)
            {
                Delegates.glEdgeFlagPointerListIBM(stride, pointer, ptrstride);
            }
            
            public static 
            unsafe void FogCoordPointerListIBM(GL.Enums.IBM_vertex_array_lists type, GLint stride, void* pointer, GLint ptrstride)
            {
                Delegates.glFogCoordPointerListIBM(type, stride, pointer, ptrstride);
            }
            
            public static 
            void FogCoordPointerListIBM(GL.Enums.IBM_vertex_array_lists type, GLint stride, object pointer, GLint ptrstride)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glFogCoordPointerListIBM(type, stride, (void*)pointer_ptr.AddrOfPinnedObject(), ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void IndexPointerListIBM(GL.Enums.IndexPointerType type, GLint stride, void* pointer, GLint ptrstride)
            {
                Delegates.glIndexPointerListIBM(type, stride, pointer, ptrstride);
            }
            
            public static 
            void IndexPointerListIBM(GL.Enums.IndexPointerType type, GLint stride, object pointer, GLint ptrstride)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glIndexPointerListIBM(type, stride, (void*)pointer_ptr.AddrOfPinnedObject(), ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void NormalPointerListIBM(GL.Enums.NormalPointerType type, GLint stride, void* pointer, GLint ptrstride)
            {
                Delegates.glNormalPointerListIBM(type, stride, pointer, ptrstride);
            }
            
            public static 
            void NormalPointerListIBM(GL.Enums.NormalPointerType type, GLint stride, object pointer, GLint ptrstride)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glNormalPointerListIBM(type, stride, (void*)pointer_ptr.AddrOfPinnedObject(), ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void TexCoordPointerListIBM(GLint size, GL.Enums.TexCoordPointerType type, GLint stride, void* pointer, GLint ptrstride)
            {
                Delegates.glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride);
            }
            
            public static 
            void TexCoordPointerListIBM(GLint size, GL.Enums.TexCoordPointerType type, GLint stride, object pointer, GLint ptrstride)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glTexCoordPointerListIBM(size, type, stride, (void*)pointer_ptr.AddrOfPinnedObject(), ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void VertexPointerListIBM(GLint size, GL.Enums.VertexPointerType type, GLint stride, void* pointer, GLint ptrstride)
            {
                Delegates.glVertexPointerListIBM(size, type, stride, pointer, ptrstride);
            }
            
            public static 
            void VertexPointerListIBM(GLint size, GL.Enums.VertexPointerType type, GLint stride, object pointer, GLint ptrstride)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glVertexPointerListIBM(size, type, stride, (void*)pointer_ptr.AddrOfPinnedObject(), ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
        }

        public static class ATI
        {
            public static 
            unsafe void TexBumpParameterivATI(GL.Enums.ATI_envmap_bumpmap pname, GLint* param)
            {
                Delegates.glTexBumpParameterivATI(pname, param);
            }
            
            public static 
            void TexBumpParameterivATI(GL.Enums.ATI_envmap_bumpmap pname, GLint[] param)
            {
                unsafe
                {
                    fixed (GLint* param_ptr = param)
                    {
                        Delegates.glTexBumpParameterivATI(pname, param_ptr);
                    }
                }
            }
            
            public static 
            void TexBumpParameterivATI(GL.Enums.ATI_envmap_bumpmap pname, ref GLint param)
            {
                unsafe
                {
                    fixed (GLint* param_ptr = &param)
                    {
                        Delegates.glTexBumpParameterivATI(pname, param_ptr);
                    }
                }
            }
            
            public static 
            unsafe void TexBumpParameterfvATI(GL.Enums.ATI_envmap_bumpmap pname, GLfloat* param)
            {
                Delegates.glTexBumpParameterfvATI(pname, param);
            }
            
            public static 
            void TexBumpParameterfvATI(GL.Enums.ATI_envmap_bumpmap pname, GLfloat[] param)
            {
                unsafe
                {
                    fixed (GLfloat* param_ptr = param)
                    {
                        Delegates.glTexBumpParameterfvATI(pname, param_ptr);
                    }
                }
            }
            
            public static 
            void TexBumpParameterfvATI(GL.Enums.ATI_envmap_bumpmap pname, ref GLfloat param)
            {
                unsafe
                {
                    fixed (GLfloat* param_ptr = &param)
                    {
                        Delegates.glTexBumpParameterfvATI(pname, param_ptr);
                    }
                }
            }
            
            public static 
            unsafe void GetTexBumpParameterivATI(GL.Enums.ATI_envmap_bumpmap pname, GLint* param)
            {
                Delegates.glGetTexBumpParameterivATI(pname, param);
            }
            
            public static 
            void GetTexBumpParameterivATI(GL.Enums.ATI_envmap_bumpmap pname, GLint[] param)
            {
                unsafe
                {
                    fixed (GLint* param_ptr = param)
                    {
                        Delegates.glGetTexBumpParameterivATI(pname, param_ptr);
                    }
                }
            }
            
            public static 
            void GetTexBumpParameterivATI(GL.Enums.ATI_envmap_bumpmap pname, out GLint param)
            {
                param = default(GLint);
                unsafe
                {
                    fixed (GLint* param_ptr = &param)
                    {
                        Delegates.glGetTexBumpParameterivATI(pname, param_ptr);
                        param = *param_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetTexBumpParameterfvATI(GL.Enums.ATI_envmap_bumpmap pname, GLfloat* param)
            {
                Delegates.glGetTexBumpParameterfvATI(pname, param);
            }
            
            public static 
            void GetTexBumpParameterfvATI(GL.Enums.ATI_envmap_bumpmap pname, GLfloat[] param)
            {
                unsafe
                {
                    fixed (GLfloat* param_ptr = param)
                    {
                        Delegates.glGetTexBumpParameterfvATI(pname, param_ptr);
                    }
                }
            }
            
            public static 
            void GetTexBumpParameterfvATI(GL.Enums.ATI_envmap_bumpmap pname, out GLfloat param)
            {
                param = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* param_ptr = &param)
                    {
                        Delegates.glGetTexBumpParameterfvATI(pname, param_ptr);
                        param = *param_ptr;
                    }
                }
            }
            
            public static 
            GLuint GenFragmentShadersATI(GLuint range)
            {
                return Delegates.glGenFragmentShadersATI(range);
            }
            
            public static 
            void BindFragmentShaderATI(GLuint id)
            {
                Delegates.glBindFragmentShaderATI(id);
            }
            
            public static 
            void DeleteFragmentShaderATI(GLuint id)
            {
                Delegates.glDeleteFragmentShaderATI(id);
            }
            
            public static 
            void BeginFragmentShaderATI()
            {
                Delegates.glBeginFragmentShaderATI();
            }
            
            public static 
            void EndFragmentShaderATI()
            {
                Delegates.glEndFragmentShaderATI();
            }
            
            public static 
            void PassTexCoordATI(GLuint dst, GLuint coord, GL.Enums.ATI_fragment_shader swizzle)
            {
                Delegates.glPassTexCoordATI(dst, coord, swizzle);
            }
            
            public static 
            void SampleMapATI(GLuint dst, GLuint interp, GL.Enums.ATI_fragment_shader swizzle)
            {
                Delegates.glSampleMapATI(dst, interp, swizzle);
            }
            
            public static 
            void ColorFragmentOp1ATI(GL.Enums.ATI_fragment_shader op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
            {
                Delegates.glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
            }
            
            public static 
            void ColorFragmentOp2ATI(GL.Enums.ATI_fragment_shader op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
            {
                Delegates.glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
            }
            
            public static 
            void ColorFragmentOp3ATI(GL.Enums.ATI_fragment_shader op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
            {
                Delegates.glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
            }
            
            public static 
            void AlphaFragmentOp1ATI(GL.Enums.ATI_fragment_shader op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
            {
                Delegates.glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
            }
            
            public static 
            void AlphaFragmentOp2ATI(GL.Enums.ATI_fragment_shader op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
            {
                Delegates.glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
            }
            
            public static 
            void AlphaFragmentOp3ATI(GL.Enums.ATI_fragment_shader op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
            {
                Delegates.glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
            }
            
            public static 
            unsafe void SetFragmentShaderConstantATI(GLuint dst, GLfloat* value)
            {
                Delegates.glSetFragmentShaderConstantATI(dst, value);
            }
            
            public static 
            void SetFragmentShaderConstantATI(GLuint dst, GLfloat[] value)
            {
                unsafe
                {
                    fixed (GLfloat* value_ptr = value)
                    {
                        Delegates.glSetFragmentShaderConstantATI(dst, value_ptr);
                    }
                }
            }
            
            public static 
            void SetFragmentShaderConstantATI(GLuint dst, ref GLfloat value)
            {
                unsafe
                {
                    fixed (GLfloat* value_ptr = &value)
                    {
                        Delegates.glSetFragmentShaderConstantATI(dst, value_ptr);
                    }
                }
            }
            
            public static 
            void PNTrianglesiATI(GL.Enums.ATI_pn_triangles pname, GLint param)
            {
                Delegates.glPNTrianglesiATI(pname, param);
            }
            
            public static 
            void PNTrianglesfATI(GL.Enums.ATI_pn_triangles pname, GLfloat param)
            {
                Delegates.glPNTrianglesfATI(pname, param);
            }
            
            public static 
            unsafe GLuint NewObjectBufferATI(GLsizei size, void* pointer, GL.Enums.ATI_vertex_array_object usage)
            {
                return Delegates.glNewObjectBufferATI(size, pointer, usage);
            }
            
            public static 
            GLuint NewObjectBufferATI(GLsizei size, object pointer, GL.Enums.ATI_vertex_array_object usage)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        GLuint retval = Delegates.glNewObjectBufferATI(size, (void*)pointer_ptr.AddrOfPinnedObject(), usage);
                        return retval;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            GLboolean IsObjectBufferATI(GLuint buffer)
            {
                return Delegates.glIsObjectBufferATI(buffer);
            }
            
            public static 
            unsafe void UpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, void* pointer, GL.Enums.ATI_vertex_array_object preserve)
            {
                Delegates.glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve);
            }
            
            public static 
            void UpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, object pointer, GL.Enums.ATI_vertex_array_object preserve)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glUpdateObjectBufferATI(buffer, offset, size, (void*)pointer_ptr.AddrOfPinnedObject(), preserve);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void GetObjectBufferfvATI(GLuint buffer, GL.Enums.ATI_vertex_array_object pname, GLfloat* @params)
            {
                Delegates.glGetObjectBufferfvATI(buffer, pname, @params);
            }
            
            public static 
            void GetObjectBufferfvATI(GLuint buffer, GL.Enums.ATI_vertex_array_object pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetObjectBufferfvATI(buffer, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetObjectBufferfvATI(GLuint buffer, GL.Enums.ATI_vertex_array_object pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectBufferfvATI(buffer, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetObjectBufferivATI(GLuint buffer, GL.Enums.ATI_vertex_array_object pname, GLint* @params)
            {
                Delegates.glGetObjectBufferivATI(buffer, pname, @params);
            }
            
            public static 
            void GetObjectBufferivATI(GLuint buffer, GL.Enums.ATI_vertex_array_object pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetObjectBufferivATI(buffer, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetObjectBufferivATI(GLuint buffer, GL.Enums.ATI_vertex_array_object pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectBufferivATI(buffer, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            void FreeObjectBufferATI(GLuint buffer)
            {
                Delegates.glFreeObjectBufferATI(buffer);
            }
            
            public static 
            void ArrayObjectATI(GL.Enums.EnableCap array, GLint size, GL.Enums.ATI_vertex_array_object type, GLsizei stride, GLuint buffer, GLuint offset)
            {
                Delegates.glArrayObjectATI(array, size, type, stride, buffer, offset);
            }
            
            public static 
            unsafe void GetArrayObjectfvATI(GL.Enums.EnableCap array, GL.Enums.ATI_vertex_array_object pname, GLfloat* @params)
            {
                Delegates.glGetArrayObjectfvATI(array, pname, @params);
            }
            
            public static 
            void GetArrayObjectfvATI(GL.Enums.EnableCap array, GL.Enums.ATI_vertex_array_object pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetArrayObjectfvATI(array, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetArrayObjectfvATI(GL.Enums.EnableCap array, GL.Enums.ATI_vertex_array_object pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetArrayObjectfvATI(array, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetArrayObjectivATI(GL.Enums.EnableCap array, GL.Enums.ATI_vertex_array_object pname, GLint* @params)
            {
                Delegates.glGetArrayObjectivATI(array, pname, @params);
            }
            
            public static 
            void GetArrayObjectivATI(GL.Enums.EnableCap array, GL.Enums.ATI_vertex_array_object pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetArrayObjectivATI(array, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetArrayObjectivATI(GL.Enums.EnableCap array, GL.Enums.ATI_vertex_array_object pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetArrayObjectivATI(array, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            void VariantArrayObjectATI(GLuint id, GL.Enums.ATI_vertex_array_object type, GLsizei stride, GLuint buffer, GLuint offset)
            {
                Delegates.glVariantArrayObjectATI(id, type, stride, buffer, offset);
            }
            
            public static 
            unsafe void GetVariantArrayObjectfvATI(GLuint id, GL.Enums.ATI_vertex_array_object pname, GLfloat* @params)
            {
                Delegates.glGetVariantArrayObjectfvATI(id, pname, @params);
            }
            
            public static 
            void GetVariantArrayObjectfvATI(GLuint id, GL.Enums.ATI_vertex_array_object pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetVariantArrayObjectfvATI(id, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetVariantArrayObjectfvATI(GLuint id, GL.Enums.ATI_vertex_array_object pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetVariantArrayObjectfvATI(id, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetVariantArrayObjectivATI(GLuint id, GL.Enums.ATI_vertex_array_object pname, GLint* @params)
            {
                Delegates.glGetVariantArrayObjectivATI(id, pname, @params);
            }
            
            public static 
            void GetVariantArrayObjectivATI(GLuint id, GL.Enums.ATI_vertex_array_object pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetVariantArrayObjectivATI(id, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetVariantArrayObjectivATI(GLuint id, GL.Enums.ATI_vertex_array_object pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetVariantArrayObjectivATI(id, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            void VertexStream1sATI(GL.Enums.ATI_vertex_streams stream, GLshort x)
            {
                Delegates.glVertexStream1sATI(stream, x);
            }
            
            public static 
            unsafe void VertexStream1svATI(GL.Enums.ATI_vertex_streams stream, GLshort* coords)
            {
                Delegates.glVertexStream1svATI(stream, coords);
            }
            
            public static 
            void VertexStream1svATI(GL.Enums.ATI_vertex_streams stream, GLshort[] coords)
            {
                unsafe
                {
                    fixed (GLshort* coords_ptr = coords)
                    {
                        Delegates.glVertexStream1svATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream1svATI(GL.Enums.ATI_vertex_streams stream, ref GLshort coords)
            {
                unsafe
                {
                    fixed (GLshort* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream1svATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream1iATI(GL.Enums.ATI_vertex_streams stream, GLint x)
            {
                Delegates.glVertexStream1iATI(stream, x);
            }
            
            public static 
            unsafe void VertexStream1ivATI(GL.Enums.ATI_vertex_streams stream, GLint* coords)
            {
                Delegates.glVertexStream1ivATI(stream, coords);
            }
            
            public static 
            void VertexStream1ivATI(GL.Enums.ATI_vertex_streams stream, GLint[] coords)
            {
                unsafe
                {
                    fixed (GLint* coords_ptr = coords)
                    {
                        Delegates.glVertexStream1ivATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream1ivATI(GL.Enums.ATI_vertex_streams stream, ref GLint coords)
            {
                unsafe
                {
                    fixed (GLint* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream1ivATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream1fATI(GL.Enums.ATI_vertex_streams stream, GLfloat x)
            {
                Delegates.glVertexStream1fATI(stream, x);
            }
            
            public static 
            unsafe void VertexStream1fvATI(GL.Enums.ATI_vertex_streams stream, GLfloat* coords)
            {
                Delegates.glVertexStream1fvATI(stream, coords);
            }
            
            public static 
            void VertexStream1fvATI(GL.Enums.ATI_vertex_streams stream, GLfloat[] coords)
            {
                unsafe
                {
                    fixed (GLfloat* coords_ptr = coords)
                    {
                        Delegates.glVertexStream1fvATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream1fvATI(GL.Enums.ATI_vertex_streams stream, ref GLfloat coords)
            {
                unsafe
                {
                    fixed (GLfloat* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream1fvATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream1dATI(GL.Enums.ATI_vertex_streams stream, GLdouble x)
            {
                Delegates.glVertexStream1dATI(stream, x);
            }
            
            public static 
            unsafe void VertexStream1dvATI(GL.Enums.ATI_vertex_streams stream, GLdouble* coords)
            {
                Delegates.glVertexStream1dvATI(stream, coords);
            }
            
            public static 
            void VertexStream1dvATI(GL.Enums.ATI_vertex_streams stream, GLdouble[] coords)
            {
                unsafe
                {
                    fixed (GLdouble* coords_ptr = coords)
                    {
                        Delegates.glVertexStream1dvATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream1dvATI(GL.Enums.ATI_vertex_streams stream, ref GLdouble coords)
            {
                unsafe
                {
                    fixed (GLdouble* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream1dvATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream2sATI(GL.Enums.ATI_vertex_streams stream, GLshort x, GLshort y)
            {
                Delegates.glVertexStream2sATI(stream, x, y);
            }
            
            public static 
            unsafe void VertexStream2svATI(GL.Enums.ATI_vertex_streams stream, GLshort* coords)
            {
                Delegates.glVertexStream2svATI(stream, coords);
            }
            
            public static 
            void VertexStream2svATI(GL.Enums.ATI_vertex_streams stream, GLshort[] coords)
            {
                unsafe
                {
                    fixed (GLshort* coords_ptr = coords)
                    {
                        Delegates.glVertexStream2svATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream2svATI(GL.Enums.ATI_vertex_streams stream, ref GLshort coords)
            {
                unsafe
                {
                    fixed (GLshort* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream2svATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream2iATI(GL.Enums.ATI_vertex_streams stream, GLint x, GLint y)
            {
                Delegates.glVertexStream2iATI(stream, x, y);
            }
            
            public static 
            unsafe void VertexStream2ivATI(GL.Enums.ATI_vertex_streams stream, GLint* coords)
            {
                Delegates.glVertexStream2ivATI(stream, coords);
            }
            
            public static 
            void VertexStream2ivATI(GL.Enums.ATI_vertex_streams stream, GLint[] coords)
            {
                unsafe
                {
                    fixed (GLint* coords_ptr = coords)
                    {
                        Delegates.glVertexStream2ivATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream2ivATI(GL.Enums.ATI_vertex_streams stream, ref GLint coords)
            {
                unsafe
                {
                    fixed (GLint* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream2ivATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream2fATI(GL.Enums.ATI_vertex_streams stream, GLfloat x, GLfloat y)
            {
                Delegates.glVertexStream2fATI(stream, x, y);
            }
            
            public static 
            unsafe void VertexStream2fvATI(GL.Enums.ATI_vertex_streams stream, GLfloat* coords)
            {
                Delegates.glVertexStream2fvATI(stream, coords);
            }
            
            public static 
            void VertexStream2fvATI(GL.Enums.ATI_vertex_streams stream, GLfloat[] coords)
            {
                unsafe
                {
                    fixed (GLfloat* coords_ptr = coords)
                    {
                        Delegates.glVertexStream2fvATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream2fvATI(GL.Enums.ATI_vertex_streams stream, ref GLfloat coords)
            {
                unsafe
                {
                    fixed (GLfloat* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream2fvATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream2dATI(GL.Enums.ATI_vertex_streams stream, GLdouble x, GLdouble y)
            {
                Delegates.glVertexStream2dATI(stream, x, y);
            }
            
            public static 
            unsafe void VertexStream2dvATI(GL.Enums.ATI_vertex_streams stream, GLdouble* coords)
            {
                Delegates.glVertexStream2dvATI(stream, coords);
            }
            
            public static 
            void VertexStream2dvATI(GL.Enums.ATI_vertex_streams stream, GLdouble[] coords)
            {
                unsafe
                {
                    fixed (GLdouble* coords_ptr = coords)
                    {
                        Delegates.glVertexStream2dvATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream2dvATI(GL.Enums.ATI_vertex_streams stream, ref GLdouble coords)
            {
                unsafe
                {
                    fixed (GLdouble* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream2dvATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream3sATI(GL.Enums.ATI_vertex_streams stream, GLshort x, GLshort y, GLshort z)
            {
                Delegates.glVertexStream3sATI(stream, x, y, z);
            }
            
            public static 
            unsafe void VertexStream3svATI(GL.Enums.ATI_vertex_streams stream, GLshort* coords)
            {
                Delegates.glVertexStream3svATI(stream, coords);
            }
            
            public static 
            void VertexStream3svATI(GL.Enums.ATI_vertex_streams stream, GLshort[] coords)
            {
                unsafe
                {
                    fixed (GLshort* coords_ptr = coords)
                    {
                        Delegates.glVertexStream3svATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream3svATI(GL.Enums.ATI_vertex_streams stream, ref GLshort coords)
            {
                unsafe
                {
                    fixed (GLshort* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream3svATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream3iATI(GL.Enums.ATI_vertex_streams stream, GLint x, GLint y, GLint z)
            {
                Delegates.glVertexStream3iATI(stream, x, y, z);
            }
            
            public static 
            unsafe void VertexStream3ivATI(GL.Enums.ATI_vertex_streams stream, GLint* coords)
            {
                Delegates.glVertexStream3ivATI(stream, coords);
            }
            
            public static 
            void VertexStream3ivATI(GL.Enums.ATI_vertex_streams stream, GLint[] coords)
            {
                unsafe
                {
                    fixed (GLint* coords_ptr = coords)
                    {
                        Delegates.glVertexStream3ivATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream3ivATI(GL.Enums.ATI_vertex_streams stream, ref GLint coords)
            {
                unsafe
                {
                    fixed (GLint* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream3ivATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream3fATI(GL.Enums.ATI_vertex_streams stream, GLfloat x, GLfloat y, GLfloat z)
            {
                Delegates.glVertexStream3fATI(stream, x, y, z);
            }
            
            public static 
            unsafe void VertexStream3fvATI(GL.Enums.ATI_vertex_streams stream, GLfloat* coords)
            {
                Delegates.glVertexStream3fvATI(stream, coords);
            }
            
            public static 
            void VertexStream3fvATI(GL.Enums.ATI_vertex_streams stream, GLfloat[] coords)
            {
                unsafe
                {
                    fixed (GLfloat* coords_ptr = coords)
                    {
                        Delegates.glVertexStream3fvATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream3fvATI(GL.Enums.ATI_vertex_streams stream, ref GLfloat coords)
            {
                unsafe
                {
                    fixed (GLfloat* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream3fvATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream3dATI(GL.Enums.ATI_vertex_streams stream, GLdouble x, GLdouble y, GLdouble z)
            {
                Delegates.glVertexStream3dATI(stream, x, y, z);
            }
            
            public static 
            unsafe void VertexStream3dvATI(GL.Enums.ATI_vertex_streams stream, GLdouble* coords)
            {
                Delegates.glVertexStream3dvATI(stream, coords);
            }
            
            public static 
            void VertexStream3dvATI(GL.Enums.ATI_vertex_streams stream, GLdouble[] coords)
            {
                unsafe
                {
                    fixed (GLdouble* coords_ptr = coords)
                    {
                        Delegates.glVertexStream3dvATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream3dvATI(GL.Enums.ATI_vertex_streams stream, ref GLdouble coords)
            {
                unsafe
                {
                    fixed (GLdouble* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream3dvATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream4sATI(GL.Enums.ATI_vertex_streams stream, GLshort x, GLshort y, GLshort z, GLshort w)
            {
                Delegates.glVertexStream4sATI(stream, x, y, z, w);
            }
            
            public static 
            unsafe void VertexStream4svATI(GL.Enums.ATI_vertex_streams stream, GLshort* coords)
            {
                Delegates.glVertexStream4svATI(stream, coords);
            }
            
            public static 
            void VertexStream4svATI(GL.Enums.ATI_vertex_streams stream, GLshort[] coords)
            {
                unsafe
                {
                    fixed (GLshort* coords_ptr = coords)
                    {
                        Delegates.glVertexStream4svATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream4svATI(GL.Enums.ATI_vertex_streams stream, ref GLshort coords)
            {
                unsafe
                {
                    fixed (GLshort* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream4svATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream4iATI(GL.Enums.ATI_vertex_streams stream, GLint x, GLint y, GLint z, GLint w)
            {
                Delegates.glVertexStream4iATI(stream, x, y, z, w);
            }
            
            public static 
            unsafe void VertexStream4ivATI(GL.Enums.ATI_vertex_streams stream, GLint* coords)
            {
                Delegates.glVertexStream4ivATI(stream, coords);
            }
            
            public static 
            void VertexStream4ivATI(GL.Enums.ATI_vertex_streams stream, GLint[] coords)
            {
                unsafe
                {
                    fixed (GLint* coords_ptr = coords)
                    {
                        Delegates.glVertexStream4ivATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream4ivATI(GL.Enums.ATI_vertex_streams stream, ref GLint coords)
            {
                unsafe
                {
                    fixed (GLint* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream4ivATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream4fATI(GL.Enums.ATI_vertex_streams stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
            {
                Delegates.glVertexStream4fATI(stream, x, y, z, w);
            }
            
            public static 
            unsafe void VertexStream4fvATI(GL.Enums.ATI_vertex_streams stream, GLfloat* coords)
            {
                Delegates.glVertexStream4fvATI(stream, coords);
            }
            
            public static 
            void VertexStream4fvATI(GL.Enums.ATI_vertex_streams stream, GLfloat[] coords)
            {
                unsafe
                {
                    fixed (GLfloat* coords_ptr = coords)
                    {
                        Delegates.glVertexStream4fvATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream4fvATI(GL.Enums.ATI_vertex_streams stream, ref GLfloat coords)
            {
                unsafe
                {
                    fixed (GLfloat* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream4fvATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream4dATI(GL.Enums.ATI_vertex_streams stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
            {
                Delegates.glVertexStream4dATI(stream, x, y, z, w);
            }
            
            public static 
            unsafe void VertexStream4dvATI(GL.Enums.ATI_vertex_streams stream, GLdouble* coords)
            {
                Delegates.glVertexStream4dvATI(stream, coords);
            }
            
            public static 
            void VertexStream4dvATI(GL.Enums.ATI_vertex_streams stream, GLdouble[] coords)
            {
                unsafe
                {
                    fixed (GLdouble* coords_ptr = coords)
                    {
                        Delegates.glVertexStream4dvATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void VertexStream4dvATI(GL.Enums.ATI_vertex_streams stream, ref GLdouble coords)
            {
                unsafe
                {
                    fixed (GLdouble* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream4dvATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void NormalStream3bATI(GL.Enums.ATI_vertex_streams stream, GLbyte nx, GLbyte ny, GLbyte nz)
            {
                Delegates.glNormalStream3bATI(stream, nx, ny, nz);
            }
            
            public static 
            unsafe void NormalStream3bvATI(GL.Enums.ATI_vertex_streams stream, GLbyte* coords)
            {
                Delegates.glNormalStream3bvATI(stream, coords);
            }
            
            public static 
            void NormalStream3bvATI(GL.Enums.ATI_vertex_streams stream, GLbyte[] coords)
            {
                unsafe
                {
                    fixed (GLbyte* coords_ptr = coords)
                    {
                        Delegates.glNormalStream3bvATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void NormalStream3bvATI(GL.Enums.ATI_vertex_streams stream, ref GLbyte coords)
            {
                unsafe
                {
                    fixed (GLbyte* coords_ptr = &coords)
                    {
                        Delegates.glNormalStream3bvATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void NormalStream3sATI(GL.Enums.ATI_vertex_streams stream, GLshort nx, GLshort ny, GLshort nz)
            {
                Delegates.glNormalStream3sATI(stream, nx, ny, nz);
            }
            
            public static 
            unsafe void NormalStream3svATI(GL.Enums.ATI_vertex_streams stream, GLshort* coords)
            {
                Delegates.glNormalStream3svATI(stream, coords);
            }
            
            public static 
            void NormalStream3svATI(GL.Enums.ATI_vertex_streams stream, GLshort[] coords)
            {
                unsafe
                {
                    fixed (GLshort* coords_ptr = coords)
                    {
                        Delegates.glNormalStream3svATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void NormalStream3svATI(GL.Enums.ATI_vertex_streams stream, ref GLshort coords)
            {
                unsafe
                {
                    fixed (GLshort* coords_ptr = &coords)
                    {
                        Delegates.glNormalStream3svATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void NormalStream3iATI(GL.Enums.ATI_vertex_streams stream, GLint nx, GLint ny, GLint nz)
            {
                Delegates.glNormalStream3iATI(stream, nx, ny, nz);
            }
            
            public static 
            unsafe void NormalStream3ivATI(GL.Enums.ATI_vertex_streams stream, GLint* coords)
            {
                Delegates.glNormalStream3ivATI(stream, coords);
            }
            
            public static 
            void NormalStream3ivATI(GL.Enums.ATI_vertex_streams stream, GLint[] coords)
            {
                unsafe
                {
                    fixed (GLint* coords_ptr = coords)
                    {
                        Delegates.glNormalStream3ivATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void NormalStream3ivATI(GL.Enums.ATI_vertex_streams stream, ref GLint coords)
            {
                unsafe
                {
                    fixed (GLint* coords_ptr = &coords)
                    {
                        Delegates.glNormalStream3ivATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void NormalStream3fATI(GL.Enums.ATI_vertex_streams stream, GLfloat nx, GLfloat ny, GLfloat nz)
            {
                Delegates.glNormalStream3fATI(stream, nx, ny, nz);
            }
            
            public static 
            unsafe void NormalStream3fvATI(GL.Enums.ATI_vertex_streams stream, GLfloat* coords)
            {
                Delegates.glNormalStream3fvATI(stream, coords);
            }
            
            public static 
            void NormalStream3fvATI(GL.Enums.ATI_vertex_streams stream, GLfloat[] coords)
            {
                unsafe
                {
                    fixed (GLfloat* coords_ptr = coords)
                    {
                        Delegates.glNormalStream3fvATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void NormalStream3fvATI(GL.Enums.ATI_vertex_streams stream, ref GLfloat coords)
            {
                unsafe
                {
                    fixed (GLfloat* coords_ptr = &coords)
                    {
                        Delegates.glNormalStream3fvATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void NormalStream3dATI(GL.Enums.ATI_vertex_streams stream, GLdouble nx, GLdouble ny, GLdouble nz)
            {
                Delegates.glNormalStream3dATI(stream, nx, ny, nz);
            }
            
            public static 
            unsafe void NormalStream3dvATI(GL.Enums.ATI_vertex_streams stream, GLdouble* coords)
            {
                Delegates.glNormalStream3dvATI(stream, coords);
            }
            
            public static 
            void NormalStream3dvATI(GL.Enums.ATI_vertex_streams stream, GLdouble[] coords)
            {
                unsafe
                {
                    fixed (GLdouble* coords_ptr = coords)
                    {
                        Delegates.glNormalStream3dvATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void NormalStream3dvATI(GL.Enums.ATI_vertex_streams stream, ref GLdouble coords)
            {
                unsafe
                {
                    fixed (GLdouble* coords_ptr = &coords)
                    {
                        Delegates.glNormalStream3dvATI(stream, coords_ptr);
                    }
                }
            }
            
            public static 
            void ClientActiveVertexStreamATI(GL.Enums.ATI_vertex_streams stream)
            {
                Delegates.glClientActiveVertexStreamATI(stream);
            }
            
            public static 
            void VertexBlendEnviATI(GL.Enums.ATI_vertex_streams pname, GLint param)
            {
                Delegates.glVertexBlendEnviATI(pname, param);
            }
            
            public static 
            void VertexBlendEnvfATI(GL.Enums.ATI_vertex_streams pname, GLfloat param)
            {
                Delegates.glVertexBlendEnvfATI(pname, param);
            }
            
            public static 
            unsafe void ElementPointerATI(GL.Enums.ATI_element_array type, void* pointer)
            {
                Delegates.glElementPointerATI(type, pointer);
            }
            
            public static 
            void ElementPointerATI(GL.Enums.ATI_element_array type, object pointer)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glElementPointerATI(type, (void*)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            void DrawElementArrayATI(GL.Enums.BeginMode mode, GLsizei count)
            {
                Delegates.glDrawElementArrayATI(mode, count);
            }
            
            public static 
            void DrawRangeElementArrayATI(GL.Enums.BeginMode mode, GLuint start, GLuint end, GLsizei count)
            {
                Delegates.glDrawRangeElementArrayATI(mode, start, end, count);
            }
            
            public static 
            unsafe void DrawBuffersATI(GLsizei n, GL.Enums.ATI_draw_buffers* bufs)
            {
                Delegates.glDrawBuffersATI(n, bufs);
            }
            
            public static 
            void DrawBuffersATI(GLsizei n, GL.Enums.ATI_draw_buffers[] bufs)
            {
                unsafe
                {
                    fixed (GL.Enums.ATI_draw_buffers* bufs_ptr = bufs)
                    {
                        Delegates.glDrawBuffersATI(n, bufs_ptr);
                    }
                }
            }
            
            public static 
            void DrawBuffersATI(GLsizei n, ref GL.Enums.ATI_draw_buffers bufs)
            {
                unsafe
                {
                    fixed (GL.Enums.ATI_draw_buffers* bufs_ptr = &bufs)
                    {
                        Delegates.glDrawBuffersATI(n, bufs_ptr);
                    }
                }
            }
            
            public static 
            void MapObjectBufferATI(GLuint buffer)
            {
                Delegates.glMapObjectBufferATI(buffer);
            }
            
            public static 
            void UnmapObjectBufferATI(GLuint buffer)
            {
                Delegates.glUnmapObjectBufferATI(buffer);
            }
            
            public static 
            void StencilOpSeparateATI(GL.Enums.ATI_separate_stencil face, GL.Enums.StencilOp sfail, GL.Enums.StencilOp dpfail, GL.Enums.StencilOp dppass)
            {
                Delegates.glStencilOpSeparateATI(face, sfail, dpfail, dppass);
            }
            
            public static 
            void StencilFuncSeparateATI(GL.Enums.StencilFunction frontfunc, GL.Enums.StencilFunction backfunc, GLint @ref, GLuint mask)
            {
                Delegates.glStencilFuncSeparateATI(frontfunc, backfunc, @ref, mask);
            }
            
            public static 
            unsafe void GetVertexAttribArrayObjectfvATI(GLuint index, GL.Enums.ATI_vertex_attrib_array_object pname, GLfloat* @params)
            {
                Delegates.glGetVertexAttribArrayObjectfvATI(index, pname, @params);
            }
            
            public static 
            void GetVertexAttribArrayObjectfvATI(GLuint index, GL.Enums.ATI_vertex_attrib_array_object pname, GLfloat[] @params)
            {
                unsafe
                {
                    fixed (GLfloat* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribArrayObjectfvATI(index, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetVertexAttribArrayObjectfvATI(GLuint index, GL.Enums.ATI_vertex_attrib_array_object pname, out GLfloat @params)
            {
                @params = default(GLfloat);
                unsafe
                {
                    fixed (GLfloat* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribArrayObjectfvATI(index, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
            public static 
            unsafe void GetVertexAttribArrayObjectivATI(GLuint index, GL.Enums.ATI_vertex_attrib_array_object pname, GLint* @params)
            {
                Delegates.glGetVertexAttribArrayObjectivATI(index, pname, @params);
            }
            
            public static 
            void GetVertexAttribArrayObjectivATI(GLuint index, GL.Enums.ATI_vertex_attrib_array_object pname, GLint[] @params)
            {
                unsafe
                {
                    fixed (GLint* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribArrayObjectivATI(index, pname, @params_ptr);
                    }
                }
            }
            
            public static 
            void GetVertexAttribArrayObjectivATI(GLuint index, GL.Enums.ATI_vertex_attrib_array_object pname, out GLint @params)
            {
                @params = default(GLint);
                unsafe
                {
                    fixed (GLint* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribArrayObjectivATI(index, pname, @params_ptr);
                        @params = *@params_ptr;
                    }
                }
            }
            
        }

        public static class APPLE
        {
            public static 
            unsafe void ElementPointerAPPLE(GL.Enums.APPLE_element_array type, void* pointer)
            {
                Delegates.glElementPointerAPPLE(type, pointer);
            }
            
            public static 
            void ElementPointerAPPLE(GL.Enums.APPLE_element_array type, object pointer)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glElementPointerAPPLE(type, (void*)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            void DrawElementArrayAPPLE(GL.Enums.BeginMode mode, GLint first, GLsizei count)
            {
                Delegates.glDrawElementArrayAPPLE(mode, first, count);
            }
            
            public static 
            void DrawRangeElementArrayAPPLE(GL.Enums.BeginMode mode, GLuint start, GLuint end, GLint first, GLsizei count)
            {
                Delegates.glDrawRangeElementArrayAPPLE(mode, start, end, first, count);
            }
            
            public static 
            unsafe void MultiDrawElementArrayAPPLE(GL.Enums.BeginMode mode, GLint* first, GLsizei* count, GLsizei primcount)
            {
                Delegates.glMultiDrawElementArrayAPPLE(mode, first, count, primcount);
            }
            
            public static 
            unsafe void MultiDrawElementArrayAPPLE(GL.Enums.BeginMode mode, GLint* first, GLsizei[] count, GLsizei primcount)
            {
                    fixed (GLsizei* count_ptr = count)
                    {
                        Delegates.glMultiDrawElementArrayAPPLE(mode, first, count_ptr, primcount);
                    }
            }
            
            public static 
            unsafe void MultiDrawElementArrayAPPLE(GL.Enums.BeginMode mode, GLint* first, ref GLsizei count, GLsizei primcount)
            {
                    fixed (GLsizei* count_ptr = &count)
                    {
                        Delegates.glMultiDrawElementArrayAPPLE(mode, first, count_ptr, primcount);
                    }
            }
            
            public static 
            unsafe void MultiDrawElementArrayAPPLE(GL.Enums.BeginMode mode, GLint[] first, GLsizei* count, GLsizei primcount)
            {
                    fixed (GLint* first_ptr = first)
                    {
                        Delegates.glMultiDrawElementArrayAPPLE(mode, first_ptr, count, primcount);
                    }
            }
            
            public static 
            void MultiDrawElementArrayAPPLE(GL.Enums.BeginMode mode, GLint[] first, GLsizei[] count, GLsizei primcount)
            {
                unsafe
                {
                    fixed (GLint* first_ptr = first)
                    fixed (GLsizei* count_ptr = count)
                    {
                        Delegates.glMultiDrawElementArrayAPPLE(mode, first_ptr, count_ptr, primcount);
                    }
                }
            }
            
            public static 
            void MultiDrawElementArrayAPPLE(GL.Enums.BeginMode mode, GLint[] first, ref GLsizei count, GLsizei primcount)
            {
                unsafe
                {
                    fixed (GLint* first_ptr = first)
                    fixed (GLsizei* count_ptr = &count)
                    {
                        Delegates.glMultiDrawElementArrayAPPLE(mode, first_ptr, count_ptr, primcount);
                    }
                }
            }
            
            public static 
            unsafe void MultiDrawElementArrayAPPLE(GL.Enums.BeginMode mode, ref GLint first, GLsizei* count, GLsizei primcount)
            {
                    fixed (GLint* first_ptr = &first)
                    {
                        Delegates.glMultiDrawElementArrayAPPLE(mode, first_ptr, count, primcount);
                    }
            }
            
            public static 
            void MultiDrawElementArrayAPPLE(GL.Enums.BeginMode mode, ref GLint first, GLsizei[] count, GLsizei primcount)
            {
                unsafe
                {
                    fixed (GLint* first_ptr = &first)
                    fixed (GLsizei* count_ptr = count)
                    {
                        Delegates.glMultiDrawElementArrayAPPLE(mode, first_ptr, count_ptr, primcount);
                    }
                }
            }
            
            public static 
            void MultiDrawElementArrayAPPLE(GL.Enums.BeginMode mode, ref GLint first, ref GLsizei count, GLsizei primcount)
            {
                unsafe
                {
                    fixed (GLint* first_ptr = &first)
                    fixed (GLsizei* count_ptr = &count)
                    {
                        Delegates.glMultiDrawElementArrayAPPLE(mode, first_ptr, count_ptr, primcount);
                    }
                }
            }
            
            public static 
            unsafe void MultiDrawRangeElementArrayAPPLE(GL.Enums.BeginMode mode, GLuint start, GLuint end, GLint* first, GLsizei* count, GLsizei primcount)
            {
                Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount);
            }
            
            public static 
            unsafe void MultiDrawRangeElementArrayAPPLE(GL.Enums.BeginMode mode, GLuint start, GLuint end, GLint* first, GLsizei[] count, GLsizei primcount)
            {
                    fixed (GLsizei* count_ptr = count)
                    {
                        Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count_ptr, primcount);
                    }
            }
            
            public static 
            unsafe void MultiDrawRangeElementArrayAPPLE(GL.Enums.BeginMode mode, GLuint start, GLuint end, GLint* first, ref GLsizei count, GLsizei primcount)
            {
                    fixed (GLsizei* count_ptr = &count)
                    {
                        Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count_ptr, primcount);
                    }
            }
            
            public static 
            unsafe void MultiDrawRangeElementArrayAPPLE(GL.Enums.BeginMode mode, GLuint start, GLuint end, GLint[] first, GLsizei* count, GLsizei primcount)
            {
                    fixed (GLint* first_ptr = first)
                    {
                        Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, first_ptr, count, primcount);
                    }
            }
            
            public static 
            void MultiDrawRangeElementArrayAPPLE(GL.Enums.BeginMode mode, GLuint start, GLuint end, GLint[] first, GLsizei[] count, GLsizei primcount)
            {
                unsafe
                {
                    fixed (GLint* first_ptr = first)
                    fixed (GLsizei* count_ptr = count)
                    {
                        Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, first_ptr, count_ptr, primcount);
                    }
                }
            }
            
            public static 
            void MultiDrawRangeElementArrayAPPLE(GL.Enums.BeginMode mode, GLuint start, GLuint end, GLint[] first, ref GLsizei count, GLsizei primcount)
            {
                unsafe
                {
                    fixed (GLint* first_ptr = first)
                    fixed (GLsizei* count_ptr = &count)
                    {
                        Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, first_ptr, count_ptr, primcount);
                    }
                }
            }
            
            public static 
            unsafe void MultiDrawRangeElementArrayAPPLE(GL.Enums.BeginMode mode, GLuint start, GLuint end, ref GLint first, GLsizei* count, GLsizei primcount)
            {
                    fixed (GLint* first_ptr = &first)
                    {
                        Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, first_ptr, count, primcount);
                    }
            }
            
            public static 
            void MultiDrawRangeElementArrayAPPLE(GL.Enums.BeginMode mode, GLuint start, GLuint end, ref GLint first, GLsizei[] count, GLsizei primcount)
            {
                unsafe
                {
                    fixed (GLint* first_ptr = &first)
                    fixed (GLsizei* count_ptr = count)
                    {
                        Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, first_ptr, count_ptr, primcount);
                    }
                }
            }
            
            public static 
            void MultiDrawRangeElementArrayAPPLE(GL.Enums.BeginMode mode, GLuint start, GLuint end, ref GLint first, ref GLsizei count, GLsizei primcount)
            {
                unsafe
                {
                    fixed (GLint* first_ptr = &first)
                    fixed (GLsizei* count_ptr = &count)
                    {
                        Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, first_ptr, count_ptr, primcount);
                    }
                }
            }
            
            public static 
            unsafe void GenFencesAPPLE(GLsizei n, GLuint* fences)
            {
                Delegates.glGenFencesAPPLE(n, fences);
            }
            
            public static 
            void GenFencesAPPLE(GLsizei n, GLuint[] fences)
            {
                unsafe
                {
                    fixed (GLuint* fences_ptr = fences)
                    {
                        Delegates.glGenFencesAPPLE(n, fences_ptr);
                    }
                }
            }
            
            public static 
            void GenFencesAPPLE(GLsizei n, out GLuint fences)
            {
                fences = default(GLuint);
                unsafe
                {
                    fixed (GLuint* fences_ptr = &fences)
                    {
                        Delegates.glGenFencesAPPLE(n, fences_ptr);
                        fences = *fences_ptr;
                    }
                }
            }
            
            public static 
            unsafe void DeleteFencesAPPLE(GLsizei n, GLuint* fences)
            {
                Delegates.glDeleteFencesAPPLE(n, fences);
            }
            
            public static 
            void DeleteFencesAPPLE(GLsizei n, GLuint[] fences)
            {
                unsafe
                {
                    fixed (GLuint* fences_ptr = fences)
                    {
                        Delegates.glDeleteFencesAPPLE(n, fences_ptr);
                    }
                }
            }
            
            public static 
            void DeleteFencesAPPLE(GLsizei n, ref GLuint fences)
            {
                unsafe
                {
                    fixed (GLuint* fences_ptr = &fences)
                    {
                        Delegates.glDeleteFencesAPPLE(n, fences_ptr);
                    }
                }
            }
            
            public static 
            void SetFenceAPPLE(GLuint fence)
            {
                Delegates.glSetFenceAPPLE(fence);
            }
            
            public static 
            GLboolean IsFenceAPPLE(GLuint fence)
            {
                return Delegates.glIsFenceAPPLE(fence);
            }
            
            public static 
            GLboolean TestFenceAPPLE(GLuint fence)
            {
                return Delegates.glTestFenceAPPLE(fence);
            }
            
            public static 
            void FinishFenceAPPLE(GLuint fence)
            {
                Delegates.glFinishFenceAPPLE(fence);
            }
            
            public static 
            GLboolean TestObjectAPPLE(GL.Enums.APPLE_fence @object, GLuint name)
            {
                return Delegates.glTestObjectAPPLE(@object, name);
            }
            
            public static 
            void FinishObjectAPPLE(GL.Enums.APPLE_fence @object, GLint name)
            {
                Delegates.glFinishObjectAPPLE(@object, name);
            }
            
            public static 
            void BindVertexArrayAPPLE(GLuint array)
            {
                Delegates.glBindVertexArrayAPPLE(array);
            }
            
            public static 
            unsafe void DeleteVertexArraysAPPLE(GLsizei n, GLuint* arrays)
            {
                Delegates.glDeleteVertexArraysAPPLE(n, arrays);
            }
            
            public static 
            void DeleteVertexArraysAPPLE(GLsizei n, GLuint[] arrays)
            {
                unsafe
                {
                    fixed (GLuint* arrays_ptr = arrays)
                    {
                        Delegates.glDeleteVertexArraysAPPLE(n, arrays_ptr);
                    }
                }
            }
            
            public static 
            void DeleteVertexArraysAPPLE(GLsizei n, ref GLuint arrays)
            {
                unsafe
                {
                    fixed (GLuint* arrays_ptr = &arrays)
                    {
                        Delegates.glDeleteVertexArraysAPPLE(n, arrays_ptr);
                    }
                }
            }
            
            public static 
            unsafe void GenVertexArraysAPPLE(GLsizei n, GLuint* arrays)
            {
                Delegates.glGenVertexArraysAPPLE(n, arrays);
            }
            
            public static 
            void GenVertexArraysAPPLE(GLsizei n, GLuint[] arrays)
            {
                unsafe
                {
                    fixed (GLuint* arrays_ptr = arrays)
                    {
                        Delegates.glGenVertexArraysAPPLE(n, arrays_ptr);
                    }
                }
            }
            
            public static 
            void GenVertexArraysAPPLE(GLsizei n, out GLuint arrays)
            {
                arrays = default(GLuint);
                unsafe
                {
                    fixed (GLuint* arrays_ptr = &arrays)
                    {
                        Delegates.glGenVertexArraysAPPLE(n, arrays_ptr);
                        arrays = *arrays_ptr;
                    }
                }
            }
            
            public static 
            GLboolean IsVertexArrayAPPLE(GLuint array)
            {
                return Delegates.glIsVertexArrayAPPLE(array);
            }
            
            public static 
            unsafe void VertexArrayRangeAPPLE(GLsizei length, void* pointer)
            {
                Delegates.glVertexArrayRangeAPPLE(length, pointer);
            }
            
            public static 
            void VertexArrayRangeAPPLE(GLsizei length, object pointer)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glVertexArrayRangeAPPLE(length, (void*)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            unsafe void FlushVertexArrayRangeAPPLE(GLsizei length, void* pointer)
            {
                Delegates.glFlushVertexArrayRangeAPPLE(length, pointer);
            }
            
            public static 
            void FlushVertexArrayRangeAPPLE(GLsizei length, object pointer)
            {
                System.Runtime.InteropServices.GCHandle pointer_ptr = System.Runtime.InteropServices.GCHandle.Alloc(pointer, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glFlushVertexArrayRangeAPPLE(length, (void*)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
            }
            
            public static 
            void VertexArrayParameteriAPPLE(GL.Enums.APPLE_vertex_array_range pname, GLint param)
            {
                Delegates.glVertexArrayParameteriAPPLE(pname, param);
            }
            
            public static 
            void BufferParameteriAPPLE(GL.Enums.APPLE_flush_buffer_range target, GL.Enums.APPLE_flush_buffer_range pname, GLint param)
            {
                Delegates.glBufferParameteriAPPLE(target, pname, param);
            }
            
            public static 
            void FlushMappedBufferRangeAPPLE(GL.Enums.APPLE_flush_buffer_range target, GLintptr offset, GLsizeiptr size)
            {
                Delegates.glFlushMappedBufferRangeAPPLE(target, offset, size);
            }
            
        }

        public static class GREMEDY
        {
            public static 
            unsafe void StringMarkerGREMEDY(GLsizei len, void* @string)
            {
                Delegates.glStringMarkerGREMEDY(len, @string);
            }
            
            public static 
            void StringMarkerGREMEDY(GLsizei len, object @string)
            {
                System.Runtime.InteropServices.GCHandle @string_ptr = System.Runtime.InteropServices.GCHandle.Alloc(@string, System.Runtime.InteropServices.GCHandleType.Pinned);
                unsafe
                {
                    try
                    {
                        Delegates.glStringMarkerGREMEDY(len, (void*)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
            }
            
        }

    }
}
